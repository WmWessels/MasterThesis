0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
886,0.648,0.488,0.496,0.64,0.0,0.648,0.6,0.592,0.664,0.608,0.608,0.64,0.6,0.576,0.576,0.576,0.616,0.568,0.6,0.592,0.584,0.592,0.624,0.56,0.424,0.576,0.632,0.592,0.656,0.64,0.576,0.576,0.656,0.448,0.696,0.616,0.648,0.504,0.608,0,0.624,0.584,0.576,0.56,0.648,0.568,0.576,0.552,0.568,0.0,0.592,0.648,0.536,0.6,0.624,0.568,0.64,0.584,0.672,0.64,0.552,0.624,0.672,0.576,0.608,0.624,0.624,0.56,0.504,0.648,0.688,0.6,0.496,0.592,0.608,0.648,0.56,0.608,0.576,0,0.504,0.0,0.608,0.44,0.0,0.48,0.576,0.568,0.664,0.496,0.504,0.648,0.648,0.696,0.6,0.0,0.648,0.648,0.592,0.616,0.608,0.624,0.672,0.6,0.456,0.0,0.664,0.576,0.56,0.704,0,0.616,0.0,0.488,0.656,0.608,0.624,0.672,0.536,0.592,0.6,0.56,0.56,0.0,0.56,0.544,0.0,0.632,0.0,0.664,0.6,0.584,0.632,0.488,0,0.624,0.656,0.496,0.656,0.664,0.584,0.568,0.648,0.592,0.64,0.664,0.616,0.608,0.56,0.656
888,0.832,0.824,0.824,0.864,0.0,0.832,0.856,0.808,0.848,0.792,0.8,0.752,0.832,0.0,0.728,0.72,0.856,0.696,0.832,0.88,0.816,0.888,0.872,0.672,0.448,0.728,0.504,0.856,0.872,0.736,0.584,0.704,0.896,0.72,0.832,0.688,0.872,0.696,0.872,0,0.768,0.856,0.632,0.816,0.84,0.872,0.632,0.736,0.728,0.76,0.0,0.848,0.536,0.648,0.456,0.752,0.88,0.8,0.376,0.792,0.608,0.872,0.896,0.728,0.624,0.768,0.784,0.872,0.512,0.88,0.856,0.864,0.56,0.816,0.76,0.8,0.784,0.512,0.728,0,0.512,0.0,0.864,0.52,0.0,0.448,0.84,0.84,0.88,0.512,0.512,0.808,0.808,0.896,0.8,0.0,0.88,0.84,0.512,0.784,0.848,0.72,0.864,0.88,0.48,0.76,0.824,0.632,0.52,0.896,0,0.84,0.0,0.472,0.864,0.8,0.856,0.84,0.896,0.856,0.864,0.76,0.52,0.0,0.72,0.816,0.0,0.84,0.0,0.912,0.76,0.888,0.776,0.512,0,0.768,0.856,0.824,0.872,0.84,0.848,0.8,0.624,0.872,0.872,0.728,0.888,0.872,0.88,0.888
896,0.896,0.848,0.704,0.88,0.0,0.88,0.656,0.8,0.84,0.6,0.728,0.64,0.864,0.856,0.72,0.736,0.648,0.784,0.72,0.824,0.728,0.8,0.832,0.704,0.608,0.72,0.56,0.648,0.856,0.56,0.56,0.64,0.888,0.744,0.728,0.656,0.856,0.544,0.856,0,0.696,0.728,0.68,0.68,0.864,0.856,0.68,0.56,0.664,0.704,0.896,0.784,0.552,0.648,0.52,0.744,0.88,0.648,0.56,0.632,0.696,0.768,0.808,0.72,0.64,0.696,0.784,0.88,0.56,0.856,0.88,0.808,0.616,0.776,0.768,0.84,0.696,0.56,0.72,0,0.56,0.0,0.864,0.528,0.0,0.456,0.656,0.704,0.856,0.56,0.56,0.848,0.792,0.872,0.728,0.0,0.904,0.688,0.56,0.72,0.856,0.632,0.904,0.904,0.432,0.592,0.872,0.68,0.592,0.888,0,0.824,0.0,0.472,0.864,0.736,0.832,0.8,0.896,0.912,0.648,0.728,0.552,0.0,0.848,0.84,0.0,0.792,0.0,0.872,0.728,0.888,0.744,0.52,0,0.72,0.864,0.68,0.904,0.784,0.656,0.84,0.56,0.888,0.808,0.592,0.664,0.864,0.888,0.896
897,0.9828178694158075,0.9759450171821306,0.8316151202749141,0.9759450171821306,0.8384879725085911,0.9862542955326461,1.0,0.9862542955326461,0.9896907216494846,0.6804123711340206,0.845360824742268,0.8831615120274914,0.9896907216494846,0.9828178694158075,0.9209621993127147,0.845360824742268,0.9965635738831615,0.9175257731958762,0.8831615120274914,0.979381443298969,0.8865979381443299,0.9759450171821306,0.9759450171821306,0.845360824742268,0.7010309278350515,0.9209621993127147,0.697594501718213,0.9965635738831615,0.9828178694158075,0.7010309278350515,0.7010309278350515,0.7044673539518901,0.9896907216494846,0.8178694158075601,0.9862542955326461,0.9106529209621993,0.993127147766323,0.845360824742268,0.9862542955326461,0,0.7903780068728522,0.9862542955326461,0.7766323024054983,0.8419243986254296,0.9828178694158075,0.9965635738831615,0.7766323024054983,0.7010309278350515,0.8900343642611683,0.8419243986254296,0.9828178694158075,0.9862542955326461,0.8281786941580757,0.8556701030927835,0.7010309278350515,0.9037800687285223,0.9862542955326461,0.6941580756013745,0.9725085910652921,0.9175257731958762,0.9312714776632303,0.979381443298969,0.9759450171821306,0.9209621993127147,0.6907216494845361,0.7938144329896907,0.9690721649484536,0.9828178694158075,0.7010309278350515,0.9828178694158075,0.979381443298969,0.979381443298969,0.7010309278350515,0.9450171821305842,0.845360824742268,0.9828178694158075,0.8831615120274914,0.7010309278350515,0.9209621993127147,0,0.9518900343642611,0.8694158075601375,0.9862542955326461,0.6357388316151202,0.8384879725085911,0.7010309278350515,0.9278350515463918,0.8556701030927835,0.9759450171821306,0.9725085910652921,0.7010309278350515,0.9621993127147767,0.9587628865979382,0.9896907216494846,0.7491408934707904,0.9759450171821306,0.9828178694158075,0.9656357388316151,0.7010309278350515,0.9347079037800687,0.993127147766323,0.6288659793814433,0.9862542955326461,0.993127147766323,0.7010309278350515,0.9828178694158075,0.9896907216494846,0.7766323024054983,0.6563573883161512,0.9862542955326461,0,0.979381443298969,0.8384879725085911,0.5945017182130584,0.9862542955326461,0.9518900343642611,0.9828178694158075,0.9725085910652921,0.9828178694158075,0.979381443298969,0.8900343642611683,0.7731958762886598,0.7663230240549829,0.7010309278350515,0.9896907216494846,0.9759450171821306,0.7010309278350515,0.9690721649484536,0.0,0.993127147766323,0.9484536082474226,0.9896907216494846,0.9484536082474226,0.8144329896907216,0,0.7938144329896907,0.9965635738831615,0.8419243986254296,0.993127147766323,0.979381443298969,0.993127147766323,0.979381443298969,0.7010309278350515,0.979381443298969,0.9759450171821306,0.7044673539518901,0.9072164948453608,0.9828178694158075,0.9896907216494846,0.9828178694158075
900,0.56,0.55,0.59,0.59,0.49,0.54,0.59,0.49,0.53,0.59,0.59,0.59,0.57,0.51,0.52,0.48,0.59,0.59,0.57,0.59,0.58,0.0,0.59,0.41,0.56,0.59,0.51,0.59,0.59,0.59,0.59,0.59,0.57,0.45,0.52,0.61,0.47,0.59,0.59,0,0.59,0.0,0.59,0.59,0.59,0.43,0.59,0.59,0.57,0.0,0.52,0.53,0.54,0.44,0.54,0.55,0.52,0.58,0.56,0.53,0.52,0.59,0.59,0.52,0.48,0.59,0.51,0.59,0.59,0.59,0.6,0.54,0.57,0.59,0.59,0.44,0.59,0.59,0.52,0,0.59,0.59,0.59,0.48,0.5,0.54,0.58,0.6,0.59,0.59,0.59,0.52,0.52,0.48,0.56,0.0,0.59,0.59,0.59,0.52,0.44,0.64,0.58,0.53,0.58,0.0,0.54,0.59,0.42,0.59,0,0.49,0.5,0.57,0.53,0.55,0.51,0.56,0.0,0.45,0.59,0.39,0.59,0.59,0.5,0.53,0.59,0.58,0.56,0.55,0.52,0.0,0.48,0.56,0,0.59,0.49,0.59,0.49,0.55,0.59,0.54,0.59,0.59,0.59,0.59,0.6,0.58,0.0,0.57
903,0.904,0.88,0.704,0.852,0.0,0.908,0.632,0.844,0.896,0.652,0.752,0.696,0.884,0.892,0.76,0.664,0.632,0.756,0.744,0.848,0.74,0.872,0.86,0.752,0.512,0.76,0.564,0.632,0.904,0.564,0.564,0.564,0.92,0.728,0.848,0.768,0.912,0.588,0.9,0,0.752,0.924,0.712,0.704,0.916,0.896,0.708,0.564,0.664,0.772,0.896,0.828,0.508,0.652,0.572,0.664,0.896,0.588,0.56,0.62,0.792,0.844,0.848,0.76,0.84,0.756,0.848,0.9,0.564,0.86,0.896,0.864,0.552,0.84,0.76,0.876,0.676,0.564,0.76,0,0.764,0.0,0.888,0.572,0.0,0.556,0.676,0.7,0.86,0.772,0.564,0.876,0.84,0.92,0.796,0.0,0.912,0.832,0.564,0.712,0.912,0.648,0.9,0.92,0.56,0.872,0.912,0.712,0.508,0.876,0,0.872,0.0,0.512,0.9,0.808,0.88,0.808,0.924,0.9,0.68,0.752,0.692,0.0,0.86,0.872,0.0,0.8,0.0,0.912,0.824,0.908,0.72,0.524,0,0.764,0.888,0.692,0.92,0.82,0.632,0.832,0.564,0.904,0.816,0.676,0.76,0.896,0.908,0.92
904,0.848,0.764,0.784,0.856,0.0,0.884,0.812,0.824,0.84,0.732,0.768,0.752,0.86,0.0,0.692,0.652,0.808,0.696,0.792,0.844,0.716,0.86,0.856,0.736,0.504,0.692,0.492,0.808,0.856,0.832,0.532,0.676,0.892,0.656,0.724,0.604,0.868,0.664,0.864,0,0.752,0.888,0.568,0.692,0.86,0.872,0.568,0.764,0.664,0.768,0.0,0.832,0.556,0.632,0.484,0.692,0.864,0.784,0.476,0.712,0.64,0.848,0.84,0.692,0.596,0.752,0.672,0.86,0.508,0.86,0.856,0.856,0.488,0.776,0.74,0.844,0.716,0.508,0.692,0,0.792,0.0,0.86,0.512,0.0,0.452,0.824,0.796,0.844,0.772,0.508,0.828,0.8,0.896,0.74,0.0,0.876,0.708,0.508,0.724,0.836,0.764,0.884,0.868,0.472,0.768,0.86,0.568,0.532,0.868,0,0.8,0.0,0.5,0.0,0.688,0.868,0.836,0.864,0.844,0.836,0.74,0.6,0.0,0.784,0.796,0.0,0.832,0.0,0.892,0.676,0.868,0.732,0.568,0,0.756,0.852,0.788,0.864,0.836,0.812,0.816,0.62,0.856,0.852,0.656,0.844,0.872,0.868,0.868
906,0.0,0.48,0.47,0.5,0.0,0.48,0.47,0.43,0.47,0.48,0.52,0.0,0.49,0.44,0.51,0.48,0.47,0.44,0.0,0.52,0.48,0.0,0.51,0.48,0.51,0.51,0.46,0.42,0.48,0.49,0.52,0.52,0.51,0.48,0.48,0.52,0.48,0.52,0.52,0,0.52,0.0,0.52,0.52,0.49,0.57,0.52,0.52,0.52,0.0,0.45,0.46,0.51,0.46,0.49,0.46,0.47,0.49,0.54,0.43,0.52,0.44,0.46,0.51,0.49,0.52,0.5,0.49,0.52,0.48,0.49,0.56,0.55,0.5,0.52,0.46,0.43,0.52,0.51,0,0.52,0.54,0.52,0.49,0.52,0.39,0.43,0.0,0.47,0.52,0.52,0.54,0.54,0.0,0.51,0.0,0.0,0.5,0.51,0.49,0.46,0.53,0.52,0.48,0.48,0.0,0.53,0.52,0.46,0.5,0,0.0,0.52,0.5,0.54,0.52,0.48,0.52,0.0,0.52,0.48,0.48,0.55,0.52,0.51,0.56,0.52,0.48,0.54,0.46,0.49,0.0,0.48,0.51,0,0.52,0.44,0.47,0.51,0.47,0.53,0.48,0.48,0.48,0.53,0.44,0.0,0.52,0.0,0.54
907,0.5,0.48,0.45,0.52,0.54,0.46,0.48,0.46,0.49,0.49,0.51,0.47,0.46,0.47,0.46,0.49,0.48,0.51,0.53,0.49,0.6,0.0,0.46,0.49,0.47,0.49,0.54,0.49,0.5,0.5,0.5,0.5,0.52,0.49,0.49,0.51,0.56,0.51,0.56,0,0.51,0.0,0.52,0.51,0.44,0.55,0.52,0.51,0.57,0.0,0.47,0.53,0.51,0.49,0.4,0.47,0.48,0.49,0.51,0.52,0.55,0.49,0.45,0.46,0.49,0.51,0.53,0.53,0.49,0.46,0.5,0.45,0.58,0.49,0.51,0.52,0.51,0.51,0.46,0,0.51,0.54,0.5,0.48,0.52,0.54,0.48,0.47,0.45,0.51,0.51,0.46,0.56,0.52,0.55,0.0,0.55,0.5,0.51,0.54,0.53,0.5,0.49,0.43,0.52,0.0,0.51,0.52,0.45,0.54,0,0.52,0.52,0.45,0.5,0.52,0.45,0.46,0.0,0.42,0.51,0.51,0.51,0.51,0.45,0.49,0.49,0.51,0.52,0.51,0.52,0.0,0.51,0.54,0,0.51,0.54,0.44,0.5,0.5,0.5,0.57,0.5,0.5,0.46,0.5,0.52,0.45,0.0,0.48
908,0.0,0.47,0.49,0.51,0.0,0.45,0.56,0.47,0.41,0.53,0.52,0.0,0.46,0.47,0.51,0.48,0.53,0.53,0.0,0.53,0.5,0.0,0.55,0.48,0.47,0.51,0.44,0.53,0.49,0.52,0.51,0.52,0.44,0.48,0.46,0.52,0.46,0.52,0.51,0,0.52,0.0,0.52,0.52,0.44,0.46,0.52,0.52,0.51,0.0,0.45,0.47,0.56,0.45,0.43,0.51,0.46,0.51,0.45,0.41,0.46,0.51,0.5,0.51,0.5,0.52,0.51,0.48,0.54,0.5,0.44,0.51,0.45,0.48,0.52,0.42,0.48,0.52,0.51,0,0.52,0.5,0.5,0.47,0.52,0.5,0.54,0.0,0.5,0.52,0.52,0.52,0.46,0.0,0.47,0.0,0.0,0.49,0.52,0.47,0.41,0.5,0.42,0.46,0.47,0.0,0.43,0.52,0.51,0.43,0,0.0,0.52,0.49,0.47,0.43,0.45,0.46,0.0,0.44,0.54,0.45,0.52,0.52,0.49,0.46,0.52,0.45,0.47,0.44,0.5,0.0,0.48,0.51,0,0.52,0.4,0.46,0.46,0.44,0.52,0.47,0.53,0.5,0.52,0.54,0.0,0.5,0.0,0.49
909,0.45,0.51,0.51,0.49,0.48,0.45,0.53,0.51,0.43,0.54,0.51,0.51,0.42,0.44,0.49,0.51,0.53,0.51,0.49,0.52,0.43,0.0,0.5,0.51,0.57,0.48,0.5,0.53,0.54,0.48,0.49,0.49,0.42,0.51,0.45,0.42,0.46,0.51,0.49,0,0.51,0.0,0.47,0.51,0.45,0.48,0.48,0.51,0.52,0.0,0.43,0.53,0.5,0.51,0.54,0.53,0.49,0.52,0.44,0.51,0.44,0.5,0.5,0.49,0.41,0.51,0.47,0.43,0.51,0.46,0.42,0.46,0.53,0.51,0.51,0.47,0.43,0.51,0.49,0,0.51,0.48,0.47,0.52,0.5,0.51,0.53,0.47,0.5,0.51,0.51,0.46,0.52,0.48,0.49,0.0,0.48,0.47,0.5,0.49,0.49,0.47,0.46,0.52,0.51,0.0,0.45,0.47,0.46,0.53,0,0.49,0.5,0.45,0.41,0.46,0.47,0.46,0.0,0.45,0.54,0.5,0.5,0.51,0.45,0.5,0.43,0.45,0.48,0.5,0.46,0.0,0.52,0.53,0,0.51,0.47,0.52,0.5,0.47,0.53,0.49,0.51,0.5,0.52,0.46,0.48,0.49,0.0,0.47
910,0.928,0.908,0.776,0.904,0.0,0.912,0.668,0.924,0.92,0.66,0.76,0.608,0.916,0.9,0.736,0.74,0.668,0.872,0.844,0.912,0.864,0.868,0.888,0.788,0.556,0.736,0.684,0.668,0.94,0.564,0.564,0.62,0.952,0.772,0.888,0.812,0.932,0.58,0.92,0,0.76,0.924,0.752,0.736,0.932,0.948,0.752,0.564,0.716,0.8,0.916,0.924,0.56,0.712,0.56,0.76,0.948,0.724,0.64,0.776,0.808,0.884,0.916,0.736,0.784,0.76,0.856,0.932,0.564,0.92,0.924,0.864,0.568,0.804,0.796,0.924,0.808,0.564,0.736,0,0.812,0.0,0.924,0.728,0.0,0.72,0.68,0.78,0.9,0.736,0.564,0.892,0.868,0.94,0.684,0.0,0.956,0.844,0.564,0.824,0.936,0.672,0.948,0.832,0.592,0.824,0.92,0.752,0.596,0.928,0,0.92,0.0,0.756,0.936,0.86,0.916,0.856,0.936,0.936,0.652,0.756,0.872,0.0,0.896,0.928,0.0,0.88,0.0,0.94,0.84,0.944,0.832,0.596,0,0.784,0.908,0.772,0.948,0.9,0.672,0.912,0.564,0.952,0.9,0.692,0.696,0.94,0.936,0.936
912,0.944,0.908,0.888,0.92,0.0,0.928,0.736,0.948,0.928,0.832,0.86,0.796,0.932,0.916,0.82,0.84,0.732,0.924,0.916,0.9,0.912,0.88,0.924,0.804,0.944,0.82,0.872,0.732,0.944,0.584,0.584,0.604,0.952,0.828,0.92,0.848,0.936,0.616,0.944,0,0.836,0.94,0.756,0.832,0.94,0.948,0.756,0.584,0.744,0.86,0.932,0.94,0.672,0.808,0.868,0.928,0.956,0.856,0.928,0.908,0.876,0.912,0.916,0.82,0.832,0.84,0.9,0.928,0.584,0.912,0.928,0.872,0.944,0.84,0.828,0.928,0.912,0.584,0.82,0,0.808,0.0,0.924,0.912,0.0,0.84,0.736,0.9,0.908,0.844,0.584,0.92,0.888,0.94,0.88,0.0,0.952,0.872,0.584,0.916,0.928,0.764,0.952,0.824,0.912,0.924,0.964,0.756,0.924,0.936,0,0.94,0.0,0.952,0.948,0.9,0.944,0.924,0.912,0.96,0.8,0.848,0.704,0.0,0.904,0.916,0.0,0.936,0.0,0.96,0.892,0.948,0.932,0.668,0,0.848,0.912,0.896,0.96,0.932,0.74,0.928,0.584,0.952,0.904,0.84,0.836,0.928,0.944,0.944
913,0.892,0.908,0.792,0.836,0.0,0.868,0.7,0.864,0.844,0.788,0.792,0.596,0.868,0.872,0.788,0.732,0.696,0.824,0.796,0.836,0.788,0.86,0.856,0.776,0.568,0.788,0.768,0.696,0.876,0.58,0.58,0.788,0.892,0.788,0.88,0.768,0.896,0.648,0.864,0,0.768,0.924,0.7,0.788,0.876,0.916,0.7,0.58,0.708,0.8,0.888,0.884,0.64,0.7,0.572,0.784,0.9,0.728,0.704,0.78,0.82,0.836,0.868,0.788,0.852,0.768,0.844,0.892,0.58,0.864,0.876,0.872,0.592,0.836,0.8,0.872,0.776,0.58,0.788,0,0.784,0.0,0.892,0.684,0.0,0.72,0.728,0.78,0.844,0.804,0.58,0.88,0.824,0.912,0.808,0.0,0.9,0.82,0.58,0.8,0.888,0.716,0.892,0.856,0.572,0.844,0.916,0.7,0.576,0.864,0,0.86,0.0,0.748,0.896,0.8,0.876,0.796,0.852,0.916,0.6,0.756,0.66,0.0,0.832,0.908,0.0,0.82,0.0,0.908,0.824,0.88,0.82,0.616,0,0.792,0.868,0.792,0.896,0.86,0.72,0.912,0.58,0.896,0.84,0.828,0.788,0.872,0.912,0.904
915,0.6075949367088608,0.5569620253164557,0.569620253164557,0.5443037974683544,0.5569620253164557,0.620253164556962,0.6708860759493671,0.6455696202531646,0.620253164556962,0.5949367088607594,0.5822784810126582,0.5822784810126582,0.6582278481012658,0.4810126582278481,0.5063291139240507,0.5822784810126582,0.6075949367088608,0.6455696202531646,0.5949367088607594,0.5569620253164557,0.5949367088607594,0.0,0.569620253164557,0.5822784810126582,0.5316455696202531,0.5063291139240507,0.5189873417721519,0.569620253164557,0.5316455696202531,0.5822784810126582,0.5822784810126582,0.5949367088607594,0.4810126582278481,0.5822784810126582,0.5569620253164557,0.5569620253164557,0.6455696202531646,0.5822784810126582,0.5316455696202531,0,0.5822784810126582,0.0,0.5316455696202531,0.569620253164557,0.5949367088607594,0.5316455696202531,0.5316455696202531,0.5822784810126582,0.5063291139240507,0.0,0.5063291139240507,0.620253164556962,0.6075949367088608,0.569620253164557,0.6075949367088608,0.6075949367088608,0.5189873417721519,0.620253164556962,0.5949367088607594,0.5063291139240507,0.4810126582278481,0.5569620253164557,0.5569620253164557,0.5063291139240507,0.5949367088607594,0.4936708860759494,0.569620253164557,0.569620253164557,0.5822784810126582,0.5569620253164557,0.6075949367088608,0.569620253164557,0.6075949367088608,0.5569620253164557,0.5822784810126582,0.620253164556962,0.620253164556962,0.5822784810126582,0.5063291139240507,0,0.5822784810126582,0.5569620253164557,0.5443037974683544,0.5316455696202531,0.5443037974683544,0.45569620253164556,0.6075949367088608,0.5949367088607594,0.5316455696202531,0.5822784810126582,0.5822784810126582,0.5316455696202531,0.5569620253164557,0.6329113924050633,0.6835443037974683,0.0,0.5063291139240507,0.5316455696202531,0.5822784810126582,0.5443037974683544,0.6075949367088608,0.5316455696202531,0.5316455696202531,0.45569620253164556,0.5063291139240507,0.0,0.5949367088607594,0.5316455696202531,0.4810126582278481,0.5316455696202531,0,0.6962025316455697,0.5443037974683544,0.43037974683544306,0.5569620253164557,0.6075949367088608,0.6708860759493671,0.620253164556962,0.5316455696202531,0.5569620253164557,0.5822784810126582,0.5316455696202531,0.5822784810126582,0.5822784810126582,0.43037974683544306,0.569620253164557,0.5822784810126582,0.6075949367088608,0.5949367088607594,0.569620253164557,0.5316455696202531,0.4936708860759494,0.5189873417721519,0.4810126582278481,0,0.5822784810126582,0.5822784810126582,0.5822784810126582,0.5063291139240507,0.6075949367088608,0.5822784810126582,0.5443037974683544,0.5822784810126582,0.5189873417721519,0.5316455696202531,0.6329113924050633,0.5949367088607594,0.5189873417721519,0.0,0.5063291139240507
917,0.872,0.828,0.632,0.884,0.0,0.876,0.644,0.864,0.868,0.64,0.728,0.636,0.888,0.872,0.712,0.652,0.64,0.728,0.72,0.892,0.732,0.864,0.888,0.692,0.552,0.712,0.544,0.64,0.9,0.556,0.548,0.74,0.896,0.724,0.772,0.72,0.872,0.564,0.9,0,0.72,0.876,0.688,0.672,0.872,0.872,0.688,0.548,0.672,0.7,0.876,0.828,0.556,0.604,0.488,0.648,0.908,0.62,0.536,0.576,0.676,0.892,0.9,0.712,0.792,0.72,0.768,0.868,0.544,0.888,0.868,0.868,0.56,0.816,0.732,0.832,0.672,0.544,0.712,0,0.752,0.0,0.876,0.52,0.0,0.564,0.644,0.644,0.904,0.656,0.544,0.84,0.824,0.888,0.788,0.0,0.884,0.76,0.544,0.7,0.88,0.644,0.88,0.9,0.484,0.768,0.884,0.688,0.52,0.88,0,0.812,0.0,0.536,0.868,0.792,0.864,0.816,0.872,0.864,0.736,0.716,0.828,0.0,0.824,0.824,0.0,0.836,0.0,0.888,0.756,0.876,0.704,0.48,0,0.744,0.872,0.648,0.888,0.828,0.648,0.844,0.544,0.904,0.88,0.736,0.668,0.888,0.904,0.892
920,0.888,0.904,0.704,0.88,0.0,0.896,0.712,0.888,0.888,0.632,0.832,0.64,0.872,0.0,0.84,0.768,0.712,0.696,0.784,0.864,0.752,0.888,0.88,0.784,0.544,0.84,0.568,0.712,0.912,0.592,0.592,0.648,0.88,0.744,0.816,0.72,0.912,0.592,0.88,0,0.856,0.912,0.736,0.784,0.888,0.904,0.736,0.592,0.744,0.864,0.0,0.856,0.512,0.68,0.56,0.72,0.92,0.616,0.592,0.656,0.736,0.88,0.872,0.84,0.648,0.864,0.744,0.904,0.592,0.864,0.888,0.88,0.568,0.84,0.84,0.832,0.656,0.592,0.84,0,0.592,0.0,0.888,0.488,0.0,0.528,0.704,0.696,0.88,0.592,0.592,0.912,0.856,0.936,0.656,0.0,0.912,0.816,0.592,0.736,0.92,0.648,0.896,0.936,0.568,0.808,0.912,0.736,0.64,0.888,0,0.896,0.0,0.424,0.872,0.792,0.888,0.88,0.912,0.904,0.632,0.824,0.76,0.0,0.864,0.904,0.0,0.84,0.0,0.928,0.744,0.936,0.784,0.584,0,0.872,0.904,0.728,0.912,0.872,0.704,0.888,0.592,0.904,0.84,0.632,0.816,0.88,0.936,0.904
926,0.816,0.728,0.776,0.84,0.0,0.824,0.8,0.784,0.856,0.688,0.712,0.736,0.848,0.76,0.656,0.664,0.808,0.656,0.792,0.784,0.744,0.832,0.752,0.64,0.464,0.656,0.496,0.808,0.808,0.8,0.544,0.72,0.872,0.704,0.736,0.6,0.848,0.608,0.824,0,0.672,0.872,0.536,0.68,0.832,0.84,0.536,0.688,0.648,0.736,0.776,0.768,0.624,0.632,0.528,0.712,0.84,0.76,0.512,0.704,0.584,0.768,0.816,0.656,0.704,0.68,0.728,0.832,0.512,0.816,0.808,0.848,0.528,0.736,0.672,0.824,0.712,0.512,0.656,0,0.488,0.0,0.808,0.472,0.0,0.544,0.736,0.744,0.784,0.512,0.512,0.76,0.752,0.848,0.656,0.0,0.824,0.768,0.52,0.76,0.84,0.776,0.88,0.832,0.408,0.76,0.848,0.536,0.504,0.856,0,0.792,0.0,0.472,0.824,0.752,0.848,0.816,0.824,0.84,0.744,0.648,0.568,0.0,0.712,0.8,0.0,0.776,0.0,0.856,0.704,0.824,0.696,0.672,0,0.68,0.84,0.768,0.864,0.792,0.792,0.792,0.616,0.808,0.824,0.736,0.832,0.84,0.824,0.856
930,0.7239263803680982,0.6871165644171779,0.7392638036809815,0.7300613496932515,0.6748466257668712,0.7300613496932515,0.7269938650306749,0.7699386503067485,0.7331288343558282,0.696319018404908,0.5276073619631901,0.7300613496932515,0.7300613496932515,0.0,0.696319018404908,0.4723926380368098,0.7208588957055214,0.745398773006135,0.7331288343558282,0.7239263803680982,0.7300613496932515,0.7269938650306749,0.7484662576687117,0.4723926380368098,0.44785276073619634,0.696319018404908,0.5736196319018405,0.7177914110429447,0.7177914110429447,0.6411042944785276,0.5276073619631901,0.7024539877300614,0.7361963190184049,0.4723926380368098,0.7147239263803681,0.7024539877300614,0.7116564417177914,0.5276073619631901,0.7177914110429447,0,0.5306748466257669,0.7208588957055214,0.7024539877300614,0.5276073619631901,0.7331288343558282,0.745398773006135,0.7024539877300614,0.5276073619631901,0.7055214723926381,0.0,0.0,0.745398773006135,0.6901840490797546,0.7085889570552147,0.5306748466257669,0.7147239263803681,0.7392638036809815,0.7055214723926381,0.7239263803680982,0.7331288343558282,0.6226993865030674,0.7300613496932515,0.7116564417177914,0.696319018404908,0.6687116564417178,0.5306748466257669,0.7239263803680982,0.7331288343558282,0.5276073619631901,0.7331288343558282,0.7361963190184049,0.7024539877300614,0.5122699386503068,0.6779141104294478,0.5276073619631901,0.7269938650306749,0.7239263803680982,0.5276073619631901,0.696319018404908,0,0.7331288343558282,0.7085889570552147,0.7147239263803681,0.49079754601226994,0.6748466257668712,0.558282208588957,0.7331288343558282,0.7331288343558282,0.7269938650306749,0.7116564417177914,0.5276073619631901,0.6779141104294478,0.6687116564417178,0.7269938650306749,0.7607361963190185,0.6748466257668712,0.7300613496932515,0.7361963190184049,0.6687116564417178,0.7423312883435583,0.6779141104294478,0.6687116564417178,0.7392638036809815,0.7055214723926381,0.5337423312883436,0.696319018404908,0.7361963190184049,0.7024539877300614,0.5030674846625767,0.7423312883435583,0,0.7239263803680982,0.6748466257668712,0.46932515337423314,0.7331288343558282,0.7361963190184049,0.7208588957055214,0.745398773006135,0.7269938650306749,0.7055214723926381,0.7300613496932515,0.7085889570552147,0.6993865030674846,0.5276073619631901,0.656441717791411,0.6779141104294478,0.5828220858895705,0.7331288343558282,0.647239263803681,0.7361963190184049,0.7147239263803681,0.754601226993865,0.7269938650306749,0.7208588957055214,0,0.5306748466257669,0.6993865030674846,0.7300613496932515,0.7423312883435583,0.754601226993865,0.7269938650306749,0.6748466257668712,0.5306748466257669,0.7331288343558282,0.7269938650306749,0.7085889570552147,0.7147239263803681,0.7361963190184049,0.7147239263803681,0.7331288343558282
934,0.9273356401384083,0.9238754325259516,0.916955017301038,0.9134948096885813,0.9065743944636678,0.9342560553633218,0.9100346020761245,0.9411764705882353,0.9446366782006921,0.9100346020761245,0.7785467128027682,0.7785467128027682,0.9238754325259516,0.9238754325259516,0.916955017301038,0.7785467128027682,0.9134948096885813,0.916955017301038,0.916955017301038,0.8927335640138409,0.916955017301038,0.9065743944636678,0.9065743944636678,0.7785467128027682,0.7785467128027682,0.9204152249134948,0.8823529411764706,0.9134948096885813,0.9100346020761245,0.7785467128027682,0.7785467128027682,0.8373702422145328,0.9238754325259516,0.7785467128027682,0.9204152249134948,0.9100346020761245,0.9653979238754326,0.7785467128027682,0.7785467128027682,0,0.45674740484429066,0.9065743944636678,0.9238754325259516,0.7785467128027682,0.9273356401384083,0.9653979238754326,0.9238754325259516,0.7785467128027682,0.9238754325259516,0.7785467128027682,0.9342560553633218,0.9480968858131488,0.9065743944636678,0.7993079584775087,0.7785467128027682,0.9100346020761245,0.9342560553633218,0.889273356401384,0.9134948096885813,0.8996539792387543,0.9307958477508651,0.9065743944636678,0.9100346020761245,0.916955017301038,0.9204152249134948,0.45674740484429066,0.9342560553633218,0.916955017301038,0.8719723183391004,0.903114186851211,0.9065743944636678,0.9342560553633218,0.7647058823529411,0.9273356401384083,0.7785467128027682,0.9411764705882353,0.9065743944636678,0.8615916955017301,0.9204152249134948,0,0.8200692041522492,0.8858131487889274,0.9134948096885813,0.7785467128027682,0.903114186851211,0.7785467128027682,0.8442906574394463,0.916955017301038,0.9065743944636678,0.7785467128027682,0.7785467128027682,0.9273356401384083,0.9238754325259516,0.9446366782006921,0.9134948096885813,0.8996539792387543,0.9273356401384083,0.916955017301038,0.7785467128027682,0.9065743944636678,0.9342560553633218,0.8235294117647058,0.9273356401384083,0.916955017301038,0.7785467128027682,0.889273356401384,0.9342560553633218,0.9238754325259516,0.7785467128027682,0.916955017301038,0,0.9515570934256056,0.903114186851211,0.8754325259515571,0.9307958477508651,0.9307958477508651,0.9411764705882353,0.9204152249134948,0.9100346020761245,0.9446366782006921,0.7889273356401384,0.8235294117647058,0.7785467128027682,0.7785467128027682,0.9273356401384083,0.9065743944636678,0.7785467128027682,0.9238754325259516,0.8615916955017301,0.9584775086505191,0.9307958477508651,0.916955017301038,0.903114186851211,0.903114186851211,0,0.7785467128027682,0.9307958477508651,0.916955017301038,0.9377162629757786,0.9411764705882353,0.9134948096885813,0.9204152249134948,0.7785467128027682,0.903114186851211,0.9134948096885813,0.8961937716262975,0.903114186851211,0.916955017301038,0.9273356401384083,0.916955017301038

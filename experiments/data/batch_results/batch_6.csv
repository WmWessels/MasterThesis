0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
824,0.928,0.88,0.704,0.872,0.0,0.912,0.616,0.888,0.888,0.696,0.752,0.592,0.904,0.888,0.76,0.672,0.616,0.856,0.808,0.864,0.816,0.896,0.832,0.776,0.52,0.76,0.664,0.616,0.88,0.544,0.544,0.624,0.96,0.728,0.856,0.76,0.92,0.576,0.872,0,0.76,0.896,0.72,0.688,0.928,0.928,0.72,0.544,0.688,0.76,0.904,0.88,0.488,0.696,0.536,0.784,0.928,0.632,0.704,0.648,0.744,0.792,0.856,0.76,0.76,0.76,0.84,0.92,0.544,0.856,0.912,0.792,0.536,0.792,0.744,0.88,0.712,0.544,0.76,0,0.544,0.0,0.896,0.568,0.0,0.648,0.656,0.72,0.824,0.544,0.544,0.856,0.808,0.904,0.744,0.0,0.92,0.776,0.544,0.784,0.904,0.624,0.92,0.824,0.552,0.8,0.888,0.72,0.536,0.904,0,0.848,0.0,0.688,0.944,0.84,0.872,0.808,0.848,0.904,0.584,0.76,0.72,0.0,0.84,0.84,0.0,0.872,0.0,0.92,0.808,0.88,0.848,0.536,0.0,0.76,0.824,0.688,0.928,0.864,0.616,0.816,0.544,0.896,0.848,0.624,0.624,0.912,0.896,0.904
825,0.8740157480314961,0.8346456692913385,0.7244094488188977,0.8031496062992126,0.7165354330708661,0.8661417322834646,0.8110236220472441,0.8661417322834646,0.8582677165354331,0.7480314960629921,0.7401574803149606,0.8582677165354331,0.8346456692913385,0.8740157480314961,0.7952755905511811,0.7244094488188977,0.84251968503937,0.8346456692913385,0.8188976377952756,0.8110236220472441,0.7480314960629921,0.8110236220472441,0.8031496062992126,0.7322834645669292,0.6220472440944882,0.8031496062992126,0.6850393700787402,0.8110236220472441,0.8110236220472441,0.5590551181102362,0.5590551181102362,0.7716535433070866,0.8582677165354331,0.7322834645669292,0.8503937007874016,0.8031496062992126,0.84251968503937,0.7165354330708661,0.8267716535433071,0,0.7165354330708661,0.8503937007874016,0.7244094488188977,0.7401574803149606,0.8740157480314961,0.8661417322834646,0.7244094488188977,0.5590551181102362,0.8267716535433071,0.7086614173228346,0.889763779527559,0.8582677165354331,0.8188976377952756,0.8031496062992126,0.5748031496062992,0.7795275590551181,0.8346456692913385,0.7795275590551181,0.7795275590551181,0.7795275590551181,0.8110236220472441,0.8031496062992126,0.8110236220472441,0.7952755905511811,0.7559055118110236,0.7401574803149606,0.84251968503937,0.8818897637795275,0.5590551181102362,0.8110236220472441,0.8503937007874016,0.8503937007874016,0.5511811023622047,0.8188976377952756,0.6929133858267716,0.8582677165354331,0.8110236220472441,0.7165354330708661,0.8031496062992126,0,0.5590551181102362,0.0,0.84251968503937,0.5826771653543307,0.0,0.5826771653543307,0.8031496062992126,0.7952755905511811,0.8110236220472441,0.5590551181102362,0.5590551181102362,0.8503937007874016,0.7874015748031497,0.8661417322834646,0.8031496062992126,0.0,0.8346456692913385,0.7874015748031497,0.7244094488188977,0.7716535433070866,0.8582677165354331,0.7007874015748031,0.84251968503937,0.8031496062992126,0.5354330708661418,0.8110236220472441,0.8818897637795275,0.7244094488188977,0.5590551181102362,0.8503937007874016,0,0.84251968503937,0.0,0.48031496062992124,0.8582677165354331,0.8267716535433071,0.8582677165354331,0.8110236220472441,0.8110236220472441,0.8818897637795275,0.7795275590551181,0.7952755905511811,0.7322834645669292,0.0,0.84251968503937,0.8267716535433071,0.0,0.8267716535433071,0.0,0.8582677165354331,0.8188976377952756,0.8503937007874016,0.8346456692913385,0.7874015748031497,0.0,0.7165354330708661,0.8503937007874016,0.7716535433070866,0.8503937007874016,0.8267716535433071,0.8031496062992126,0.84251968503937,0.5590551181102362,0.8188976377952756,0.8031496062992126,0.7559055118110236,0.7952755905511811,0.8188976377952756,0.8582677165354331,0.8582677165354331
826,0.6388888888888888,0.5902777777777778,0.6319444444444444,0.6527777777777778,0.6041666666666666,0.6666666666666666,0.625,0.6597222222222222,0.6388888888888888,0.5277777777777778,0.6805555555555556,0.0,0.6944444444444444,0.6388888888888888,0.6319444444444444,0.5902777777777778,0.6111111111111112,0.6458333333333334,0.0,0.6875,0.6736111111111112,0.6319444444444444,0.6458333333333334,0.6458333333333334,0.6111111111111112,0.6319444444444444,0.5277777777777778,0.6111111111111112,0.6805555555555556,0.5833333333333334,0.5833333333333334,0.5347222222222222,0.6458333333333334,0.6180555555555556,0.6319444444444444,0.6111111111111112,0.6597222222222222,0.625,0.6666666666666666,0,0.6180555555555556,0.6319444444444444,0.6111111111111112,0.6388888888888888,0.6944444444444444,0.6875,0.6111111111111112,0.5833333333333334,0.6805555555555556,0.6319444444444444,0.6597222222222222,0.6041666666666666,0.5486111111111112,0.6041666666666666,0.5763888888888888,0.6388888888888888,0.6805555555555556,0.5763888888888888,0.5972222222222222,0.625,0.6319444444444444,0.6736111111111112,0.6805555555555556,0.6319444444444444,0.5694444444444444,0.5763888888888888,0.6458333333333334,0.6805555555555556,0.5833333333333334,0.7013888888888888,0.7083333333333334,0.6458333333333334,0.6041666666666666,0.6597222222222222,0.6666666666666666,0.6597222222222222,0.6597222222222222,0.5833333333333334,0.6319444444444444,0,0.5833333333333334,0.5833333333333334,0.6597222222222222,0.5694444444444444,0.625,0.6041666666666666,0.6319444444444444,0.0,0.6944444444444444,0.5833333333333334,0.5833333333333334,0.6388888888888888,0.6875,0.0,0.5277777777777778,0.5833333333333334,0.6527777777777778,0.6736111111111112,0.5833333333333334,0.6111111111111112,0.6736111111111112,0.4722222222222222,0.6597222222222222,0.6180555555555556,0.5555555555555556,0.0,0.6944444444444444,0.6111111111111112,0.5277777777777778,0.6666666666666666,0,0.0,0.625,0.625,0.6597222222222222,0.6388888888888888,0.6597222222222222,0.6597222222222222,0.6319444444444444,0.6597222222222222,0.6388888888888888,0.5902777777777778,0.5833333333333334,0.5833333333333334,0.6458333333333334,0.5972222222222222,0.5833333333333334,0.7152777777777778,0.4930555555555556,0.6597222222222222,0.6666666666666666,0.6180555555555556,0.6597222222222222,0.5833333333333334,0.5833333333333334,0.6388888888888888,0.6597222222222222,0.6319444444444444,0.6527777777777778,0.6666666666666666,0.6458333333333334,0.6111111111111112,0.5833333333333334,0.6458333333333334,0.6805555555555556,0.5277777777777778,0.0,0.6736111111111112,0.6319444444444444,0.6597222222222222
831,0.9,0.92,0.84,0.9,0.89,0.88,0.91,0.92,0.92,0.9,0.9,0.9,0.89,0.88,0.88,0.88,0.92,0.87,0.84,0.9,0.85,0.88,0.9,0.88,0.49,0.88,0.9,0.91,0.9,0.89,0.53,0.9,0.94,0.88,0.92,0.87,0.91,0.9,0.9,0,0.89,0.92,0.84,0.89,0.88,0.88,0.84,0.9,0.88,0.88,0.91,0.93,0.84,0.9,0.49,0.84,0.92,0.89,0.89,0.89,0.85,0.9,0.9,0.88,0.91,0.89,0.86,0.89,0.53,0.9,0.89,0.93,0.37,0.87,0.88,0.92,0.85,0.53,0.88,0,0.53,0.88,0.91,0.48,0.89,0.46,0.88,0.85,0.9,0.53,0.53,0.85,0.88,0.89,0.91,0.89,0.92,0.9,0.85,0.89,0.91,0.84,0.92,0.88,0.43,0.86,0.9,0.84,0.56,0.88,0,0.89,0.89,0.5,0.89,0.89,0.93,0.88,0.85,0.91,0.89,0.86,0.86,0.53,0.89,0.87,0.67,0.9,0.59,0.92,0.87,0.92,0.91,0.84,0.0,0.88,0.93,0.84,0.95,0.88,0.9,0.88,0.85,0.9,0.89,0.91,0.86,0.9,0.91,0.89
833,0.80908203125,0.763671875,0.80517578125,0.8076171875,0.0,0.810546875,0.81103515625,0.80029296875,0.80908203125,0.80322265625,0.689453125,0.689453125,0.8134765625,0.0,0.74658203125,0.65087890625,0.810546875,0.78564453125,0.796875,0.81494140625,0.8037109375,0.7373046875,0.810546875,0.68505859375,0.689453125,0.73828125,0.67431640625,0.810546875,0.81298828125,0.0,0.689453125,0.80126953125,0.0,0.6767578125,0.81396484375,0.77587890625,0.0,0.689453125,0.80908203125,0,0.57275390625,0.80029296875,0.703125,0.642578125,0.0,0.775390625,0.74462890625,0.689453125,0.74853515625,0.0,0.0,0.80078125,0.71484375,0.712890625,0.681640625,0.7958984375,0.8154296875,0.751953125,0.689453125,0.70556640625,0.7734375,0.80810546875,0.8125,0.74658203125,0.78125,0.50146484375,0.0,0.80810546875,0.72119140625,0.81396484375,0.78662109375,0.80908203125,0.689453125,0.77001953125,0.689453125,0.794921875,0.79736328125,0.689453125,0.74658203125,0,0.740234375,0.0,0.81103515625,0.0,0.0,0.0,0.81201171875,0.80322265625,0.81201171875,0.787109375,0.689453125,0.77099609375,0.7626953125,0.8056640625,0.80029296875,0.81005859375,0.81591796875,0.80615234375,0.689453125,0.70556640625,0.79931640625,0.80419921875,0.81689453125,0.798828125,0.68701171875,0.79931640625,0.0,0.703125,0.0,0.8154296875,0,0.80029296875,0.0,0.68798828125,0.0,0.0,0.80615234375,0.79541015625,0.79833984375,0.0,0.705078125,0.68115234375,0.72216796875,0.0,0.77099609375,0.76318359375,0.0,0.78955078125,0.0,0.0,0.0,0.79736328125,0.728515625,0.720703125,0.0,0.689453125,0.80810546875,0.80322265625,0.81640625,0.798828125,0.81005859375,0.78173828125,0.689453125,0.8173828125,0.80908203125,0.806640625,0.79931640625,0.81396484375,0.80322265625,0.0
837,0.92,0.856,0.632,0.888,0.0,0.896,0.68,0.884,0.896,0.592,0.76,0.676,0.892,0.0,0.736,0.708,0.676,0.644,0.692,0.872,0.672,0.912,0.888,0.704,0.568,0.736,0.544,0.676,0.908,0.0,0.548,0.644,0.912,0.688,0.78,0.716,0.912,0.604,0.892,0,0.704,0.924,0.704,0.7,0.92,0.892,0.704,0.548,0.612,0.8,0.0,0.872,0.468,0.62,0.508,0.632,0.908,0.56,0.548,0.6,0.644,0.888,0.896,0.736,0.536,0.704,0.764,0.908,0.548,0.9,0.892,0.896,0.556,0.876,0.764,0.848,0.624,0.548,0.736,0,0.764,0.0,0.904,0.0,0.0,0.5,0.676,0.608,0.88,0.748,0.548,0.864,0.86,0.904,0.616,0.0,0.916,0.756,0.548,0.684,0.908,0.652,0.9,0.932,0.556,0.82,0.92,0.704,0.0,0.92,0,0.868,0.0,0.492,0.0,0.76,0.904,0.844,0.876,0.904,0.72,0.696,0.84,0.0,0.876,0.864,0.0,0.848,0.0,0.896,0.772,0.912,0.676,0.496,0.0,0.7,0.904,0.64,0.916,0.852,0.68,0.888,0.548,0.908,0.88,0.612,0.672,0.92,0.912,0.92
838,0.816,0.832,0.664,0.792,0.0,0.816,0.608,0.776,0.8,0.648,0.728,0.584,0.784,0.816,0.728,0.656,0.592,0.696,0.712,0.776,0.712,0.8,0.752,0.696,0.52,0.728,0.576,0.592,0.776,0.568,0.568,0.648,0.816,0.688,0.672,0.68,0.856,0.584,0.776,0,0.712,0.92,0.568,0.664,0.8,0.848,0.688,0.568,0.592,0.744,0.848,0.792,0.544,0.584,0.568,0.664,0.792,0.616,0.544,0.632,0.672,0.768,0.784,0.728,0.608,0.712,0.704,0.856,0.568,0.792,0.84,0.824,0.56,0.832,0.704,0.76,0.632,0.568,0.728,0,0.568,0.0,0.808,0.512,0.0,0.576,0.6,0.656,0.768,0.568,0.568,0.792,0.856,0.864,0.632,0.0,0.792,0.72,0.568,0.688,0.808,0.632,0.808,0.824,0.496,0.536,0.848,0.568,0.616,0.792,0,0.768,0.0,0.512,0.792,0.728,0.824,0.752,0.848,0.864,0.584,0.712,0.608,0.0,0.864,0.84,0.0,0.768,0.0,0.872,0.712,0.888,0.72,0.56,0.0,0.72,0.8,0.656,0.824,0.752,0.6,0.824,0.568,0.808,0.784,0.608,0.632,0.816,0.896,0.808
839,0.9132653061224489,0.8826530612244898,0.8622448979591837,0.9030612244897959,0.0,0.9081632653061225,0.8673469387755102,0.9438775510204082,0.9438775510204082,0.8316326530612245,0.6479591836734694,0.6479591836734694,0.9081632653061225,0.8775510204081632,0.8673469387755102,0.673469387755102,0.8622448979591837,0.9336734693877551,0.9030612244897959,0.8826530612244898,0.8877551020408163,0.8571428571428571,0.8826530612244898,0.6887755102040817,0.6326530612244898,0.8673469387755102,0.8724489795918368,0.8316326530612245,0.8979591836734694,0.6479591836734694,0.6479591836734694,0.7755102040816326,0.9540816326530612,0.6785714285714286,0.9387755102040817,0.8010204081632653,0.9387755102040817,0.6479591836734694,0.8979591836734694,0,0.6428571428571429,0.9540816326530612,0.7704081632653061,0.6785714285714286,0.8979591836734694,0.9387755102040817,0.7704081632653061,0.6479591836734694,0.8775510204081632,0.6938775510204082,0.8979591836734694,0.9438775510204082,0.8316326530612245,0.7653061224489796,0.6224489795918368,0.8775510204081632,0.9438775510204082,0.9081632653061225,0.9336734693877551,0.8724489795918368,0.8673469387755102,0.8928571428571429,0.8877551020408163,0.8673469387755102,0.8520408163265306,0.6683673469387755,0.9183673469387755,0.8979591836734694,0.3826530612244898,0.8928571428571429,0.8673469387755102,0.9387755102040817,0.6785714285714286,0.8112244897959183,0.6887755102040817,0.9387755102040817,0.8979591836734694,0.6479591836734694,0.8673469387755102,0,0.7806122448979592,0.0,0.8928571428571429,0.5816326530612245,0.0,0.6275510204081632,0.8316326530612245,0.8826530612244898,0.8877551020408163,0.6479591836734694,0.6479591836734694,0.8622448979591837,0.8826530612244898,0.9183673469387755,0.923469387755102,0.0,0.9438775510204082,0.8877551020408163,0.7908163265306123,0.9387755102040817,0.9489795918367347,0.8469387755102041,0.9489795918367347,0.8571428571428571,0.6581632653061225,0.9030612244897959,0.9387755102040817,0.7704081632653061,0.576530612244898,0.9387755102040817,0,0.9387755102040817,0.0,0.6479591836734694,0.9336734693877551,0.9030612244897959,0.9285714285714286,0.8673469387755102,0.8826530612244898,0.9285714285714286,0.6530612244897959,0.7397959183673469,0.8571428571428571,0.0,0.923469387755102,0.9285714285714286,0.0,0.9081632653061225,0.0,0.9540816326530612,0.9132653061224489,0.9387755102040817,0.9030612244897959,0.8571428571428571,0.0,0.6938775510204082,0.9540816326530612,0.8571428571428571,0.9489795918367347,0.9132653061224489,0.8163265306122449,0.9132653061224489,0.6479591836734694,0.8928571428571429,0.8979591836734694,0.8469387755102041,0.8418367346938775,0.9438775510204082,0.9387755102040817,0.9030612244897959
841,0.9453781512605042,0.9369747899159664,0.9411764705882353,0.9537815126050421,0.6680672268907563,0.9663865546218487,0.8445378151260504,0.9705882352941176,0.957983193277311,0.8907563025210085,0.5126050420168067,0.819327731092437,0.9621848739495799,0.9327731092436975,0.8277310924369747,0.48739495798319327,0.8487394957983193,0.957983193277311,0.9453781512605042,0.9411764705882353,0.9453781512605042,0.9369747899159664,0.9411764705882353,0.5126050420168067,0.6470588235294118,0.8277310924369747,0.9243697478991597,0.8235294117647058,0.9537815126050421,0.957983193277311,0.9243697478991597,0.8109243697478992,0.9621848739495799,0.5126050420168067,0.957983193277311,0.9159663865546218,0.9621848739495799,0.5126050420168067,0.8949579831932774,0,0.5126050420168067,0.9537815126050421,0.7647058823529411,0.5126050420168067,0.9453781512605042,0.9495798319327731,0.7647058823529411,0.5126050420168067,0.9453781512605042,0.0,0.9327731092436975,0.9621848739495799,0.8319327731092437,0.8487394957983193,0.6470588235294118,0.9411764705882353,0.9621848739495799,0.9243697478991597,0.9537815126050421,0.9453781512605042,0.9117647058823529,0.9285714285714286,0.9621848739495799,0.8277310924369747,0.8613445378151261,0.5126050420168067,0.9285714285714286,0.9369747899159664,0.5126050420168067,0.9537815126050421,0.9285714285714286,0.9369747899159664,0.6848739495798319,0.8613445378151261,0.5126050420168067,0.957983193277311,0.9495798319327731,0.5126050420168067,0.8277310924369747,0,0.8571428571428571,0.819327731092437,0.9453781512605042,0.6596638655462185,0.6680672268907563,0.8067226890756303,0.7605042016806722,0.9495798319327731,0.957983193277311,0.7647058823529411,0.5126050420168067,0.9327731092436975,0.9201680672268907,0.9453781512605042,0.9495798319327731,0.6680672268907563,0.9621848739495799,0.9327731092436975,0.8823529411764706,0.9453781512605042,0.9621848739495799,0.8445378151260504,0.9705882352941176,0.9159663865546218,0.6260504201680672,0.9285714285714286,0.9537815126050421,0.7647058823529411,0.5798319327731093,0.957983193277311,0,0.957983193277311,0.6680672268907563,0.680672268907563,0.9453781512605042,0.9369747899159664,0.9411764705882353,0.9411764705882353,0.9537815126050421,0.9621848739495799,0.8487394957983193,0.7478991596638656,0.8109243697478992,0.5126050420168067,0.9201680672268907,0.9411764705882353,0.773109243697479,0.9495798319327731,0.6638655462184874,0.9495798319327731,0.9411764705882353,0.9663865546218487,0.9537815126050421,0.8319327731092437,0.0,0.5126050420168067,0.9621848739495799,0.9369747899159664,0.9705882352941176,0.9663865546218487,0.8403361344537815,0.9327731092436975,0.9327731092436975,0.957983193277311,0.9495798319327731,0.8865546218487395,0.7058823529411765,0.957983193277311,0.9705882352941176,0.9453781512605042
845,0.844,0.848,0.848,0.876,0.0,0.852,0.836,0.86,0.876,0.816,0.768,0.752,0.872,0.828,0.692,0.668,0.836,0.82,0.84,0.856,0.828,0.88,0.848,0.724,0.552,0.692,0.856,0.836,0.848,0.856,0.764,0.768,0.876,0.724,0.844,0.74,0.868,0.628,0.832,0,0.748,0.848,0.74,0.708,0.868,0.868,0.74,0.716,0.748,0.772,0.844,0.876,0.636,0.584,0.5,0.808,0.872,0.836,0.656,0.812,0.684,0.844,0.84,0.692,0.792,0.748,0.824,0.836,0.508,0.864,0.844,0.868,0.536,0.756,0.76,0.86,0.824,0.508,0.692,0,0.792,0.0,0.872,0.68,0.0,0.764,0.844,0.844,0.868,0.784,0.508,0.828,0.792,0.892,0.824,0.0,0.876,0.836,0.512,0.832,0.884,0.856,0.868,0.724,0.556,0.724,0.864,0.74,0.556,0.876,0,0.856,0.0,0.62,0.868,0.812,0.884,0.848,0.844,0.856,0.816,0.748,0.66,0.0,0.792,0.816,0.0,0.86,0.0,0.896,0.8,0.828,0.84,0.692,0.0,0.748,0.884,0.844,0.868,0.856,0.836,0.844,0.76,0.852,0.856,0.82,0.856,0.872,0.844,0.868
847,0.8692214111922141,0.8345498783454988,0.8479318734793188,0.8576642335766423,0.7901459854014599,0.8637469586374696,0.8534063260340633,0.8600973236009732,0.8643552311435523,0.8363746958637469,0.5328467153284672,0.816301703163017,0.8594890510948905,0.0,0.8108272506082725,0.5328467153284672,0.8534063260340633,0.8461070559610706,0.8485401459854015,0.8527980535279805,0.843065693430657,0.8479318734793188,0.8582725060827251,0.5322384428223844,0.504257907542579,0.8108272506082725,0.8108272506082725,0.8491484184914841,0.8613138686131386,0.0,0.7427007299270073,0.7980535279805353,0.871654501216545,0.5322384428223844,0.8546228710462287,0.7962287104622872,0.8521897810218978,0.5328467153284672,0.8315085158150851,0,0.5322384428223844,0.8594890510948905,0.7962287104622872,0.5328467153284672,0.8673965936739659,0.847323600973236,0.7962287104622872,0.5328467153284672,0.7864963503649635,0.0,0.0,0.8600973236009732,0.7530413625304136,0.7871046228710462,0.48905109489051096,0.8388077858880778,0.864963503649635,0.8327250608272506,0.8497566909975669,0.8546228710462287,0.8315085158150851,0.8588807785888077,0.8588807785888077,0.8108272506082725,0.7858880778588808,0.46897810218978103,0.851581508515815,0.8454987834549879,0.46715328467153283,0.8552311435523114,0.8509732360097324,0.8369829683698297,0.5103406326034063,0.7846715328467153,0.5328467153284672,0.8686131386861314,0.8436739659367397,0.5328467153284672,0.8108272506082725,0,0.8491484184914841,0.7834549878345499,0.8442822384428224,0.0,0.7907542579075426,0.5291970802919708,0.8509732360097324,0.8491484184914841,0.8570559610705596,0.8540145985401459,0.5328467153284672,0.8363746958637469,0.8126520681265207,0.8704379562043796,0.8454987834549879,0.791970802919708,0.8655717761557178,0.8521897810218978,0.7846715328467153,0.8497566909975669,0.8509732360097324,0.8199513381995134,0.8667883211678832,0.8199513381995134,0.48965936739659366,0.8400243309002433,0.8661800486618005,0.7962287104622872,0.0,0.8619221411192214,0,0.8588807785888077,0.7907542579075426,0.5200729927007299,0.0,0.8491484184914841,0.8698296836982968,0.8521897810218978,0.8534063260340633,0.8588807785888077,0.8284671532846716,0.8059610705596107,0.8004866180048662,0.5328467153284672,0.8150851581508516,0.8321167883211679,0.5602189781021898,0.8521897810218978,0.6344282238442822,0.8661800486618005,0.8527980535279805,0.864963503649635,0.8467153284671532,0.7937956204379562,0.0,0.5322384428223844,0.8333333333333334,0.8485401459854015,0.8661800486618005,0.8461070559610706,0.8534063260340633,0.8266423357664233,0.5529197080291971,0.8582725060827251,0.8564476885644768,0.8461070559610706,0.8083941605839416,0.8625304136253041,0.8625304136253041,0.8631386861313869
849,0.832,0.78,0.784,0.816,0.0,0.812,0.8,0.832,0.844,0.808,0.744,0.788,0.82,0.0,0.688,0.612,0.796,0.712,0.788,0.792,0.768,0.832,0.784,0.712,0.536,0.688,0.532,0.796,0.812,0.84,0.54,0.752,0.816,0.644,0.748,0.6,0.84,0.628,0.804,0,0.74,0.824,0.568,0.672,0.82,0.824,0.568,0.736,0.68,0.74,0.0,0.816,0.564,0.596,0.544,0.692,0.828,0.76,0.536,0.712,0.66,0.804,0.8,0.688,0.768,0.74,0.712,0.816,0.504,0.808,0.8,0.86,0.472,0.712,0.732,0.816,0.736,0.504,0.688,0,0.776,0.0,0.808,0.0,0.0,0.532,0.796,0.768,0.824,0.788,0.504,0.784,0.82,0.86,0.78,0.0,0.848,0.716,0.524,0.76,0.832,0.832,0.836,0.808,0.48,0.716,0.824,0.568,0.0,0.844,0,0.832,0.0,0.432,0.0,0.696,0.844,0.832,0.848,0.824,0.824,0.752,0.664,0.0,0.716,0.78,0.0,0.832,0.0,0.864,0.644,0.828,0.764,0.58,0.0,0.74,0.824,0.768,0.828,0.832,0.792,0.736,0.764,0.812,0.82,0.736,0.824,0.816,0.832,0.832
853,0.8740157480314961,0.84251968503937,0.7165354330708661,0.8582677165354331,0.7244094488188977,0.8818897637795275,0.84251968503937,0.889763779527559,0.8818897637795275,0.7952755905511811,0.7165354330708661,0.8110236220472441,0.8661417322834646,0.8503937007874016,0.8267716535433071,0.6535433070866141,0.8661417322834646,0.8503937007874016,0.8110236220472441,0.8346456692913385,0.7795275590551181,0.84251968503937,0.8346456692913385,0.7165354330708661,0.5511811023622047,0.8267716535433071,0.7874015748031497,0.8582677165354331,0.8582677165354331,0.5905511811023622,0.5905511811023622,0.7480314960629921,0.889763779527559,0.6929133858267716,0.8582677165354331,0.8188976377952756,0.8818897637795275,0.7165354330708661,0.8661417322834646,0,0.7165354330708661,0.889763779527559,0.6771653543307087,0.7165354330708661,0.8818897637795275,0.8582677165354331,0.6771653543307087,0.5905511811023622,0.7952755905511811,0.7165354330708661,0.8188976377952756,0.889763779527559,0.7165354330708661,0.7716535433070866,0.5590551181102362,0.7874015748031497,0.8740157480314961,0.8346456692913385,0.8346456692913385,0.8031496062992126,0.8346456692913385,0.8267716535433071,0.8346456692913385,0.8267716535433071,0.7874015748031497,0.7165354330708661,0.8818897637795275,0.8661417322834646,0.5905511811023622,0.8740157480314961,0.8661417322834646,0.8503937007874016,0.5748031496062992,0.8110236220472441,0.7165354330708661,0.8818897637795275,0.7874015748031497,0.5905511811023622,0.8267716535433071,0,0.5905511811023622,0.7322834645669292,0.8503937007874016,0.5275590551181102,0.7244094488188977,0.5748031496062992,0.8188976377952756,0.7401574803149606,0.8661417322834646,0.5905511811023622,0.5905511811023622,0.84251968503937,0.84251968503937,0.889763779527559,0.8661417322834646,0.7244094488188977,0.8740157480314961,0.8503937007874016,0.6614173228346457,0.84251968503937,0.8661417322834646,0.7480314960629921,0.8740157480314961,0.8740157480314961,0.5905511811023622,0.8031496062992126,0.8740157480314961,0.6771653543307087,0.5433070866141733,0.8740157480314961,0,0.8661417322834646,0.7244094488188977,0.5826771653543307,0.889763779527559,0.8740157480314961,0.8740157480314961,0.8582677165354331,0.7874015748031497,0.8661417322834646,0.7007874015748031,0.7795275590551181,0.6771653543307087,0.5905511811023622,0.8582677165354331,0.8503937007874016,0.6456692913385826,0.8740157480314961,0.6850393700787402,0.8818897637795275,0.889763779527559,0.889763779527559,0.8740157480314961,0.6850393700787402,0.0,0.7165354330708661,0.8818897637795275,0.7244094488188977,0.905511811023622,0.8582677165354331,0.8582677165354331,0.8503937007874016,0.5905511811023622,0.889763779527559,0.8818897637795275,0.8503937007874016,0.7559055118110236,0.8582677165354331,0.8740157480314961,0.8661417322834646
855,0.776,0.696,0.64,0.84,0.0,0.816,0.592,0.824,0.8,0.624,0.584,0.592,0.808,0.768,0.568,0.56,0.608,0.824,0.784,0.728,0.792,0.584,0.696,0.616,0.672,0.56,0.616,0.608,0.76,0.552,0.552,0.632,0.84,0.68,0.712,0.576,0.832,0.552,0.632,0,0.544,0.536,0.52,0.584,0.8,0.832,0.52,0.552,0.616,0.568,0.84,0.832,0.496,0.592,0.656,0.776,0.808,0.616,0.632,0.68,0.672,0.72,0.712,0.568,0.56,0.52,0.728,0.632,0.552,0.76,0.8,0.68,0.688,0.56,0.576,0.784,0.76,0.552,0.568,0,0.552,0.0,0.776,0.552,0.0,0.768,0.592,0.688,0.752,0.552,0.552,0.784,0.696,0.848,0.6,0.0,0.792,0.704,0.552,0.736,0.824,0.56,0.808,0.592,0.568,0.552,0.792,0.52,0.52,0.816,0,0.768,0.0,0.632,0.8,0.68,0.776,0.712,0.6,0.8,0.552,0.56,0.712,0.0,0.784,0.76,0.0,0.792,0.0,0.824,0.76,0.568,0.792,0.56,0.0,0.568,0.76,0.632,0.832,0.768,0.6,0.768,0.552,0.792,0.76,0.6,0.544,0.824,0.576,0.808
866,0.904,0.884,0.68,0.876,0.0,0.9,0.684,0.864,0.924,0.66,0.82,0.62,0.844,0.0,0.808,0.728,0.68,0.708,0.748,0.876,0.736,0.86,0.868,0.74,0.564,0.808,0.552,0.68,0.896,0.0,0.584,0.616,0.924,0.744,0.824,0.796,0.912,0.64,0.904,0,0.792,0.944,0.744,0.756,0.9,0.924,0.744,0.584,0.736,0.816,0.0,0.892,0.532,0.676,0.56,0.7,0.908,0.632,0.592,0.66,0.704,0.844,0.876,0.808,0.524,0.792,0.812,0.932,0.584,0.864,0.876,0.892,0.576,0.816,0.804,0.868,0.716,0.584,0.808,0,0.796,0.0,0.884,0.0,0.0,0.544,0.696,0.696,0.86,0.78,0.584,0.868,0.868,0.924,0.652,0.0,0.928,0.816,0.584,0.7,0.916,0.7,0.924,0.944,0.576,0.88,0.916,0.744,0.564,0.876,0,0.856,0.0,0.512,0.0,0.824,0.908,0.82,0.9,0.896,0.764,0.796,0.668,0.0,0.84,0.84,0.0,0.836,0.0,0.912,0.8,0.92,0.712,0.572,0.0,0.816,0.892,0.664,0.944,0.836,0.676,0.844,0.584,0.916,0.852,0.62,0.776,0.876,0.936,0.92
869,0.888,0.832,0.768,0.816,0.0,0.872,0.648,0.808,0.824,0.616,0.824,0.648,0.816,0.872,0.8,0.776,0.624,0.792,0.792,0.832,0.776,0.84,0.832,0.792,0.512,0.8,0.68,0.624,0.84,0.576,0.576,0.744,0.912,0.792,0.864,0.8,0.864,0.656,0.84,0,0.8,0.856,0.76,0.776,0.864,0.872,0.76,0.576,0.712,0.8,0.872,0.872,0.656,0.672,0.592,0.736,0.928,0.656,0.712,0.712,0.864,0.816,0.832,0.8,0.824,0.8,0.848,0.864,0.576,0.848,0.864,0.832,0.528,0.824,0.792,0.88,0.76,0.576,0.8,0,0.576,0.0,0.848,0.704,0.0,0.616,0.704,0.76,0.832,0.576,0.576,0.84,0.832,0.888,0.744,0.0,0.896,0.792,0.576,0.752,0.864,0.632,0.904,0.88,0.472,0.888,0.872,0.76,0.632,0.84,0,0.88,0.0,0.792,0.864,0.784,0.848,0.784,0.928,0.88,0.584,0.792,0.632,0.0,0.832,0.848,0.0,0.808,0.0,0.904,0.864,0.888,0.792,0.608,0.0,0.8,0.856,0.752,0.944,0.784,0.656,0.832,0.576,0.88,0.84,0.776,0.8,0.872,0.904,0.904
870,0.872,0.88,0.848,0.88,0.0,0.864,0.704,0.896,0.904,0.728,0.792,0.776,0.88,0.872,0.784,0.808,0.712,0.888,0.904,0.832,0.888,0.872,0.848,0.8,0.912,0.784,0.76,0.712,0.88,0.832,0.608,0.856,0.904,0.784,0.872,0.8,0.92,0.616,0.848,0,0.776,0.912,0.744,0.792,0.88,0.928,0.744,0.704,0.784,0.776,0.888,0.912,0.52,0.792,0.848,0.912,0.912,0.776,0.896,0.848,0.824,0.832,0.856,0.784,0.864,0.776,0.84,0.832,0.536,0.856,0.88,0.84,0.912,0.784,0.784,0.904,0.872,0.536,0.784,0,0.536,0.0,0.864,0.824,0.0,0.832,0.72,0.856,0.864,0.536,0.536,0.832,0.8,0.904,0.72,0.0,0.904,0.864,0.536,0.896,0.92,0.696,0.92,0.768,0.856,0.76,0.896,0.744,0.888,0.912,0,0.928,0.0,0.92,0.912,0.824,0.896,0.872,0.912,0.896,0.76,0.784,0.92,0.0,0.856,0.896,0.0,0.88,0.0,0.952,0.832,0.904,0.904,0.608,0.0,0.776,0.808,0.832,0.912,0.888,0.696,0.864,0.592,0.904,0.856,0.8,0.736,0.88,0.904,0.904
871,0.49480249480249483,0.5218295218295218,0.5135135135135135,0.4802494802494803,0.0,0.49064449064449067,0.5031185031185031,0.49064449064449067,0.4885654885654886,0.5093555093555093,0.5,0.5,0.4968814968814969,0.4677754677754678,0.498960498960499,0.49376299376299376,0.5031185031185031,0.49272349272349275,0.501039501039501,0.4812889812889813,0.498960498960499,0.0,0.5155925155925156,0.5187110187110187,0.4760914760914761,0.501039501039501,0.49584199584199584,0.502079002079002,0.5197505197505198,0.49272349272349275,0.49064449064449067,0.5239085239085239,0.502079002079002,0.5051975051975052,0.5166320166320166,0.48232848232848236,0.47297297297297297,0.502079002079002,0.5415800415800416,0,0.5031185031185031,0.0,0.5176715176715176,0.5103950103950103,0.5062370062370062,0.5083160083160083,0.5176715176715176,0.5083160083160083,0.5041580041580042,0.0,0.4584199584199584,0.49064449064449067,0.4916839916839917,0.5083160083160083,0.5041580041580042,0.5155925155925156,0.5083160083160083,0.5,0.4979209979209979,0.4885654885654886,0.5114345114345115,0.5114345114345115,0.502079002079002,0.498960498960499,0.49584199584199584,0.5031185031185031,0.5041580041580042,0.5145530145530145,0.49584199584199584,0.525987525987526,0.48544698544698545,0.4802494802494803,0.5124740124740125,0.5041580041580042,0.49376299376299376,0.47193347193347196,0.4968814968814969,0.5,0.498960498960499,0,0.498960498960499,0.0,0.5145530145530145,0.0,0.0,0.49480249480249483,0.49480249480249483,0.5166320166320166,0.5103950103950103,0.49272349272349275,0.5,0.5218295218295218,0.49480249480249483,0.5207900207900208,0.5384615384615384,0.0,0.5083160083160083,0.5062370062370062,0.4968814968814969,0.5041580041580042,0.5062370062370062,0.5051975051975052,0.4864864864864865,0.5176715176715176,0.5197505197505198,0.0,0.49272349272349275,0.5176715176715176,0.0,0.49480249480249483,0,0.4885654885654886,0.0,0.5218295218295218,0.4802494802494803,0.5103950103950103,0.5072765072765073,0.498960498960499,0.0,0.4979209979209979,0.4916839916839917,0.49584199584199584,0.49584199584199584,0.0,0.5103950103950103,0.4885654885654886,0.0,0.48440748440748443,0.0,0.5051975051975052,0.5135135135135135,0.0,0.4916839916839917,0.502079002079002,0.0,0.5031185031185031,0.498960498960499,0.5114345114345115,0.5051975051975052,0.501039501039501,0.5031185031185031,0.4896049896049896,0.5072765072765073,0.49480249480249483,0.5072765072765073,0.5166320166320166,0.49376299376299376,0.4916839916839917,0.0,0.49376299376299376
879,0.872,0.8,0.584,0.848,0.0,0.848,0.56,0.816,0.832,0.616,0.728,0.608,0.832,0.896,0.728,0.632,0.552,0.68,0.656,0.76,0.68,0.872,0.792,0.656,0.616,0.728,0.592,0.552,0.872,0.608,0.608,0.632,0.896,0.688,0.648,0.68,0.872,0.608,0.856,0,0.728,0.872,0.688,0.664,0.864,0.864,0.688,0.608,0.608,0.736,0.912,0.776,0.544,0.64,0.608,0.592,0.872,0.568,0.608,0.56,0.616,0.784,0.768,0.728,0.608,0.728,0.704,0.872,0.608,0.848,0.896,0.848,0.632,0.816,0.712,0.768,0.616,0.608,0.728,0,0.608,0.0,0.856,0.552,0.0,0.592,0.592,0.56,0.832,0.608,0.608,0.832,0.84,0.848,0.624,0.0,0.88,0.64,0.608,0.656,0.832,0.616,0.864,0.88,0.568,0.784,0.872,0.688,0.576,0.872,0,0.8,0.0,0.448,0.872,0.68,0.824,0.84,0.848,0.88,0.608,0.712,0.608,0.0,0.848,0.848,0.0,0.768,0.0,0.84,0.712,0.856,0.648,0.528,0.0,0.728,0.864,0.584,0.888,0.792,0.56,0.896,0.608,0.864,0.752,0.592,0.648,0.888,0.864,0.896
884,0.8,0.824,0.824,0.784,0.0,0.832,0.784,0.856,0.832,0.784,0.72,0.768,0.832,0.8,0.696,0.776,0.784,0.816,0.84,0.768,0.832,0.776,0.784,0.704,0.864,0.696,0.8,0.784,0.776,0.84,0.808,0.744,0.848,0.768,0.816,0.648,0.856,0.608,0.72,0,0.712,0.816,0.592,0.792,0.816,0.872,0.592,0.704,0.768,0.712,0.84,0.848,0.832,0.688,0.808,0.872,0.832,0.816,0.832,0.808,0.728,0.768,0.784,0.696,0.76,0.712,0.776,0.76,0.696,0.776,0.784,0.856,0.808,0.792,0.688,0.816,0.856,0.504,0.696,0,0.496,0.0,0.808,0.8,0.0,0.792,0.792,0.816,0.76,0.496,0.504,0.768,0.84,0.856,0.808,0.0,0.792,0.768,0.64,0.84,0.848,0.76,0.8,0.704,0.776,0.664,0.832,0.592,0.8,0.776,0,0.84,0.0,0.84,0.84,0.792,0.824,0.8,0.848,0.84,0.768,0.752,0.8,0.0,0.84,0.824,0.0,0.824,0.0,0.84,0.76,0.8,0.856,0.792,0.0,0.712,0.848,0.824,0.84,0.848,0.776,0.8,0.776,0.784,0.784,0.784,0.744,0.8,0.8,0.8

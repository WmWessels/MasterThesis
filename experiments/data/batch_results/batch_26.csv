0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44379,0.708,0.688,0.662,0.722,0.0,0.722,0.596,0.716,0.72,0.694,0.518,0.68,0.708,0.664,0.672,0.532,0.598,0.696,0.688,0.718,0.682,0.708,0.726,0.5,0.61,0.672,0.682,0.598,0.72,0.716,0.562,0.618,0.716,0.492,0.734,0.616,0.74,0.534,0.71,0,0.508,0.688,0.578,0.52,0.714,0.686,0.578,0.52,0.636,0.0,0.672,0.718,0.554,0.584,0.634,0.686,0.712,0.708,0.642,0.686,0.69,0.708,0.72,0.672,0.666,0.508,0.726,0.716,0.5,0.726,0.712,0.67,0.65,0.626,0.512,0.74,0.684,0.5,0.672,0,0.692,0.0,0.716,0.634,0.0,0.632,0.592,0.68,0.712,0.692,0.5,0.688,0.622,0.718,0.674,0.568,0.722,0.716,0.562,0.64,0.684,0.62,0.718,0.704,0.61,0.682,0.716,0.578,0.626,0.716,0,0.704,0.0,0.618,0.714,0.696,0.708,0.712,0.704,0.714,0.654,0.654,0.566,0.0,0.662,0.684,0.0,0.722,0.0,0.71,0.674,0.686,0.684,0.548,0,0.508,0.692,0.676,0.706,0.73,0.596,0.704,0.666,0.708,0.724,0.682,0.614,0.728,0.698,0.714
44380,0.774,0.734,0.692,0.776,0.0,0.784,0.688,0.732,0.748,0.756,0.514,0.684,0.76,0.73,0.646,0.558,0.674,0.72,0.728,0.748,0.726,0.722,0.746,0.516,0.634,0.646,0.71,0.676,0.764,0.754,0.582,0.646,0.77,0.522,0.75,0.666,0.736,0.564,0.714,0,0.522,0.758,0.62,0.564,0.782,0.724,0.624,0.516,0.66,0.0,0.736,0.76,0.552,0.628,0.594,0.696,0.772,0.726,0.694,0.714,0.698,0.756,0.746,0.646,0.7,0.522,0.72,0.728,0.5,0.76,0.736,0.698,0.674,0.626,0.522,0.76,0.73,0.5,0.646,0,0.728,0.0,0.764,0.692,0.0,0.648,0.678,0.72,0.768,0.708,0.5,0.724,0.648,0.752,0.734,0.59,0.77,0.746,0.636,0.644,0.716,0.67,0.764,0.708,0.628,0.688,0.792,0.62,0.586,0.772,0,0.74,0.0,0.644,0.78,0.726,0.75,0.72,0.726,0.762,0.716,0.678,0.584,0.0,0.732,0.72,0.0,0.734,0.0,0.77,0.694,0.732,0.734,0.55,0,0.522,0.744,0.694,0.77,0.744,0.682,0.734,0.728,0.762,0.764,0.73,0.634,0.758,0.736,0.774
44381,0.748,0.712,0.688,0.748,0.0,0.748,0.628,0.756,0.744,0.732,0.48,0.666,0.75,0.69,0.658,0.524,0.636,0.704,0.738,0.748,0.72,0.738,0.74,0.498,0.61,0.61,0.728,0.636,0.736,0.746,0.634,0.612,0.776,0.492,0.752,0.608,0.772,0.566,0.724,0,0.498,0.734,0.552,0.548,0.744,0.732,0.552,0.482,0.636,0.0,0.712,0.746,0.548,0.59,0.592,0.718,0.774,0.726,0.726,0.728,0.674,0.746,0.742,0.658,0.696,0.504,0.736,0.748,0.5,0.744,0.728,0.682,0.658,0.636,0.508,0.764,0.718,0.5,0.658,0,0.696,0.0,0.74,0.632,0.0,0.664,0.614,0.712,0.75,0.686,0.5,0.736,0.67,0.746,0.722,0.586,0.752,0.744,0.658,0.694,0.738,0.66,0.756,0.732,0.624,0.722,0.77,0.552,0.642,0.764,0,0.738,0.0,0.668,0.752,0.744,0.722,0.716,0.74,0.766,0.678,0.68,0.524,0.0,0.708,0.732,0.0,0.74,0.0,0.764,0.734,0.73,0.72,0.548,0,0.504,0.748,0.692,0.784,0.74,0.624,0.726,0.688,0.754,0.752,0.718,0.67,0.758,0.738,0.744
44382,0.966,0.966,0.858,0.96,0.742,0.968,0.856,0.968,0.974,0.894,0.64,0.934,0.956,0.958,0.69,0.6,0.85,0.93,0.858,0.944,0.858,0.946,0.948,0.624,0.466,0.68,0.824,0.852,0.958,0.962,0.618,0.812,0.976,0.614,0.948,0.824,0.984,0.62,0.776,0,0.642,0.958,0.666,0.64,0.97,0.976,0.672,0.66,0.868,0.636,0.964,0.966,0.818,0.906,0.514,0.928,0.974,0.828,0.936,0.898,0.9,0.944,0.956,0.69,0.794,0.656,0.932,0.97,0.5,0.956,0.944,0.95,0.464,0.844,0.63,0.964,0.924,0.5,0.69,0,0.922,0.834,0.964,0.0,0.742,0.524,0.846,0.87,0.952,0.876,0.5,0.948,0.93,0.968,0.884,0.748,0.976,0.946,0.884,0.868,0.98,0.74,0.974,0.758,0.472,0.752,0.978,0.666,0.528,0.972,0,0.968,0.742,0.634,0.968,0.936,0.962,0.956,0.964,0.978,0.892,0.65,0.84,0.5,0.948,0.966,0.772,0.96,0.646,0.976,0.94,0.968,0.924,0.838,0,0.656,0.976,0.86,0.982,0.958,0.852,0.958,0.93,0.964,0.95,0.86,0.742,0.964,0.976,0.958
44383,0.95,0.938,0.814,0.946,0.742,0.956,0.828,0.95,0.96,0.838,0.632,0.88,0.938,0.938,0.674,0.622,0.84,0.904,0.834,0.922,0.838,0.918,0.922,0.62,0.514,0.672,0.766,0.82,0.94,0.956,0.552,0.776,0.966,0.622,0.946,0.816,0.962,0.618,0.768,0,0.638,0.954,0.666,0.624,0.948,0.96,0.666,0.628,0.834,0.616,0.94,0.958,0.816,0.882,0.54,0.888,0.964,0.75,0.932,0.858,0.902,0.92,0.928,0.674,0.772,0.634,0.914,0.788,0.5,0.92,0.906,0.934,0.468,0.816,0.614,0.96,0.888,0.5,0.674,0,0.872,0.72,0.94,0.0,0.742,0.536,0.808,0.832,0.934,0.854,0.5,0.932,0.942,0.938,0.884,0.726,0.96,0.922,0.842,0.832,0.964,0.734,0.972,0.75,0.528,0.762,0.95,0.666,0.468,0.96,0,0.944,0.744,0.566,0.956,0.914,0.94,0.922,0.932,0.954,0.88,0.646,0.816,0.5,0.922,0.948,0.714,0.932,0.538,0.958,0.912,0.95,0.898,0.83,0,0.634,0.954,0.818,0.974,0.942,0.824,0.926,0.912,0.944,0.928,0.824,0.73,0.958,0.952,0.948
44384,0.964,0.966,0.87,0.94,0.74,0.96,0.852,0.958,0.96,0.892,0.584,0.888,0.948,0.946,0.702,0.608,0.852,0.94,0.856,0.924,0.86,0.926,0.914,0.598,0.484,0.702,0.796,0.844,0.938,0.966,0.652,0.824,0.978,0.586,0.956,0.842,0.986,0.538,0.748,0,0.568,0.958,0.688,0.586,0.96,0.976,0.726,0.6,0.828,0.576,0.954,0.95,0.814,0.904,0.524,0.926,0.972,0.802,0.936,0.896,0.862,0.922,0.928,0.702,0.802,0.58,0.938,0.93,0.5,0.936,0.896,0.944,0.526,0.836,0.584,0.96,0.924,0.5,0.702,0,0.874,0.742,0.944,0.0,0.74,0.548,0.83,0.878,0.934,0.876,0.5,0.938,0.9,0.942,0.872,0.714,0.972,0.93,0.866,0.86,0.968,0.71,0.97,0.714,0.498,0.752,0.972,0.688,0.512,0.964,0,0.95,0.74,0.602,0.97,0.926,0.946,0.924,0.938,0.976,0.85,0.598,0.812,0.5,0.944,0.97,0.698,0.926,0.52,0.978,0.932,0.95,0.922,0.816,0,0.58,0.968,0.876,0.984,0.936,0.848,0.95,0.912,0.952,0.928,0.84,0.7,0.968,0.95,0.956
44385,0.96,0.946,0.84,0.948,0.746,0.968,0.85,0.964,0.956,0.84,0.622,0.904,0.944,0.942,0.686,0.58,0.854,0.918,0.84,0.924,0.838,0.924,0.918,0.64,0.492,0.654,0.776,0.842,0.952,0.958,0.826,0.816,0.972,0.646,0.974,0.824,0.974,0.614,0.764,0,0.634,0.974,0.678,0.636,0.964,0.964,0.714,0.616,0.834,0.606,0.95,0.956,0.818,0.892,0.486,0.904,0.97,0.796,0.942,0.874,0.912,0.922,0.93,0.686,0.776,0.636,0.938,0.948,0.5,0.936,0.914,0.934,0.478,0.838,0.614,0.952,0.89,0.5,0.686,0,0.888,0.736,0.946,0.0,0.746,0.52,0.836,0.858,0.936,0.884,0.5,0.942,0.904,0.94,0.864,0.728,0.972,0.958,0.842,0.85,0.972,0.678,0.966,0.73,0.496,0.752,0.968,0.678,0.502,0.97,0,0.936,0.746,0.572,0.952,0.938,0.942,0.926,0.95,0.952,0.864,0.654,0.822,0.5,0.94,0.942,0.758,0.936,0.538,0.976,0.928,0.97,0.9,0.814,0,0.636,0.956,0.846,0.972,0.948,0.84,0.938,0.928,0.96,0.938,0.834,0.7,0.968,0.968,0.962
44386,0.964,0.966,0.868,0.944,0.75,0.962,0.874,0.96,0.97,0.872,0.632,0.774,0.936,0.944,0.682,0.586,0.87,0.918,0.864,0.926,0.864,0.928,0.92,0.624,0.452,0.674,0.832,0.87,0.94,0.97,0.5,0.782,0.964,0.63,0.966,0.854,0.98,0.628,0.78,0,0.616,0.964,0.66,0.61,0.958,0.986,0.668,0.634,0.862,0.626,0.952,0.972,0.852,0.902,0.53,0.924,0.966,0.786,0.946,0.904,0.908,0.92,0.924,0.682,0.796,0.624,0.95,0.804,0.5,0.93,0.904,0.942,0.538,0.862,0.626,0.964,0.922,0.5,0.682,0,0.892,0.788,0.94,0.0,0.75,0.536,0.856,0.876,0.932,0.866,0.5,0.942,0.882,0.954,0.872,0.732,0.978,0.948,0.876,0.878,0.976,0.718,0.978,0.742,0.482,0.768,0.968,0.66,0.502,0.966,0,0.962,0.75,0.552,0.966,0.936,0.948,0.928,0.932,0.972,0.84,0.64,0.848,0.5,0.95,0.964,0.69,0.94,0.502,0.976,0.95,0.97,0.918,0.856,0,0.624,0.958,0.87,0.978,0.936,0.87,0.932,0.932,0.936,0.932,0.85,0.724,0.962,0.954,0.95
44387,0.714,0.812,0.742,0.864,0.5,0.866,0.638,0.87,0.886,0.858,0.706,0.752,0.864,0.85,0.752,0.642,0.836,0.69,0.698,0.848,0.73,0.86,0.844,0.718,0.506,0.752,0.802,0.5,0.862,0.876,0.64,0.792,0.88,0.628,0.878,0.778,0.872,0.602,0.824,0,0.714,0.884,0.752,0.636,0.856,0.854,0.752,0.706,0.646,0.716,0.854,0.886,0.684,0.698,0.512,0.712,0.872,0.84,0.826,0.828,0.806,0.848,0.846,0.752,0.754,0.714,0.854,0.866,0.5,0.848,0.848,0.852,0.488,0.782,0.704,0.884,0.694,0.5,0.752,0,0.832,0.748,0.87,0.0,0.678,0.506,0.822,0.704,0.856,0.818,0.5,0.834,0.8,0.732,0.85,0.71,0.77,0.86,0.5,0.834,0.854,0.798,0.866,0.742,0.528,0.706,0.874,0.752,0.0,0.872,0,0.72,0.678,0.508,0.872,0.86,0.89,0.85,0.694,0.848,0.812,0.79,0.766,0.5,0.824,0.836,0.7,0.854,0.602,0.884,0.86,0.876,0.848,0.75,0,0.714,0.85,0.744,0.876,0.858,0.5,0.846,0.5,0.864,0.858,0.854,0.556,0.862,0.884,0.862
44388,0.7,0.812,0.718,0.834,0.5,0.862,0.622,0.856,0.864,0.838,0.722,0.738,0.842,0.862,0.738,0.616,0.85,0.682,0.674,0.824,0.724,0.812,0.81,0.668,0.534,0.694,0.816,0.5,0.826,0.862,0.556,0.73,0.856,0.598,0.848,0.8,0.858,0.584,0.798,0,0.66,0.854,0.694,0.594,0.864,0.85,0.738,0.698,0.628,0.67,0.836,0.854,0.672,0.744,0.54,0.696,0.856,0.846,0.82,0.788,0.796,0.826,0.814,0.738,0.758,0.662,0.854,0.844,0.5,0.822,0.844,0.812,0.552,0.766,0.696,0.85,0.682,0.5,0.738,0,0.834,0.726,0.834,0.0,0.664,0.502,0.802,0.674,0.818,0.818,0.5,0.826,0.796,0.724,0.842,0.684,0.678,0.838,0.5,0.794,0.866,0.798,0.842,0.762,0.528,0.764,0.872,0.694,0.494,0.842,0,0.714,0.664,0.834,0.864,0.848,0.866,0.838,0.68,0.86,0.802,0.794,0.69,0.5,0.812,0.812,0.692,0.844,0.518,0.864,0.848,0.87,0.818,0.714,0,0.662,0.844,0.718,0.858,0.836,0.5,0.834,0.5,0.834,0.834,0.814,0.532,0.84,0.86,0.85
44389,0.698,0.804,0.704,0.83,0.5,0.846,0.71,0.848,0.858,0.794,0.71,0.702,0.852,0.804,0.702,0.65,0.814,0.658,0.662,0.824,0.702,0.83,0.812,0.692,0.542,0.702,0.802,0.5,0.824,0.852,0.524,0.682,0.852,0.594,0.812,0.75,0.846,0.574,0.766,0,0.688,0.832,0.702,0.628,0.834,0.844,0.702,0.708,0.644,0.69,0.816,0.87,0.66,0.69,0.498,0.706,0.838,0.82,0.798,0.784,0.752,0.812,0.818,0.702,0.732,0.69,0.82,0.802,0.5,0.83,0.826,0.79,0.532,0.74,0.69,0.848,0.674,0.5,0.702,0,0.834,0.69,0.792,0.556,0.674,0.502,0.79,0.668,0.834,0.82,0.5,0.804,0.788,0.702,0.81,0.704,0.696,0.822,0.5,0.81,0.85,0.748,0.83,0.766,0.49,0.742,0.834,0.702,0.528,0.842,0,0.694,0.676,0.558,0.856,0.806,0.856,0.838,0.672,0.822,0.78,0.79,0.7,0.5,0.768,0.79,0.666,0.844,0.576,0.842,0.802,0.832,0.824,0.73,0,0.69,0.826,0.702,0.854,0.85,0.5,0.794,0.5,0.824,0.832,0.786,0.552,0.84,0.836,0.848
44390,0.712,0.79,0.734,0.848,0.5,0.844,0.636,0.872,0.852,0.814,0.7,0.728,0.85,0.838,0.728,0.63,0.806,0.682,0.716,0.852,0.734,0.822,0.84,0.696,0.586,0.714,0.746,0.668,0.854,0.874,0.584,0.764,0.856,0.6,0.858,0.782,0.842,0.586,0.776,0,0.688,0.85,0.714,0.604,0.858,0.842,0.728,0.706,0.646,0.696,0.846,0.862,0.708,0.704,0.51,0.712,0.858,0.816,0.804,0.794,0.768,0.84,0.838,0.728,0.774,0.674,0.854,0.814,0.5,0.862,0.83,0.806,0.652,0.738,0.666,0.852,0.706,0.5,0.728,0,0.838,0.73,0.838,0.0,0.674,0.5,0.79,0.712,0.856,0.814,0.5,0.794,0.778,0.726,0.824,0.698,0.716,0.844,0.5,0.826,0.854,0.788,0.848,0.748,0.516,0.738,0.86,0.714,0.55,0.854,0,0.722,0.674,0.538,0.874,0.85,0.866,0.834,0.708,0.846,0.78,0.79,0.694,0.5,0.818,0.79,0.728,0.838,0.56,0.862,0.85,0.848,0.832,0.716,0,0.674,0.836,0.734,0.864,0.846,0.69,0.812,0.5,0.85,0.84,0.816,0.54,0.846,0.858,0.844
44391,0.688,0.804,0.7,0.84,0.5,0.856,0.604,0.862,0.876,0.83,0.708,0.704,0.846,0.836,0.704,0.664,0.81,0.66,0.682,0.838,0.688,0.832,0.82,0.678,0.51,0.704,0.816,0.71,0.824,0.868,0.59,0.774,0.876,0.636,0.848,0.78,0.862,0.578,0.774,0,0.668,0.868,0.704,0.626,0.858,0.86,0.704,0.694,0.608,0.676,0.836,0.882,0.672,0.654,0.494,0.682,0.854,0.84,0.844,0.828,0.788,0.824,0.828,0.704,0.74,0.668,0.836,0.824,0.5,0.824,0.838,0.816,0.552,0.772,0.676,0.876,0.664,0.5,0.704,0,0.848,0.702,0.814,0.646,0.626,0.508,0.814,0.682,0.83,0.842,0.5,0.82,0.804,0.696,0.84,0.662,0.702,0.842,0.5,0.828,0.862,0.8,0.848,0.76,0.556,0.77,0.866,0.704,0.536,0.848,0,0.68,0.626,0.518,0.88,0.828,0.864,0.846,0.662,0.846,0.81,0.786,0.71,0.5,0.788,0.81,0.65,0.848,0.58,0.858,0.822,0.858,0.86,0.72,0,0.668,0.84,0.702,0.858,0.852,0.7,0.82,0.5,0.836,0.834,0.84,0.49,0.85,0.864,0.854
44392,0.882,0.856,0.84,0.866,0.0,0.892,0.86,0.88,0.88,0.826,0.878,0.83,0.882,0.884,0.832,0.876,0.842,0.852,0.856,0.862,0.848,0.858,0.87,0.87,0.504,0.832,0.764,0.862,0.878,0.876,0.5,0.814,0.88,0.876,0.87,0.802,0.868,0.832,0.828,0,0.834,0.858,0.776,0.876,0.878,0.832,0.77,0.878,0.846,0.878,0.88,0.874,0.788,0.72,0.498,0.848,0.882,0.806,0.828,0.79,0.864,0.852,0.854,0.832,0.776,0.842,0.866,0.866,0.5,0.868,0.872,0.874,0.478,0.89,0.854,0.864,0.848,0.546,0.832,0,0.84,0.0,0.878,0.0,0.0,0.496,0.82,0.842,0.86,0.822,0.5,0.862,0.876,0.876,0.824,0.0,0.882,0.858,0.682,0.8,0.852,0.654,0.88,0.838,0.502,0.856,0.886,0.776,0.0,0.878,0,0.86,0.0,0.628,0.884,0.862,0.866,0.874,0.866,0.87,0.828,0.726,0.696,0.0,0.874,0.856,0.0,0.88,0.0,0.874,0.868,0.884,0.824,0.804,0,0.842,0.882,0.836,0.884,0.878,0.86,0.862,0.77,0.876,0.866,0.832,0.68,0.872,0.872,0.878
44393,0.868,0.874,0.822,0.878,0.0,0.872,0.868,0.876,0.878,0.85,0.894,0.838,0.87,0.872,0.838,0.894,0.82,0.84,0.842,0.882,0.83,0.874,0.872,0.888,0.506,0.838,0.808,0.864,0.874,0.888,0.5,0.844,0.884,0.892,0.87,0.84,0.868,0.838,0.854,0,0.85,0.87,0.838,0.9,0.872,0.84,0.838,0.896,0.862,0.894,0.878,0.888,0.742,0.708,0.52,0.832,0.88,0.842,0.816,0.802,0.848,0.878,0.878,0.838,0.82,0.846,0.88,0.876,0.5,0.872,0.868,0.896,0.478,0.894,0.85,0.868,0.824,0.556,0.838,0,0.872,0.0,0.886,0.0,0.0,0.48,0.816,0.834,0.872,0.848,0.5,0.848,0.874,0.88,0.858,0.0,0.872,0.872,0.69,0.814,0.872,0.742,0.872,0.846,0.468,0.856,0.88,0.838,0.538,0.872,0,0.886,0.0,0.494,0.892,0.882,0.876,0.86,0.874,0.864,0.84,0.778,0.766,0.0,0.872,0.87,0.0,0.87,0.0,0.874,0.88,0.882,0.826,0.766,0,0.846,0.872,0.82,0.88,0.88,0.876,0.876,0.77,0.874,0.878,0.862,0.714,0.866,0.882,0.878
44394,0.888,0.88,0.828,0.874,0.0,0.886,0.868,0.876,0.894,0.848,0.89,0.852,0.88,0.878,0.844,0.878,0.838,0.866,0.858,0.88,0.846,0.88,0.866,0.888,0.538,0.844,0.806,0.87,0.874,0.89,0.5,0.814,0.882,0.89,0.876,0.808,0.878,0.844,0.856,0,0.862,0.882,0.808,0.89,0.886,0.85,0.808,0.888,0.868,0.89,0.872,0.874,0.78,0.764,0.516,0.856,0.878,0.846,0.84,0.84,0.84,0.866,0.87,0.844,0.822,0.862,0.884,0.88,0.5,0.876,0.88,0.886,0.524,0.884,0.862,0.868,0.854,0.528,0.844,0,0.856,0.0,0.866,0.0,0.0,0.516,0.828,0.844,0.866,0.848,0.5,0.888,0.86,0.884,0.858,0.0,0.878,0.88,0.69,0.852,0.86,0.782,0.874,0.86,0.498,0.872,0.89,0.808,0.496,0.878,0,0.876,0.0,0.674,0.888,0.886,0.866,0.888,0.88,0.878,0.854,0.786,0.776,0.0,0.85,0.84,0.0,0.888,0.674,0.878,0.878,0.882,0.852,0.784,0,0.862,0.882,0.83,0.882,0.886,0.87,0.862,0.794,0.878,0.87,0.86,0.698,0.88,0.882,0.878
44395,0.89,0.876,0.876,0.872,0.0,0.89,0.884,0.89,0.892,0.846,0.898,0.84,0.89,0.866,0.838,0.864,0.846,0.864,0.882,0.868,0.866,0.872,0.876,0.888,0.506,0.838,0.808,0.894,0.88,0.89,0.5,0.834,0.886,0.886,0.888,0.874,0.87,0.838,0.844,0,0.844,0.88,0.836,0.896,0.888,0.856,0.836,0.898,0.832,0.896,0.866,0.876,0.786,0.754,0.47,0.854,0.896,0.838,0.84,0.836,0.834,0.87,0.874,0.838,0.78,0.85,0.886,0.888,0.5,0.876,0.89,0.882,0.482,0.894,0.852,0.878,0.86,0.512,0.838,0,0.872,0.0,0.89,0.534,0.0,0.494,0.832,0.872,0.864,0.836,0.5,0.882,0.88,0.892,0.856,0.0,0.884,0.878,0.69,0.838,0.878,0.724,0.888,0.842,0.466,0.872,0.892,0.836,0.522,0.876,0,0.882,0.0,0.566,0.882,0.882,0.886,0.882,0.896,0.888,0.84,0.79,0.808,0.0,0.854,0.874,0.0,0.888,0.534,0.896,0.886,0.886,0.846,0.8,0,0.85,0.89,0.868,0.882,0.888,0.894,0.882,0.832,0.886,0.868,0.854,0.702,0.888,0.88,0.892
44396,0.888,0.87,0.81,0.876,0.0,0.876,0.848,0.884,0.888,0.838,0.898,0.854,0.884,0.858,0.856,0.886,0.834,0.84,0.844,0.882,0.836,0.868,0.88,0.888,0.508,0.856,0.834,0.86,0.884,0.88,0.5,0.826,0.88,0.888,0.872,0.82,0.856,0.856,0.842,0,0.854,0.868,0.794,0.892,0.888,0.864,0.794,0.892,0.862,0.888,0.858,0.868,0.778,0.72,0.466,0.84,0.888,0.828,0.852,0.834,0.864,0.87,0.874,0.856,0.802,0.856,0.886,0.876,0.5,0.874,0.866,0.876,0.49,0.878,0.862,0.876,0.84,0.544,0.856,0,0.872,0.0,0.882,0.0,0.0,0.516,0.834,0.832,0.872,0.86,0.5,0.872,0.862,0.878,0.87,0.0,0.882,0.878,0.706,0.834,0.87,0.72,0.88,0.852,0.5,0.862,0.886,0.794,0.502,0.886,0,0.88,0.0,0.704,0.878,0.882,0.872,0.888,0.864,0.878,0.856,0.768,0.8,0.0,0.83,0.862,0.0,0.888,0.606,0.872,0.888,0.884,0.842,0.782,0,0.856,0.876,0.814,0.882,0.894,0.862,0.88,0.736,0.878,0.866,0.848,0.714,0.872,0.876,0.88
44397,0.814,0.788,0.752,0.8,0.0,0.822,0.758,0.812,0.818,0.766,0.574,0.648,0.816,0.774,0.746,0.58,0.754,0.744,0.76,0.812,0.742,0.79,0.806,0.492,0.554,0.74,0.776,0.758,0.806,0.8,0.508,0.714,0.792,0.598,0.804,0.762,0.788,0.542,0.776,0,0.532,0.822,0.738,0.604,0.814,0.778,0.738,0.57,0.738,0.578,0.792,0.792,0.566,0.674,0.462,0.756,0.798,0.766,0.79,0.766,0.744,0.81,0.806,0.746,0.764,0.532,0.804,0.794,0.5,0.802,0.802,0.76,0.52,0.704,0.556,0.806,0.736,0.534,0.746,0,0.788,0.0,0.794,0.0,0.0,0.492,0.756,0.754,0.804,0.782,0.5,0.766,0.778,0.796,0.788,0.0,0.804,0.808,0.594,0.748,0.788,0.684,0.792,0.788,0.466,0.784,0.808,0.738,0.502,0.794,0,0.796,0.0,0.498,0.806,0.8,0.808,0.808,0.77,0.816,0.776,0.738,0.59,0.0,0.756,0.802,0.0,0.822,0.0,0.796,0.792,0.83,0.774,0.56,0,0.532,0.782,0.756,0.808,0.804,0.76,0.778,0.774,0.804,0.804,0.806,0.652,0.802,0.832,0.786
44398,0.81,0.77,0.718,0.816,0.0,0.816,0.74,0.812,0.812,0.784,0.566,0.638,0.824,0.786,0.722,0.556,0.732,0.712,0.706,0.798,0.71,0.76,0.794,0.52,0.53,0.702,0.752,0.75,0.802,0.81,0.512,0.714,0.814,0.584,0.818,0.728,0.808,0.538,0.74,0,0.53,0.806,0.7,0.58,0.806,0.78,0.7,0.568,0.764,0.538,0.796,0.84,0.566,0.684,0.492,0.7,0.818,0.762,0.79,0.76,0.766,0.802,0.804,0.722,0.746,0.53,0.812,0.758,0.5,0.796,0.784,0.742,0.486,0.72,0.544,0.824,0.688,0.54,0.722,0,0.802,0.0,0.792,0.0,0.0,0.5,0.744,0.712,0.8,0.776,0.5,0.746,0.718,0.78,0.818,0.0,0.816,0.812,0.664,0.77,0.78,0.66,0.822,0.75,0.53,0.764,0.814,0.7,0.0,0.824,0,0.786,0.0,0.476,0.816,0.81,0.82,0.808,0.732,0.798,0.726,0.716,0.58,0.0,0.758,0.786,0.0,0.83,0.0,0.822,0.806,0.784,0.772,0.568,0,0.53,0.786,0.714,0.814,0.82,0.746,0.76,0.8,0.814,0.794,0.796,0.636,0.828,0.8,0.806

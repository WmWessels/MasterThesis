0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44399,0.81,0.806,0.742,0.808,0,0.824,0.768,0.836,0.832,0.784,0.574,0.688,0.82,0.836,0.708,0.574,0.772,0.766,0.77,0.8,0.768,0.776,0.804,0.59,0.502,0.708,0.808,0.772,0.804,0.842,0.502,0.74,0.846,0.542,0.832,0.764,0.82,0.538,0.78,0,0.542,0.816,0.712,0.58,0.82,0.802,0.712,0.568,0.768,0.542,0.828,0.842,0.616,0.684,0.488,0.742,0.834,0.8,0.78,0.784,0.796,0.8,0.802,0.708,0.774,0.542,0.832,0.816,0.5,0.8,0.778,0.762,0.526,0.746,0.604,0.832,0.758,0.508,0.708,0,0.794,0,0.794,0.0,0,0.5,0.766,0.746,0.804,0.768,0.5,0.802,0.744,0.81,0.834,0.0,0.8,0.8,0.636,0.79,0.822,0.672,0.818,0.784,0.472,0.784,0.834,0.712,0.5,0.814,0,0.79,0,0.492,0.846,0.83,0.822,0.806,0.77,0.826,0.78,0.734,0.59,0,0.776,0.804,0,0.822,0,0.826,0.844,0.822,0.81,0.61,0,0.542,0.804,0.744,0.836,0.83,0.77,0.796,0.81,0.806,0.806,0.798,0.646,0.822,0.838,0.832
44400,0.816,0.748,0.744,0.824,0,0.818,0.78,0.818,0.834,0.794,0.6,0.642,0.816,0.812,0.724,0.6,0.776,0.78,0.758,0.814,0.764,0.802,0.808,0.57,0.518,0.724,0.776,0.766,0.83,0.844,0.574,0.69,0.84,0.614,0.836,0.724,0.84,0.592,0.778,0,0.586,0.838,0.718,0.628,0.812,0.812,0.718,0.596,0.742,0.578,0.808,0.824,0.55,0.686,0.502,0.748,0.828,0.77,0.81,0.804,0.786,0.808,0.814,0.724,0.736,0.584,0.826,0.772,0.5,0.82,0.81,0.754,0.502,0.682,0.582,0.822,0.762,0.536,0.724,0,0.802,0,0.798,0.0,0,0.544,0.774,0.758,0.82,0.782,0.5,0.768,0.716,0.796,0.81,0.0,0.818,0.814,0.626,0.788,0.822,0.686,0.838,0.764,0.514,0.774,0.822,0.718,0.526,0.83,0,0.786,0,0.492,0.824,0.826,0.834,0.828,0.768,0.806,0.748,0.734,0.554,0,0.8,0.758,0,0.832,0,0.814,0.812,0.824,0.776,0.526,0,0.584,0.814,0.744,0.836,0.824,0.778,0.788,0.784,0.824,0.812,0.798,0.642,0.826,0.836,0.828
44401,0.83,0.792,0.738,0.834,0,0.842,0.756,0.844,0.848,0.794,0.6,0.698,0.836,0.81,0.718,0.59,0.752,0.758,0.758,0.81,0.752,0.788,0.81,0.578,0.518,0.718,0.788,0.754,0.822,0.856,0.56,0.728,0.836,0.624,0.848,0.746,0.842,0.558,0.774,0,0.554,0.842,0.71,0.608,0.842,0.822,0.71,0.602,0.766,0.588,0.832,0.85,0.556,0.698,0.524,0.746,0.856,0.786,0.794,0.792,0.776,0.808,0.814,0.718,0.8,0.554,0.83,0.804,0.5,0.812,0.82,0.772,0.468,0.734,0.6,0.862,0.736,0.554,0.718,0,0.808,0,0.818,0.0,0,0.518,0.754,0.746,0.818,0.758,0.5,0.788,0.744,0.804,0.834,0.0,0.822,0.812,0.644,0.792,0.852,0.71,0.83,0.772,0.526,0.762,0.842,0.71,0.456,0.838,0,0.81,0,0.514,0.842,0.828,0.834,0.832,0.756,0.832,0.772,0.718,0.602,0,0.764,0.806,0,0.842,0,0.856,0.816,0.846,0.812,0.59,0,0.554,0.792,0.738,0.84,0.85,0.756,0.81,0.808,0.808,0.822,0.806,0.676,0.848,0.854,0.836
44402,0.776,0.75,0.72,0.792,0,0.78,0.754,0.784,0.774,0.758,0.61,0.782,0.796,0.762,0.728,0.61,0.756,0.73,0.736,0.794,0.734,0.758,0.778,0.61,0.524,0.706,0.744,0.726,0.798,0.782,0.54,0.7,0.778,0.61,0.778,0.784,0.732,0.61,0.71,0,0.61,0.762,0.77,0.602,0.776,0.72,0.776,0.61,0.73,0.61,0.75,0.774,0.694,0.726,0.488,0.736,0.772,0.752,0.766,0.75,0.796,0.782,0.788,0.728,0.75,0.61,0.786,0.772,0.512,0.79,0.784,0.778,0.458,0.688,0.61,0.762,0.744,0.53,0.728,0,0.764,0,0.782,0.0,0,0.452,0.758,0.738,0.784,0.766,0.5,0.76,0.728,0.778,0.778,0.0,0.784,0.788,0.5,0.76,0.758,0.696,0.79,0.718,0.546,0.688,0.776,0.77,0.52,0.796,0,0.774,0,0.5,0.78,0.772,0.778,0.796,0.74,0.76,0.768,0.744,0.718,0,0.76,0.754,0,0.782,0,0.76,0.794,0.754,0.754,0.72,0,0.61,0.752,0.722,0.77,0.79,0.758,0.75,0.788,0.778,0.792,0.778,0.712,0.792,0.78,0.782
44403,0.79,0.75,0.7,0.788,0,0.784,0.744,0.796,0.786,0.702,0.6,0.752,0.78,0.736,0.702,0.444,0.742,0.738,0.726,0.776,0.734,0.75,0.774,0.542,0.498,0.702,0.77,0.752,0.78,0.778,0.5,0.702,0.784,0.542,0.784,0.766,0.74,0.6,0.716,0,0.6,0.768,0.742,0.6,0.784,0.738,0.742,0.6,0.746,0.6,0.754,0.774,0.704,0.698,0.502,0.718,0.79,0.756,0.782,0.772,0.744,0.778,0.784,0.702,0.75,0.6,0.794,0.728,0.5,0.786,0.78,0.772,0.504,0.7,0.6,0.786,0.738,0.544,0.702,0,0.76,0,0.756,0.498,0,0.506,0.746,0.722,0.778,0.754,0.5,0.754,0.712,0.78,0.772,0.0,0.788,0.786,0.494,0.778,0.782,0.708,0.792,0.696,0.474,0.694,0.786,0.742,0.522,0.792,0,0.784,0,0.482,0.78,0.786,0.786,0.788,0.73,0.776,0.758,0.712,0.722,0,0.73,0.754,0,0.788,0,0.796,0.782,0.758,0.782,0.718,0,0.6,0.758,0.72,0.786,0.792,0.726,0.742,0.786,0.776,0.78,0.754,0.73,0.79,0.776,0.772
44404,0.806,0.754,0.738,0.8,0,0.808,0.766,0.802,0.792,0.794,0.608,0.69,0.796,0.776,0.736,0.608,0.762,0.784,0.766,0.786,0.76,0.786,0.812,0.608,0.482,0.736,0.748,0.754,0.802,0.812,0.504,0.734,0.798,0.608,0.794,0.768,0.76,0.608,0.79,0,0.608,0.762,0.73,0.606,0.796,0.744,0.73,0.608,0.756,0.608,0.784,0.788,0.758,0.68,0.478,0.756,0.826,0.738,0.778,0.768,0.728,0.804,0.812,0.736,0.776,0.608,0.786,0.774,0.466,0.796,0.806,0.774,0.492,0.708,0.608,0.788,0.776,0.526,0.736,0,0.81,0,0.768,0.0,0,0.49,0.764,0.774,0.806,0.77,0.5,0.756,0.736,0.812,0.802,0.0,0.82,0.792,0.5,0.772,0.76,0.714,0.798,0.718,0.534,0.728,0.802,0.73,0.486,0.808,0,0.792,0,0.48,0.81,0.794,0.812,0.798,0.764,0.786,0.74,0.74,0.766,0,0.758,0.776,0,0.816,0,0.81,0.792,0.75,0.756,0.756,0,0.608,0.776,0.734,0.808,0.812,0.758,0.77,0.796,0.806,0.8,0.792,0.75,0.818,0.78,0.804
44405,0.822,0.764,0.73,0.8,0,0.818,0.74,0.788,0.806,0.762,0.618,0.75,0.804,0.776,0.684,0.618,0.744,0.738,0.768,0.79,0.756,0.786,0.79,0.618,0.502,0.684,0.76,0.748,0.79,0.808,0.5,0.662,0.804,0.618,0.808,0.762,0.758,0.618,0.784,0,0.618,0.778,0.744,0.618,0.822,0.742,0.744,0.618,0.73,0.618,0.8,0.814,0.704,0.686,0.514,0.748,0.808,0.772,0.784,0.74,0.784,0.794,0.796,0.684,0.75,0.618,0.818,0.764,0.51,0.798,0.8,0.77,0.478,0.694,0.618,0.8,0.748,0.52,0.684,0,0.798,0,0.784,0.504,0,0.51,0.738,0.758,0.796,0.768,0.5,0.764,0.718,0.81,0.786,0.0,0.804,0.81,0.504,0.772,0.78,0.666,0.802,0.686,0.5,0.736,0.814,0.744,0.466,0.806,0,0.804,0,0.476,0.828,0.804,0.796,0.81,0.742,0.79,0.752,0.722,0.744,0,0.758,0.748,0,0.808,0,0.788,0.812,0.792,0.778,0.722,0,0.618,0.768,0.742,0.79,0.814,0.75,0.748,0.792,0.794,0.792,0.784,0.67,0.806,0.808,0.8
44406,0.784,0.704,0.708,0.774,0,0.79,0.732,0.77,0.79,0.764,0.556,0.716,0.772,0.724,0.718,0.554,0.738,0.736,0.744,0.758,0.726,0.726,0.758,0.566,0.492,0.718,0.734,0.726,0.766,0.772,0.5,0.704,0.78,0.556,0.782,0.746,0.744,0.556,0.75,0,0.556,0.758,0.744,0.556,0.77,0.738,0.744,0.566,0.736,0.556,0.756,0.784,0.7,0.702,0.51,0.736,0.78,0.722,0.766,0.732,0.766,0.758,0.766,0.718,0.7,0.556,0.778,0.768,0.532,0.764,0.782,0.764,0.448,0.686,0.556,0.772,0.734,0.564,0.718,0,0.782,0,0.744,0.0,0,0.494,0.734,0.732,0.766,0.776,0.5,0.756,0.708,0.774,0.75,0.0,0.776,0.776,0.5,0.744,0.746,0.69,0.774,0.724,0.472,0.73,0.778,0.744,0.492,0.774,0,0.78,0,0.554,0.77,0.778,0.774,0.772,0.744,0.75,0.706,0.688,0.746,0,0.728,0.734,0,0.79,0,0.776,0.778,0.752,0.756,0.712,0,0.556,0.73,0.708,0.772,0.784,0.726,0.76,0.796,0.766,0.768,0.786,0.69,0.772,0.754,0.774
44407,0.866,0.832,0.82,0.834,0,0.858,0.746,0.874,0.862,0.81,0.78,0.756,0.852,0.826,0.746,0.778,0.746,0.854,0.836,0.792,0.824,0.798,0.802,0.788,0.852,0.746,0.826,0.746,0.824,0.876,0.824,0.71,0.868,0.772,0.854,0.77,0.88,0.726,0.758,0,0.754,0.876,0.742,0.786,0.862,0.838,0.742,0.752,0.688,0.792,0.84,0.872,0.738,0.74,0.792,0.83,0.866,0.838,0.848,0.822,0.81,0.824,0.826,0.746,0.8,0.754,0.834,0.804,0.59,0.828,0.79,0.8,0.856,0.786,0.744,0.878,0.852,0.5,0.746,0,0.79,0,0.79,0.836,0,0.85,0.746,0.836,0.818,0.776,0.5,0.8,0.82,0.838,0.862,0.0,0.846,0.806,0.712,0.826,0.866,0.744,0.852,0.756,0.832,0.786,0.868,0.742,0.854,0.848,0,0.788,0,0.83,0.862,0.832,0.852,0.84,0.852,0.856,0.77,0.766,0.76,0,0.798,0.83,0,0.854,0,0.864,0.842,0.856,0.852,0.74,0,0.754,0.874,0.822,0.88,0.866,0.748,0.842,0.836,0.824,0.816,0.838,0.746,0.844,0.848,0.838
44408,0.844,0.794,0.78,0.806,0,0.84,0.736,0.86,0.848,0.784,0.764,0.768,0.824,0.812,0.728,0.75,0.738,0.83,0.832,0.804,0.794,0.778,0.808,0.764,0.828,0.728,0.792,0.738,0.814,0.842,0.782,0.702,0.844,0.77,0.824,0.758,0.85,0.712,0.732,0,0.75,0.842,0.754,0.774,0.832,0.85,0.754,0.756,0.708,0.756,0.84,0.84,0.736,0.73,0.774,0.796,0.848,0.824,0.82,0.784,0.764,0.804,0.8,0.728,0.794,0.75,0.812,0.784,0.652,0.804,0.802,0.788,0.812,0.754,0.724,0.838,0.824,0.506,0.728,0,0.77,0,0.746,0.816,0,0.796,0.74,0.818,0.81,0.788,0.5,0.806,0.82,0.82,0.84,0.0,0.828,0.794,0.726,0.784,0.838,0.758,0.822,0.57,0.806,0.784,0.854,0.754,0.828,0.816,0,0.828,0,0.778,0.854,0.808,0.826,0.82,0.824,0.846,0.776,0.74,0.75,0,0.796,0.808,0,0.852,0,0.848,0.804,0.846,0.828,0.75,0,0.75,0.842,0.78,0.866,0.844,0.736,0.824,0.81,0.802,0.802,0.8,0.728,0.822,0.84,0.826
44409,0.826,0.804,0.802,0.826,0,0.844,0.758,0.87,0.84,0.808,0.806,0.768,0.838,0.806,0.764,0.788,0.758,0.846,0.838,0.82,0.82,0.81,0.82,0.8,0.854,0.764,0.81,0.758,0.834,0.86,0.818,0.76,0.856,0.806,0.844,0.794,0.856,0.7,0.786,0,0.762,0.836,0.778,0.792,0.826,0.83,0.778,0.79,0.748,0.804,0.818,0.836,0.74,0.752,0.802,0.822,0.868,0.84,0.842,0.804,0.792,0.828,0.814,0.764,0.794,0.762,0.838,0.79,0.596,0.82,0.806,0.782,0.848,0.766,0.76,0.852,0.838,0.5,0.764,0,0.792,0,0.814,0.818,0,0.816,0.758,0.824,0.834,0.786,0.5,0.79,0.814,0.822,0.84,0.0,0.846,0.822,0.748,0.828,0.826,0.766,0.846,0.594,0.84,0.804,0.834,0.778,0.856,0.85,0,0.85,0,0.806,0.848,0.838,0.85,0.824,0.838,0.854,0.794,0.764,0.76,0,0.828,0.78,0,0.842,0,0.856,0.838,0.852,0.854,0.722,0,0.762,0.862,0.8,0.872,0.842,0.758,0.808,0.832,0.826,0.812,0.826,0.738,0.838,0.858,0.83
44410,0.85,0.842,0.822,0.832,0,0.844,0.748,0.864,0.86,0.818,0.806,0.792,0.854,0.844,0.758,0.748,0.746,0.85,0.842,0.818,0.836,0.824,0.832,0.8,0.85,0.758,0.834,0.746,0.824,0.856,0.79,0.7,0.86,0.77,0.848,0.78,0.856,0.69,0.754,0,0.752,0.856,0.732,0.8,0.856,0.834,0.732,0.796,0.712,0.792,0.844,0.85,0.758,0.668,0.834,0.836,0.866,0.854,0.856,0.818,0.804,0.82,0.82,0.758,0.806,0.744,0.832,0.802,0.614,0.83,0.798,0.798,0.862,0.776,0.744,0.86,0.848,0.506,0.758,0,0.816,0,0.794,0.842,0,0.852,0.74,0.838,0.824,0.79,0.5,0.804,0.818,0.828,0.846,0.0,0.858,0.83,0.718,0.826,0.848,0.758,0.856,0.75,0.84,0.788,0.846,0.732,0.862,0.84,0,0.804,0,0.792,0.85,0.834,0.85,0.836,0.848,0.862,0.806,0.766,0.764,0,0.838,0.806,0,0.85,0,0.872,0.844,0.862,0.858,0.778,0,0.744,0.86,0.828,0.87,0.85,0.744,0.826,0.83,0.83,0.826,0.84,0.738,0.834,0.846,0.842
44411,0.85,0.814,0.796,0.826,0,0.86,0.744,0.882,0.85,0.792,0.782,0.752,0.844,0.856,0.732,0.79,0.742,0.852,0.844,0.824,0.818,0.804,0.814,0.778,0.836,0.732,0.82,0.742,0.822,0.838,0.792,0.708,0.858,0.804,0.842,0.778,0.864,0.716,0.754,0,0.744,0.852,0.75,0.798,0.852,0.838,0.75,0.762,0.758,0.78,0.852,0.858,0.736,0.76,0.802,0.828,0.862,0.83,0.842,0.814,0.786,0.822,0.818,0.732,0.792,0.744,0.826,0.814,0.642,0.826,0.814,0.802,0.832,0.8,0.746,0.864,0.85,0.502,0.732,0,0.79,0,0.8,0.848,0,0.806,0.742,0.826,0.814,0.774,0.5,0.82,0.828,0.84,0.848,0.0,0.838,0.812,0.734,0.81,0.858,0.702,0.854,0.756,0.816,0.808,0.866,0.75,0.862,0.834,0,0.804,0,0.804,0.85,0.83,0.816,0.834,0.85,0.868,0.774,0.764,0.752,0,0.836,0.798,0,0.856,0,0.866,0.816,0.866,0.852,0.728,0,0.744,0.852,0.79,0.874,0.872,0.742,0.842,0.828,0.83,0.82,0.816,0.72,0.832,0.868,0.824
44412,0.904,0.866,0.852,0.884,0,0.906,0.86,0.906,0.906,0.866,0.756,0.85,0.894,0.0,0.806,0.798,0.888,0.868,0.872,0.876,0.868,0.85,0.882,0.772,0.516,0.806,0.612,0.85,0.886,0.0,0.5,0.8,0.916,0.792,0.892,0.83,0.904,0.782,0.868,0,0.728,0.824,0.79,0.826,0.904,0.908,0.79,0.762,0.87,0.76,0.0,0.914,0.794,0.668,0.464,0.862,0.894,0.772,0.838,0.844,0.844,0.882,0.882,0.806,0.77,0.728,0.878,0.896,0.5,0.888,0.868,0.908,0.53,0.836,0.794,0.906,0.856,0.6,0.806,0,0.854,0,0.884,0.0,0,0.496,0.81,0.854,0.88,0.858,0.5,0.856,0.864,0.928,0.868,0.0,0.9,0.9,0.724,0.862,0.91,0.744,0.89,0.882,0.5,0.744,0.91,0.79,0.0,0.884,0,0.912,0,0.488,0.0,0.876,0.906,0.884,0.856,0.896,0.852,0.814,0.804,0,0.876,0.868,0,0.882,0,0.914,0.868,0.85,0.86,0.816,0,0.728,0.888,0.848,0.902,0.886,0.848,0.862,0.848,0.886,0.882,0.864,0.512,0.888,0.856,0.896
44413,0.926,0.862,0.862,0.916,0,0.926,0.848,0.932,0.938,0.89,0.758,0.864,0.926,0.0,0.788,0.816,0.892,0.888,0.878,0.904,0.876,0.826,0.918,0.778,0.51,0.788,0.588,0.846,0.914,0.0,0.5,0.802,0.928,0.818,0.914,0.806,0.916,0.822,0.894,0,0.764,0.816,0.788,0.842,0.92,0.346,0.788,0.762,0.856,0.766,0.0,0.926,0.772,0.718,0.52,0.866,0.926,0.772,0.866,0.858,0.816,0.904,0.894,0.788,0.774,0.766,0.906,0.934,0.502,0.918,0.904,0.904,0.504,0.868,0.798,0.92,0.876,0.6,0.788,0,0.896,0,0.912,0.0,0,0.494,0.798,0.862,0.912,0.876,0.5,0.882,0.864,0.928,0.886,0.0,0.93,0.918,0.76,0.86,0.926,0.792,0.93,0.872,0.458,0.768,0.926,0.788,0.496,0.93,0,0.914,0,0.488,0.0,0.902,0.924,0.92,0.838,0.922,0.874,0.83,0.84,0,0.876,0.86,0,0.918,0,0.932,0.888,0.83,0.87,0.82,0,0.766,0.918,0.862,0.924,0.926,0.848,0.828,0.818,0.926,0.906,0.868,0.502,0.918,0.836,0.93
44414,0.902,0.858,0.85,0.9,0,0.914,0.868,0.906,0.91,0.848,0.75,0.842,0.908,0.0,0.79,0.808,0.892,0.868,0.872,0.9,0.872,0.804,0.9,0.758,0.49,0.79,0.596,0.846,0.906,0.0,0.5,0.82,0.908,0.81,0.902,0.832,0.91,0.776,0.89,0,0.716,0.828,0.764,0.83,0.904,0.914,0.784,0.764,0.862,0.776,0.0,0.908,0.784,0.71,0.488,0.856,0.904,0.754,0.862,0.852,0.842,0.892,0.896,0.79,0.758,0.726,0.888,0.912,0.5,0.9,0.874,0.908,0.56,0.852,0.784,0.914,0.858,0.59,0.79,0,0.87,0,0.898,0.0,0,0.462,0.818,0.856,0.894,0.862,0.5,0.856,0.846,0.912,0.884,0.0,0.91,0.892,0.738,0.862,0.926,0.766,0.906,0.872,0.468,0.796,0.91,0.764,0.0,0.912,0,0.902,0,0.464,0.0,0.898,0.914,0.894,0.878,0.892,0.866,0.848,0.798,0,0.822,0.85,0,0.902,0,0.91,0.888,0.876,0.876,0.846,0,0.726,0.904,0.852,0.916,0.908,0.86,0.86,0.842,0.906,0.894,0.828,0.506,0.908,0.832,0.906
44415,0.902,0.858,0.824,0.886,0,0.9,0.84,0.902,0.926,0.862,0.738,0.83,0.89,0.0,0.768,0.814,0.882,0.854,0.85,0.876,0.85,0.824,0.866,0.768,0.52,0.764,0.564,0.842,0.888,0.0,0.5,0.76,0.92,0.812,0.886,0.772,0.914,0.78,0.868,0,0.732,0.842,0.75,0.85,0.9,0.904,0.73,0.762,0.838,0.758,0.0,0.9,0.75,0.716,0.464,0.842,0.902,0.768,0.85,0.844,0.812,0.876,0.872,0.768,0.724,0.734,0.864,0.918,0.5,0.866,0.88,0.906,0.51,0.818,0.794,0.902,0.838,0.562,0.768,0,0.862,0,0.898,0.0,0,0.508,0.794,0.824,0.882,0.856,0.5,0.822,0.838,0.908,0.87,0.0,0.902,0.88,0.688,0.844,0.91,0.762,0.892,0.878,0.464,0.718,0.9,0.75,0.506,0.89,0,0.908,0,0.532,0.0,0.864,0.912,0.878,0.842,0.894,0.82,0.802,0.738,0,0.818,0.85,0,0.894,0,0.914,0.864,0.85,0.862,0.794,0,0.734,0.922,0.824,0.91,0.904,0.838,0.876,0.806,0.876,0.882,0.862,0.522,0.896,0.846,0.908
44416,0.902,0.842,0.85,0.866,0,0.904,0.836,0.896,0.91,0.846,0.772,0.842,0.892,0.0,0.796,0.814,0.866,0.862,0.862,0.876,0.854,0.782,0.862,0.748,0.484,0.796,0.564,0.822,0.87,0.0,0.5,0.806,0.906,0.838,0.878,0.796,0.92,0.788,0.854,0,0.722,0.806,0.756,0.856,0.884,0.5,0.756,0.766,0.862,0.732,0.0,0.914,0.766,0.69,0.478,0.852,0.914,0.694,0.834,0.826,0.822,0.868,0.862,0.796,0.72,0.73,0.872,0.892,0.504,0.86,0.874,0.886,0.514,0.808,0.796,0.89,0.846,0.576,0.796,0,0.856,0,0.88,0.0,0,0.514,0.79,0.86,0.874,0.85,0.5,0.86,0.83,0.896,0.862,0.0,0.91,0.886,0.626,0.83,0.908,0.798,0.906,0.876,0.478,0.75,0.902,0.756,0.0,0.9,0,0.892,0,0.484,0.0,0.87,0.892,0.878,0.816,0.888,0.858,0.81,0.81,0,0.848,0.858,0,0.876,0,0.922,0.866,0.808,0.856,0.818,0,0.73,0.902,0.846,0.918,0.892,0.822,0.832,0.798,0.882,0.872,0.834,0.504,0.892,0.808,0.91
44417,0.64,0.638,0.542,0.706,0,0.71,0.606,0.69,0.71,0.644,0.482,0.5,0.722,0.0,0.606,0.538,0.638,0.564,0.506,0.692,0.606,0.658,0.698,0.458,0.512,0.606,0.518,0.638,0.7,0.69,0.512,0.616,0.71,0.494,0.68,0.618,0.704,0.564,0.702,0,0.466,0.662,0.63,0.524,0.696,0.662,0.63,0.462,0.558,0.0,0.0,0.656,0.524,0.566,0.496,0.544,0.71,0.602,0.512,0.53,0.608,0.704,0.696,0.606,0.644,0.466,0.688,0.704,0.512,0.69,0.688,0.702,0.47,0.676,0.484,0.676,0.552,0.5,0.606,0,0.648,0,0.7,0.0,0,0.488,0.598,0.516,0.716,0.66,0.5,0.654,0.65,0.538,0.644,0.494,0.712,0.662,0.532,0.562,0.676,0.64,0.7,0.66,0.502,0.572,0.722,0.63,0.0,0.696,0,0.49,0,0.526,0.0,0.666,0.672,0.698,0.648,0.682,0.674,0.574,0.538,0,0.62,0.608,0,0.684,0,0.686,0.66,0.626,0.612,0.548,0,0.466,0.698,0.536,0.716,0.706,0.592,0.666,0.668,0.704,0.706,0.698,0.526,0.7,0.646,0.69
44418,0.642,0.57,0.512,0.638,0,0.638,0.596,0.664,0.634,0.612,0.504,0.522,0.654,0.0,0.57,0.554,0.618,0.52,0.512,0.65,0.558,0.618,0.646,0.492,0.496,0.57,0.552,0.612,0.642,0.626,0.538,0.632,0.628,0.498,0.644,0.598,0.626,0.536,0.638,0,0.502,0.62,0.57,0.546,0.658,0.616,0.57,0.496,0.496,0.0,0.0,0.624,0.51,0.55,0.512,0.522,0.632,0.6,0.556,0.522,0.572,0.64,0.648,0.57,0.606,0.502,0.624,0.66,0.508,0.66,0.65,0.61,0.52,0.628,0.512,0.626,0.516,0.5,0.57,0,0.654,0,0.642,0.0,0,0.55,0.612,0.498,0.632,0.642,0.5,0.574,0.58,0.548,0.642,0.542,0.622,0.65,0.508,0.516,0.586,0.608,0.646,0.608,0.474,0.578,0.654,0.57,0.0,0.646,0,0.508,0,0.464,0.0,0.64,0.64,0.672,0.604,0.626,0.578,0.566,0.536,0,0.574,0.604,0,0.648,0,0.644,0.646,0.574,0.558,0.548,0,0.502,0.638,0.51,0.642,0.648,0.596,0.608,0.632,0.638,0.644,0.658,0.526,0.66,0.598,0.64

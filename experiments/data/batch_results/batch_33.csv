0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44519,0.0,0.314,0.234,0.346,0.0,0.3,0.354,0.328,0.324,0.302,0.244,0.0,0.35,0.0,0.258,0.266,0.336,0.282,0.0,0.32,0.254,0.336,0.284,0.226,0.304,0.258,0.212,0.37,0.33,0.0,0.234,0.294,0.0,0.28,0.308,0.294,0.224,0.234,0.352,0,0.336,0.32,0.27,0.234,0.334,0.28,0.27,0.234,0.28,0.292,0.0,0.316,0.172,0.27,0.23,0.284,0.348,0.292,0.294,0.258,0.272,0.306,0.312,0.258,0.278,0.242,0.0,0.368,0.234,0.32,0.324,0.3,0.3,0.284,0.244,0.314,0.27,0.29,0.258,0,0.234,0.224,0.372,0.0,0.362,0.292,0.384,0.0,0.338,0.234,0.234,0.306,0.314,0.0,0.3,0.234,0.0,0.33,0.234,0.27,0.272,0.182,0.336,0.328,0.266,0.28,0.332,0.27,0.0,0.34,0,0.0,0.346,0.368,0.0,0.308,0.364,0.306,0.292,0.328,0.234,0.336,0.196,0.234,0.314,0.322,0.2,0.358,0.0,0.328,0.304,0.33,0.26,0.182,0.258,0.306,0.322,0.232,0.334,0.342,0.27,0.306,0.268,0.336,0.34,0.304,0.0,0.346,0.32,0.0
44520,0.0,0.298,0.236,0.328,0.0,0.298,0.304,0.3,0.29,0.31,0.246,0.0,0.304,0.0,0.26,0.226,0.31,0.278,0.0,0.276,0.248,0.296,0.258,0.276,0.294,0.26,0.208,0.308,0.296,0.0,0.234,0.3,0.0,0.206,0.304,0.278,0.22,0.234,0.292,0,0.308,0.29,0.264,0.234,0.306,0.242,0.234,0.234,0.252,0.272,0.0,0.284,0.182,0.258,0.24,0.29,0.32,0.282,0.304,0.29,0.28,0.272,0.282,0.26,0.258,0.244,0.304,0.302,0.234,0.286,0.298,0.29,0.314,0.268,0.252,0.296,0.292,0.276,0.26,0,0.234,0.238,0.33,0.0,0.304,0.294,0.306,0.0,0.29,0.234,0.234,0.29,0.292,0.0,0.308,0.234,0.0,0.306,0.234,0.294,0.272,0.178,0.314,0.296,0.276,0.266,0.298,0.264,0.0,0.32,0,0.0,0.3,0.312,0.0,0.308,0.306,0.276,0.256,0.294,0.234,0.308,0.24,0.234,0.294,0.298,0.246,0.298,0.194,0.294,0.294,0.294,0.29,0.228,0.246,0.302,0.32,0.262,0.306,0.304,0.26,0.292,0.266,0.31,0.3,0.31,0.0,0.324,0.294,0.0
44521,0.0,0.268,0.26,0.276,0.0,0.292,0.268,0.294,0.278,0.272,0.242,0.0,0.292,0.0,0.252,0.228,0.276,0.258,0.0,0.266,0.248,0.282,0.258,0.278,0.276,0.252,0.23,0.278,0.256,0.0,0.234,0.274,0.0,0.246,0.286,0.24,0.218,0.234,0.296,0,0.27,0.274,0.248,0.24,0.266,0.2,0.248,0.234,0.254,0.256,0.0,0.268,0.204,0.246,0.276,0.266,0.284,0.258,0.274,0.256,0.25,0.258,0.264,0.252,0.252,0.212,0.292,0.298,0.234,0.26,0.286,0.24,0.294,0.258,0.252,0.25,0.272,0.264,0.252,0,0.234,0.244,0.298,0.0,0.262,0.232,0.286,0.0,0.27,0.234,0.234,0.256,0.262,0.0,0.28,0.234,0.0,0.296,0.234,0.266,0.258,0.156,0.292,0.292,0.258,0.262,0.304,0.248,0.0,0.292,0,0.0,0.272,0.312,0.0,0.29,0.284,0.266,0.23,0.298,0.252,0.27,0.228,0.234,0.278,0.278,0.234,0.302,0.0,0.266,0.27,0.29,0.268,0.224,0.24,0.276,0.276,0.272,0.298,0.296,0.266,0.276,0.264,0.28,0.268,0.296,0.0,0.296,0.28,0.0
44522,0.0,0.282,0.274,0.314,0.0,0.3,0.312,0.336,0.314,0.21,0.232,0.0,0.308,0.0,0.24,0.242,0.308,0.278,0.0,0.24,0.304,0.268,0.232,0.27,0.282,0.234,0.218,0.308,0.282,0.0,0.234,0.226,0.0,0.212,0.282,0.256,0.236,0.234,0.27,0,0.266,0.254,0.234,0.232,0.274,0.228,0.242,0.234,0.274,0.244,0.0,0.296,0.194,0.26,0.258,0.316,0.33,0.214,0.28,0.268,0.236,0.234,0.244,0.24,0.218,0.224,0.29,0.318,0.234,0.256,0.282,0.262,0.29,0.246,0.24,0.268,0.296,0.262,0.24,0,0.234,0.234,0.34,0.0,0.312,0.32,0.314,0.0,0.286,0.234,0.234,0.268,0.258,0.0,0.206,0.234,0.0,0.302,0.234,0.304,0.294,0.194,0.332,0.276,0.292,0.208,0.322,0.234,0.0,0.336,0,0.0,0.302,0.296,0.0,0.302,0.31,0.25,0.232,0.312,0.234,0.266,0.236,0.234,0.256,0.274,0.228,0.316,0.0,0.314,0.282,0.274,0.286,0.238,0.23,0.292,0.286,0.276,0.336,0.322,0.28,0.252,0.248,0.302,0.29,0.216,0.0,0.316,0.264,0.0
44523,0.794,0.756,0.776,0.788,0.0,0.806,0.748,0.792,0.79,0.772,0.76,0.736,0.8,0.0,0.76,0.756,0.75,0.744,0.758,0.784,0.782,0.796,0.786,0.76,0.528,0.76,0.534,0.752,0.784,0.0,0.768,0.782,0.0,0.76,0.796,0.764,0.796,0.76,0.798,0,0.76,0.772,0.778,0.76,0.792,0.764,0.778,0.76,0.73,0.76,0.0,0.786,0.714,0.75,0.516,0.776,0.788,0.568,0.67,0.766,0.724,0.788,0.79,0.76,0.734,0.76,0.796,0.81,0.72,0.792,0.786,0.794,0.532,0.786,0.76,0.784,0.766,0.5,0.76,0,0.784,0.0,0.792,0.0,0.0,0.536,0.742,0.756,0.79,0.78,0.5,0.768,0.728,0.758,0.78,0.714,0.79,0.792,0.752,0.762,0.768,0.65,0.786,0.792,0.536,0.802,0.782,0.778,0.0,0.786,0,0.75,0.0,0.61,0.0,0.792,0.786,0.802,0.808,0.8,0.782,0.712,0.738,0.0,0.758,0.774,0.0,0.794,0.0,0.768,0.79,0.802,0.766,0.726,0.0,0.76,0.776,0.772,0.77,0.802,0.75,0.774,0.792,0.784,0.782,0.778,0.648,0.788,0.782,0.0
44524,0.802,0.724,0.788,0.798,0.0,0.806,0.77,0.804,0.796,0.772,0.762,0.758,0.8,0.0,0.762,0.756,0.764,0.792,0.782,0.792,0.776,0.794,0.778,0.758,0.502,0.762,0.502,0.772,0.804,0.0,0.766,0.768,0.0,0.762,0.784,0.738,0.786,0.762,0.81,0,0.762,0.792,0.78,0.758,0.808,0.75,0.78,0.76,0.75,0.762,0.0,0.786,0.732,0.758,0.5,0.77,0.784,0.668,0.68,0.778,0.762,0.786,0.798,0.762,0.73,0.762,0.802,0.79,0.726,0.794,0.794,0.798,0.578,0.786,0.76,0.78,0.762,0.5,0.762,0,0.782,0.0,0.79,0.0,0.0,0.518,0.768,0.778,0.8,0.78,0.5,0.74,0.778,0.782,0.782,0.738,0.784,0.788,0.762,0.77,0.79,0.714,0.78,0.75,0.468,0.784,0.808,0.78,0.0,0.786,0,0.784,0.0,0.628,0.0,0.804,0.788,0.796,0.786,0.798,0.776,0.742,0.732,0.0,0.736,0.748,0.0,0.804,0.0,0.788,0.808,0.804,0.764,0.758,0.0,0.762,0.8,0.784,0.77,0.798,0.774,0.776,0.778,0.79,0.79,0.794,0.648,0.79,0.814,0.0
44525,0.842,0.814,0.828,0.84,0.0,0.856,0.814,0.856,0.842,0.8,0.794,0.774,0.85,0.0,0.794,0.792,0.816,0.802,0.802,0.836,0.838,0.832,0.834,0.794,0.552,0.794,0.508,0.814,0.834,0.0,0.796,0.814,0.0,0.794,0.842,0.79,0.79,0.794,0.84,0,0.794,0.834,0.804,0.796,0.85,0.792,0.806,0.794,0.788,0.794,0.0,0.824,0.784,0.77,0.53,0.828,0.832,0.614,0.728,0.794,0.748,0.838,0.842,0.794,0.774,0.794,0.842,0.856,0.764,0.844,0.828,0.82,0.544,0.83,0.794,0.834,0.826,0.5,0.794,0,0.832,0.0,0.84,0.0,0.0,0.52,0.812,0.808,0.84,0.836,0.5,0.812,0.802,0.816,0.822,0.79,0.83,0.84,0.804,0.808,0.796,0.654,0.826,0.844,0.526,0.828,0.85,0.804,0.0,0.838,0,0.804,0.0,0.708,0.0,0.84,0.836,0.832,0.834,0.838,0.824,0.804,0.8,0.0,0.798,0.81,0.0,0.85,0.0,0.822,0.828,0.844,0.826,0.784,0.0,0.794,0.844,0.824,0.812,0.838,0.814,0.804,0.816,0.834,0.836,0.8,0.684,0.838,0.85,0.0
44526,0.796,0.76,0.794,0.794,0.0,0.804,0.758,0.794,0.794,0.78,0.768,0.766,0.802,0.0,0.768,0.762,0.758,0.776,0.706,0.788,0.788,0.808,0.784,0.768,0.47,0.768,0.514,0.76,0.782,0.0,0.732,0.8,0.0,0.762,0.796,0.79,0.768,0.768,0.802,0,0.768,0.786,0.768,0.768,0.792,0.748,0.768,0.77,0.754,0.768,0.0,0.784,0.726,0.768,0.488,0.772,0.788,0.502,0.706,0.778,0.754,0.792,0.79,0.768,0.76,0.768,0.792,0.798,0.724,0.79,0.798,0.792,0.53,0.8,0.768,0.776,0.774,0.5,0.768,0,0.788,0.0,0.8,0.616,0.0,0.55,0.76,0.742,0.79,0.794,0.5,0.754,0.756,0.76,0.79,0.738,0.794,0.796,0.75,0.774,0.766,0.664,0.788,0.794,0.532,0.788,0.808,0.768,0.0,0.792,0,0.762,0.0,0.668,0.0,0.796,0.79,0.796,0.792,0.748,0.798,0.706,0.744,0.0,0.75,0.74,0.0,0.802,0.0,0.784,0.796,0.806,0.766,0.722,0.0,0.768,0.792,0.79,0.764,0.794,0.758,0.758,0.788,0.79,0.792,0.762,0.534,0.794,0.796,0.0
44527,0.788,0.746,0.784,0.794,0.0,0.792,0.766,0.802,0.794,0.788,0.494,0.654,0.804,0.0,0.766,0.624,0.774,0.774,0.636,0.794,0.784,0.808,0.78,0.49,0.53,0.752,0.55,0.774,0.754,0.0,0.768,0.792,0.0,0.49,0.794,0.784,0.782,0.658,0.808,0,0.51,0.812,0.786,0.612,0.788,0.752,0.786,0.516,0.768,0.0,0.0,0.8,0.738,0.758,0.502,0.776,0.784,0.502,0.712,0.774,0.754,0.788,0.786,0.766,0.71,0.51,0.796,0.794,0.734,0.78,0.798,0.796,0.518,0.776,0.51,0.802,0.784,0.5,0.766,0,0.774,0.0,0.782,0.0,0.0,0.558,0.768,0.644,0.794,0.764,0.5,0.766,0.734,0.736,0.796,0.754,0.768,0.79,0.762,0.782,0.782,0.682,0.778,0.778,0.506,0.782,0.798,0.786,0.0,0.79,0,0.656,0.0,0.63,0.0,0.808,0.792,0.786,0.796,0.79,0.796,0.736,0.762,0.0,0.77,0.78,0.0,0.794,0.0,0.794,0.808,0.802,0.774,0.746,0.0,0.51,0.774,0.772,0.77,0.798,0.758,0.77,0.804,0.776,0.798,0.79,0.51,0.798,0.806,0.0
44528,0.608,0.578,0.582,0.608,0.554,0.604,0.616,0.574,0.62,0.576,0.554,0.566,0.612,0.59,0.61,0.52,0.608,0.55,0.558,0.606,0.556,0.6,0.604,0.554,0.53,0.61,0.566,0.6,0.62,0.554,0.554,0.56,0.608,0.562,0.58,0.59,0.622,0.554,0.62,0,0.476,0.542,0.598,0.56,0.6,0.546,0.598,0.554,0.56,0.554,0.598,0.564,0.556,0.578,0.534,0.568,0.592,0.546,0.6,0.6,0.566,0.61,0.606,0.61,0.532,0.476,0.594,0.62,0.554,0.608,0.616,0.566,0.534,0.574,0.56,0.586,0.538,0.554,0.61,0,0.608,0.538,0.622,0.0,0.554,0.532,0.596,0.562,0.598,0.604,0.554,0.616,0.538,0.626,0.534,0.554,0.592,0.606,0.554,0.57,0.586,0.524,0.598,0.576,0.498,0.518,0.614,0.598,0.508,0.594,0,0.616,0.554,0.534,0.598,0.596,0.624,0.606,0.534,0.564,0.56,0.572,0.562,0.554,0.596,0.572,0.558,0.588,0.486,0.564,0.616,0.564,0.566,0.552,0.0,0.56,0.534,0.588,0.594,0.608,0.596,0.598,0.554,0.614,0.608,0.57,0.602,0.596,0.584,0.616
44529,0.638,0.552,0.544,0.642,0.54,0.646,0.634,0.59,0.608,0.536,0.554,0.554,0.654,0.59,0.67,0.542,0.622,0.526,0.546,0.668,0.554,0.648,0.678,0.554,0.52,0.67,0.548,0.586,0.652,0.554,0.554,0.528,0.648,0.554,0.63,0.614,0.572,0.554,0.654,0,0.53,0.51,0.652,0.554,0.628,0.568,0.652,0.554,0.56,0.0,0.604,0.618,0.54,0.558,0.574,0.532,0.636,0.522,0.594,0.592,0.642,0.654,0.678,0.67,0.536,0.53,0.632,0.624,0.554,0.656,0.662,0.572,0.54,0.54,0.554,0.58,0.526,0.554,0.67,0,0.652,0.554,0.648,0.0,0.538,0.52,0.61,0.536,0.654,0.626,0.554,0.554,0.52,0.644,0.532,0.564,0.648,0.636,0.554,0.618,0.59,0.504,0.638,0.606,0.53,0.508,0.632,0.652,0.0,0.658,0,0.624,0.538,0.492,0.616,0.63,0.646,0.644,0.534,0.616,0.558,0.564,0.57,0.554,0.584,0.542,0.558,0.636,0.474,0.558,0.624,0.57,0.582,0.532,0.0,0.554,0.578,0.542,0.642,0.638,0.574,0.598,0.554,0.654,0.654,0.544,0.596,0.65,0.602,0.648
44530,0.644,0.6,0.578,0.604,0.516,0.604,0.604,0.596,0.64,0.548,0.554,0.572,0.626,0.618,0.616,0.568,0.58,0.588,0.608,0.608,0.598,0.624,0.614,0.52,0.542,0.616,0.536,0.552,0.634,0.554,0.554,0.556,0.63,0.554,0.61,0.604,0.592,0.554,0.62,0,0.482,0.626,0.61,0.554,0.632,0.586,0.6,0.554,0.542,0.554,0.63,0.604,0.546,0.556,0.54,0.568,0.602,0.578,0.574,0.582,0.588,0.614,0.608,0.616,0.566,0.482,0.61,0.6,0.554,0.624,0.618,0.566,0.528,0.56,0.554,0.592,0.574,0.554,0.616,0,0.614,0.554,0.604,0.0,0.514,0.506,0.6,0.59,0.612,0.608,0.554,0.636,0.558,0.622,0.552,0.53,0.614,0.608,0.554,0.574,0.624,0.518,0.63,0.636,0.534,0.56,0.642,0.61,0.52,0.604,0,0.624,0.514,0.522,0.65,0.61,0.628,0.608,0.548,0.618,0.596,0.566,0.56,0.554,0.58,0.58,0.542,0.608,0.492,0.626,0.598,0.612,0.574,0.55,0.0,0.554,0.568,0.576,0.618,0.612,0.562,0.606,0.554,0.628,0.602,0.548,0.578,0.61,0.616,0.628
44531,0.618,0.594,0.54,0.618,0.54,0.592,0.594,0.596,0.618,0.544,0.554,0.578,0.61,0.592,0.606,0.512,0.576,0.57,0.568,0.64,0.55,0.662,0.624,0.55,0.53,0.606,0.546,0.554,0.626,0.554,0.554,0.55,0.624,0.55,0.6,0.576,0.564,0.554,0.656,0,0.482,0.618,0.554,0.554,0.608,0.542,0.554,0.554,0.568,0.0,0.59,0.594,0.582,0.518,0.536,0.538,0.614,0.55,0.564,0.542,0.56,0.626,0.636,0.606,0.548,0.47,0.606,0.608,0.554,0.632,0.63,0.584,0.536,0.57,0.554,0.574,0.572,0.552,0.606,0,0.618,0.542,0.638,0.0,0.54,0.492,0.576,0.57,0.626,0.57,0.554,0.61,0.562,0.614,0.556,0.554,0.626,0.612,0.554,0.572,0.546,0.514,0.622,0.622,0.538,0.558,0.604,0.554,0.508,0.62,0,0.602,0.54,0.458,0.638,0.608,0.59,0.614,0.556,0.582,0.564,0.532,0.574,0.554,0.592,0.62,0.562,0.588,0.502,0.558,0.612,0.556,0.594,0.57,0.0,0.554,0.57,0.554,0.618,0.632,0.56,0.582,0.554,0.644,0.62,0.528,0.582,0.634,0.614,0.638
44532,0.602,0.614,0.578,0.606,0.512,0.61,0.572,0.586,0.616,0.554,0.554,0.578,0.596,0.556,0.604,0.54,0.57,0.514,0.566,0.6,0.552,0.628,0.594,0.556,0.558,0.604,0.548,0.562,0.612,0.554,0.554,0.57,0.594,0.544,0.612,0.6,0.558,0.554,0.616,0,0.496,0.608,0.592,0.502,0.618,0.566,0.592,0.554,0.574,0.0,0.572,0.59,0.536,0.57,0.49,0.526,0.618,0.538,0.584,0.552,0.598,0.584,0.588,0.604,0.558,0.496,0.626,0.596,0.554,0.586,0.614,0.57,0.538,0.566,0.554,0.592,0.546,0.554,0.604,0,0.604,0.552,0.598,0.0,0.512,0.502,0.584,0.554,0.584,0.594,0.554,0.594,0.544,0.622,0.54,0.538,0.61,0.61,0.554,0.6,0.586,0.546,0.61,0.616,0.536,0.564,0.606,0.592,0.54,0.604,0,0.61,0.512,0.518,0.602,0.616,0.606,0.606,0.526,0.604,0.568,0.538,0.572,0.554,0.604,0.6,0.55,0.588,0.492,0.588,0.612,0.592,0.566,0.538,0.0,0.502,0.588,0.562,0.614,0.594,0.56,0.572,0.554,0.6,0.596,0.554,0.574,0.604,0.59,0.616
44533,0.0,0.12,0.07,0.512,0.0,0.0,0.252,0.534,0.0,0.44,0.0,0.0,0.466,0.0,0.01,0.258,0.004,0.29,0.232,0.426,0.15,0.478,0.382,0.168,0.004,0.008,0.124,0.266,0.434,0.0,0.0,0.246,0.0,0.17,0.47,0.024,0.0,0.0,0.424,0,0.1,0.0,0.01,0.0,0.0,0.0,0.01,0.0,0.342,0.192,0.0,0.0,0.016,0.348,0.002,0.128,0.522,0.336,0.434,0.25,0.08,0.392,0.44,0.01,0.042,0.262,0.0,0.0,0.004,0.39,0.0,0.0,0.004,0.022,0.196,0.0,0.182,0.006,0.01,0,0.0,0.0,0.472,0.0,0.0,0.002,0.138,0.144,0.44,0.0,0.006,0.082,0.058,0.0,0.0,0.0,0.51,0.43,0.006,0.292,0.0,0.314,0.496,0.306,0.002,0.362,0.0,0.01,0.0,0.53,0,0.0,0.0,0.006,0.0,0.0,0.0,0.388,0.262,0.0,0.442,0.28,0.006,0.0,0.032,0.15,0.0,0.464,0.0,0.0,0.0,0.0,0.444,0.038,0.0,0.26,0.46,0.072,0.554,0.0,0.272,0.038,0.0,0.454,0.466,0.0,0.36,0.494,0.0,0.0
44534,0.0,0.134,0.07,0.486,0.0,0.0,0.262,0.0,0.0,0.404,0.0,0.0,0.438,0.0,0.01,0.236,0.002,0.26,0.202,0.418,0.13,0.486,0.366,0.148,0.004,0.008,0.158,0.256,0.412,0.0,0.0,0.24,0.0,0.16,0.458,0.022,0.0,0.0,0.398,0,0.112,0.0,0.008,0.0,0.0,0.0,0.01,0.0,0.31,0.216,0.0,0.0,0.012,0.352,0.008,0.126,0.51,0.308,0.4,0.236,0.084,0.402,0.416,0.01,0.038,0.258,0.0,0.0,0.004,0.392,0.0,0.0,0.006,0.028,0.21,0.0,0.178,0.006,0.01,0,0.0,0.0,0.466,0.0,0.0,0.002,0.12,0.14,0.43,0.0,0.006,0.084,0.07,0.0,0.0,0.0,0.51,0.456,0.006,0.256,0.0,0.346,0.484,0.33,0.004,0.366,0.0,0.008,0.0,0.512,0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.28,0.0,0.394,0.298,0.006,0.0,0.0,0.162,0.0,0.446,0.0,0.0,0.0,0.0,0.442,0.036,0.0,0.262,0.43,0.066,0.548,0.474,0.258,0.038,0.0,0.454,0.45,0.282,0.35,0.48,0.0,0.404
44535,0.0,0.148,0.072,0.514,0.0,0.0,0.03,0.0,0.0,0.464,0.0,0.0,0.474,0.0,0.01,0.304,0.008,0.294,0.216,0.434,0.16,0.546,0.404,0.166,0.006,0.01,0.158,0.132,0.472,0.0,0.0,0.294,0.0,0.172,0.504,0.022,0.0,0.0,0.456,0,0.134,0.0,0.01,0.0,0.0,0.0,0.01,0.0,0.404,0.278,0.0,0.0,0.006,0.39,0.004,0.14,0.558,0.342,0.45,0.24,0.09,0.438,0.464,0.01,0.038,0.314,0.0,0.0,0.004,0.44,0.0,0.0,0.004,0.022,0.258,0.0,0.182,0.006,0.01,0,0.0,0.0,0.56,0.0,0.0,0.002,0.14,0.146,0.472,0.0,0.006,0.074,0.072,0.0,0.0,0.0,0.552,0.48,0.006,0.318,0.0,0.366,0.534,0.316,0.0,0.36,0.0,0.01,0.0,0.574,0,0.0,0.0,0.004,0.0,0.0,0.0,0.436,0.418,0.0,0.448,0.322,0.006,0.0,0.022,0.17,0.0,0.53,0.0,0.0,0.0,0.0,0.498,0.022,0.0,0.314,0.484,0.074,0.59,0.0,0.12,0.042,0.0,0.508,0.476,0.0,0.398,0.552,0.0,0.0
44536,0.0,0.126,0.068,0.518,0.0,0.0,0.0,0.0,0.0,0.45,0.0,0.0,0.49,0.0,0.008,0.308,0.002,0.294,0.23,0.46,0.134,0.498,0.404,0.17,0.002,0.012,0.17,0.01,0.47,0.0,0.0,0.268,0.0,0.184,0.462,0.016,0.0,0.0,0.46,0,0.136,0.0,0.01,0.0,0.0,0.0,0.006,0.0,0.36,0.274,0.0,0.0,0.038,0.356,0.004,0.128,0.558,0.344,0.454,0.264,0.08,0.444,0.462,0.006,0.046,0.316,0.0,0.0,0.004,0.436,0.0,0.0,0.008,0.024,0.224,0.0,0.2,0.006,0.008,0,0.0,0.0,0.516,0.0,0.0,0.004,0.13,0.156,0.476,0.0,0.006,0.08,0.084,0.0,0.0,0.0,0.544,0.46,0.006,0.31,0.0,0.37,0.536,0.356,0.006,0.358,0.0,0.01,0.0,0.55,0,0.0,0.0,0.002,0.0,0.0,0.0,0.432,0.39,0.0,0.416,0.312,0.006,0.0,0.028,0.152,0.0,0.526,0.0,0.0,0.0,0.0,0.494,0.026,0.0,0.32,0.492,0.072,0.55,0.0,0.0,0.028,0.0,0.492,0.474,0.0,0.328,0.512,0.0,0.0
44537,0.0,0.148,0.074,0.53,0.0,0.0,0.216,0.0,0.0,0.41,0.0,0.0,0.474,0.0,0.006,0.272,0.006,0.268,0.206,0.436,0.14,0.538,0.384,0.108,0.006,0.012,0.128,0.232,0.442,0.0,0.0,0.292,0.0,0.122,0.478,0.018,0.0,0.0,0.42,0,0.12,0.0,0.008,0.0,0.0,0.0,0.008,0.0,0.384,0.234,0.0,0.0,0.018,0.328,0.002,0.114,0.544,0.346,0.438,0.286,0.074,0.414,0.422,0.008,0.042,0.268,0.0,0.0,0.004,0.424,0.0,0.0,0.004,0.024,0.21,0.0,0.164,0.006,0.006,0,0.0,0.0,0.532,0.0,0.0,0.0,0.118,0.134,0.452,0.0,0.006,0.066,0.076,0.0,0.0,0.0,0.52,0.46,0.006,0.284,0.0,0.36,0.526,0.322,0.0,0.35,0.0,0.008,0.0,0.582,0,0.0,0.0,0.004,0.0,0.0,0.0,0.0,0.39,0.0,0.41,0.278,0.008,0.0,0.0,0.17,0.0,0.502,0.0,0.0,0.0,0.0,0.452,0.022,0.0,0.27,0.484,0.078,0.566,0.482,0.226,0.032,0.0,0.47,0.49,0.0,0.368,0.504,0.0,0.0
44538,0.68,0.612,0.6,0.658,0.0,0.686,0.596,0.692,0.674,0.61,0.618,0.65,0.682,0.0,0.634,0.574,0.654,0.6,0.578,0.674,0.582,0.664,0.668,0.562,0.528,0.634,0.546,0.59,0.668,0.0,0.5,0.6,0.0,0.56,0.61,0.572,0.648,0.61,0.65,0,0.616,0.64,0.588,0.584,0.66,0.616,0.588,0.614,0.616,0.612,0.0,0.672,0.582,0.528,0.494,0.584,0.666,0.558,0.496,0.53,0.562,0.674,0.7,0.634,0.568,0.606,0.626,0.668,0.5,0.656,0.656,0.648,0.478,0.634,0.624,0.666,0.604,0.562,0.634,0,0.658,0.0,0.646,0.0,0.0,0.522,0.636,0.606,0.654,0.642,0.5,0.608,0.568,0.674,0.608,0.572,0.626,0.616,0.514,0.548,0.652,0.614,0.672,0.666,0.446,0.588,0.678,0.588,0.0,0.666,0,0.66,0.0,0.502,0.0,0.652,0.684,0.678,0.594,0.68,0.644,0.678,0.608,0.0,0.57,0.634,0.0,0.678,0.542,0.674,0.612,0.664,0.578,0.618,0.0,0.606,0.676,0.598,0.648,0.696,0.578,0.626,0.498,0.666,0.672,0.644,0.57,0.68,0.694,0.0

0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44439,0.576,0.596,0.526,0.612,0.516,0.59,0.514,0.596,0.6,0.598,0.528,0.55,0.61,0.0,0.534,0.54,0.542,0.554,0.566,0.594,0.574,0.532,0.608,0.542,0.512,0.534,0.52,0.502,0.618,0.568,0.5,0.56,0.614,0.532,0.608,0.572,0.578,0.55,0.604,0,0.538,0.534,0.528,0.55,0.606,0.568,0.528,0.524,0.534,0.0,0.0,0.612,0.562,0.51,0.486,0.54,0.65,0.546,0.57,0.552,0.548,0.6,0.602,0.534,0.542,0.534,0.612,0.6,0.5,0.618,0.592,0.558,0.458,0.574,0.52,0.594,0.548,0.52,0.534,0,0.578,0.0,0.618,0,0.0,0.478,0.568,0.574,0.606,0.55,0.5,0.592,0.544,0.582,0.57,0.524,0.642,0.592,0.524,0.522,0.584,0.518,0.64,0.582,0.512,0.534,0.61,0.528,0.502,0.644,0,0.566,0.0,0.502,0.586,0.598,0.59,0.578,0.502,0.58,0.578,0.582,0.578,0.0,0.56,0.556,0.0,0.598,0.484,0.548,0.58,0.556,0.518,0.548,0,0.534,0.622,0.546,0.634,0.592,0.5,0.516,0.582,0.62,0.602,0.576,0.546,0.614,0.578,0.616
44440,0.592,0.576,0.532,0.586,0.516,0.582,0.528,0.598,0.62,0.552,0.552,0.542,0.572,0.0,0.526,0.474,0.534,0.576,0.544,0.574,0.524,0.5,0.556,0.536,0.526,0.526,0.562,0.526,0.56,0.596,0.5,0.522,0.618,0.492,0.574,0.558,0.582,0.56,0.542,0,0.558,0.5,0.518,0.544,0.582,0.538,0.518,0.544,0.576,0.55,0.0,0.57,0.554,0.494,0.52,0.556,0.59,0.538,0.568,0.534,0.54,0.576,0.574,0.526,0.558,0.552,0.558,0.55,0.5,0.56,0.56,0.566,0.52,0.492,0.544,0.558,0.558,0.502,0.526,0,0.552,0.0,0.554,0,0.0,0.48,0.508,0.558,0.558,0.546,0.5,0.516,0.524,0.556,0.534,0.5,0.578,0.576,0.528,0.538,0.606,0.554,0.584,0.562,0.484,0.0,0.562,0.518,0.0,0.566,0,0.59,0.0,0.494,0.586,0.592,0.546,0.56,0.496,0.568,0.556,0.574,0.558,0.0,0.566,0.516,0.0,0.572,0.518,0.588,0.58,0.5,0.526,0.538,0,0.552,0.594,0.516,0.6,0.582,0.516,0.546,0.494,0.582,0.562,0.566,0.522,0.562,0.5,0.598
44441,0.572,0.52,0.474,0.574,0.0,0.578,0.512,0.58,0.552,0.542,0.556,0.576,0.564,0.0,0.562,0.464,0.552,0.5,0.498,0.568,0.492,0.578,0.568,0.538,0.504,0.562,0.522,0.498,0.566,0.58,0.5,0.536,0.574,0.524,0.564,0.546,0.596,0.554,0.584,0,0.56,0.578,0.528,0.538,0.594,0.55,0.528,0.524,0.542,0.554,0.0,0.586,0.568,0.54,0.498,0.502,0.582,0.556,0.538,0.558,0.56,0.568,0.556,0.562,0.526,0.56,0.554,0.562,0.5,0.566,0.586,0.55,0.488,0.55,0.558,0.596,0.492,0.526,0.562,0,0.57,0.0,0.582,0,0.0,0.514,0.566,0.506,0.568,0.564,0.5,0.59,0.52,0.584,0.558,0.52,0.59,0.562,0.49,0.55,0.574,0.552,0.572,0.564,0.458,0.54,0.596,0.528,0.462,0.554,0,0.564,0.0,0.524,0.574,0.566,0.53,0.588,0.544,0.582,0.568,0.556,0.534,0.0,0.566,0.56,0.0,0.552,0.508,0.57,0.568,0.578,0.576,0.544,0,0.56,0.558,0.48,0.572,0.606,0.486,0.548,0.53,0.562,0.556,0.542,0.506,0.556,0.578,0.566
44442,0.588,0.582,0.562,0.552,0.0,0.558,0.518,0.576,0.57,0.568,0.502,0.584,0.562,0.0,0.566,0.494,0.534,0.556,0.534,0.558,0.514,0.544,0.572,0.476,0.486,0.566,0.52,0.55,0.556,0.568,0.5,0.538,0.586,0.484,0.59,0.56,0.524,0.528,0.562,0,0.508,0.534,0.542,0.502,0.548,0.54,0.544,0.5,0.546,0.0,0.0,0.54,0.598,0.542,0.528,0.52,0.58,0.542,0.536,0.552,0.526,0.564,0.57,0.566,0.542,0.506,0.572,0.564,0.5,0.566,0.582,0.548,0.516,0.548,0.51,0.54,0.544,0.51,0.566,0,0.562,0.0,0.546,0,0.0,0.518,0.55,0.556,0.554,0.556,0.5,0.548,0.526,0.556,0.578,0.536,0.574,0.576,0.53,0.528,0.56,0.504,0.59,0.564,0.52,0.51,0.568,0.542,0.504,0.574,0,0.574,0.0,0.5,0.548,0.574,0.564,0.552,0.53,0.598,0.542,0.558,0.556,0.0,0.498,0.594,0.0,0.578,0.51,0.536,0.562,0.544,0.556,0.55,0,0.506,0.568,0.56,0.602,0.558,0.556,0.532,0.576,0.578,0.554,0.586,0.516,0.574,0.544,0.586
44443,0.76,0.776,0.712,0.748,0.0,0.75,0.732,0.784,0.756,0.742,0.544,0.728,0.756,0.0,0.732,0.544,0.738,0.772,0.762,0.742,0.738,0.73,0.742,0.544,0.516,0.732,0.684,0.738,0.752,0.766,0.5,0.738,0.776,0.544,0.778,0.706,0.76,0.544,0.734,0,0.544,0.714,0.71,0.544,0.768,0.708,0.71,0.548,0.712,0.0,0.0,0.74,0.596,0.706,0.522,0.738,0.764,0.744,0.704,0.696,0.728,0.736,0.744,0.732,0.676,0.544,0.772,0.742,0.5,0.75,0.736,0.686,0.5,0.618,0.544,0.738,0.746,0.498,0.732,0,0.73,0.0,0.746,0,0.0,0.52,0.73,0.74,0.75,0.728,0.5,0.736,0.714,0.74,0.752,0.604,0.754,0.768,0.634,0.676,0.734,0.604,0.762,0.714,0.47,0.666,0.776,0.71,0.498,0.762,0,0.726,0.0,0.504,0.0,0.778,0.742,0.75,0.724,0.772,0.71,0.736,0.594,0.0,0.754,0.768,0.0,0.75,0.546,0.766,0.772,0.732,0.742,0.598,0,0.544,0.728,0.712,0.78,0.756,0.738,0.738,0.698,0.75,0.752,0.742,0.696,0.766,0.728,0.768
44444,0.806,0.776,0.692,0.79,0.0,0.808,0.812,0.818,0.8,0.766,0.522,0.758,0.8,0.0,0.756,0.508,0.792,0.778,0.768,0.778,0.76,0.778,0.772,0.522,0.478,0.756,0.708,0.814,0.782,0.812,0.5,0.786,0.824,0.522,0.836,0.74,0.824,0.522,0.786,0,0.522,0.76,0.734,0.522,0.802,0.776,0.734,0.516,0.786,0.0,0.0,0.802,0.578,0.722,0.53,0.752,0.818,0.776,0.732,0.72,0.766,0.772,0.768,0.756,0.698,0.522,0.808,0.792,0.5,0.774,0.786,0.796,0.48,0.59,0.522,0.798,0.77,0.5,0.756,0,0.774,0.0,0.786,0,0.0,0.508,0.776,0.734,0.78,0.774,0.5,0.758,0.676,0.794,0.778,0.632,0.816,0.808,0.648,0.716,0.808,0.612,0.8,0.754,0.53,0.696,0.826,0.734,0.0,0.812,0,0.78,0.0,0.472,0.0,0.818,0.786,0.78,0.712,0.806,0.754,0.756,0.602,0.0,0.788,0.784,0.0,0.79,0.538,0.816,0.804,0.716,0.746,0.566,0,0.522,0.806,0.692,0.822,0.802,0.808,0.768,0.642,0.786,0.788,0.778,0.746,0.786,0.77,0.79
44445,0.756,0.716,0.692,0.782,0.0,0.75,0.734,0.77,0.774,0.74,0.53,0.7,0.746,0.0,0.7,0.5,0.74,0.736,0.738,0.744,0.716,0.736,0.74,0.498,0.53,0.7,0.692,0.728,0.75,0.756,0.5,0.73,0.764,0.53,0.774,0.708,0.774,0.53,0.742,0,0.528,0.692,0.68,0.53,0.752,0.744,0.68,0.528,0.74,0.0,0.0,0.772,0.568,0.7,0.496,0.682,0.79,0.756,0.716,0.738,0.738,0.748,0.752,0.7,0.696,0.528,0.766,0.75,0.5,0.746,0.736,0.71,0.526,0.582,0.53,0.774,0.718,0.5,0.7,0,0.724,0.0,0.772,0,0.0,0.484,0.744,0.698,0.752,0.724,0.5,0.678,0.664,0.738,0.77,0.58,0.76,0.758,0.638,0.712,0.766,0.622,0.772,0.682,0.528,0.65,0.754,0.68,0.0,0.776,0,0.748,0.0,0.498,0.0,0.754,0.758,0.746,0.7,0.738,0.756,0.728,0.578,0.0,0.728,0.714,0.0,0.758,0.544,0.772,0.764,0.728,0.762,0.574,0,0.528,0.774,0.672,0.782,0.77,0.722,0.752,0.666,0.754,0.764,0.746,0.698,0.778,0.738,0.754
44446,0.792,0.748,0.718,0.766,0.0,0.768,0.77,0.782,0.778,0.764,0.532,0.728,0.774,0.0,0.728,0.538,0.758,0.756,0.764,0.754,0.772,0.752,0.764,0.5,0.53,0.728,0.688,0.77,0.756,0.776,0.5,0.746,0.79,0.532,0.788,0.75,0.782,0.532,0.75,0,0.538,0.71,0.714,0.532,0.788,0.758,0.714,0.538,0.712,0.506,0.0,0.768,0.58,0.682,0.504,0.728,0.778,0.76,0.708,0.722,0.718,0.766,0.76,0.728,0.69,0.538,0.79,0.744,0.5,0.76,0.756,0.74,0.506,0.638,0.532,0.78,0.742,0.5,0.728,0,0.752,0.0,0.776,0,0.0,0.49,0.762,0.758,0.768,0.74,0.5,0.744,0.726,0.764,0.748,0.596,0.782,0.778,0.704,0.694,0.746,0.608,0.778,0.734,0.502,0.642,0.784,0.714,0.0,0.774,0,0.742,0.0,0.478,0.0,0.788,0.784,0.762,0.652,0.776,0.748,0.75,0.59,0.0,0.732,0.724,0.0,0.77,0.556,0.768,0.782,0.694,0.736,0.562,0,0.538,0.796,0.718,0.768,0.776,0.744,0.768,0.726,0.76,0.776,0.768,0.742,0.774,0.74,0.776
44447,0.778,0.764,0.684,0.772,0.0,0.776,0.75,0.784,0.788,0.762,0.538,0.692,0.78,0.0,0.744,0.46,0.77,0.738,0.708,0.776,0.704,0.776,0.784,0.5,0.498,0.744,0.668,0.764,0.784,0.78,0.5,0.754,0.796,0.498,0.784,0.744,0.756,0.538,0.774,0,0.534,0.776,0.684,0.538,0.772,0.732,0.684,0.536,0.718,0.0,0.0,0.78,0.57,0.694,0.5,0.72,0.794,0.75,0.726,0.726,0.72,0.78,0.778,0.744,0.636,0.532,0.78,0.752,0.5,0.782,0.76,0.73,0.5,0.61,0.538,0.79,0.71,0.5,0.744,0,0.754,0.0,0.78,0,0.0,0.498,0.764,0.704,0.776,0.744,0.5,0.734,0.718,0.774,0.764,0.63,0.79,0.788,0.618,0.706,0.776,0.63,0.796,0.758,0.5,0.692,0.78,0.684,0.0,0.79,0,0.756,0.0,0.478,0.0,0.786,0.788,0.77,0.72,0.768,0.712,0.744,0.572,0.0,0.738,0.72,0.0,0.772,0.544,0.77,0.786,0.72,0.754,0.576,0,0.532,0.74,0.68,0.804,0.792,0.766,0.73,0.588,0.788,0.772,0.732,0.704,0.788,0.764,0.766
44448,0.716,0.678,0.626,0.708,0.6,0.742,0.606,0.714,0.732,0.636,0.488,0.592,0.746,0.738,0.588,0.524,0.602,0.65,0.652,0.694,0.648,0.64,0.696,0.512,0.496,0.588,0.6,0.606,0.718,0.758,0.542,0.628,0.748,0.504,0.7,0.626,0.714,0.506,0.71,0,0.488,0.688,0.588,0.54,0.736,0.71,0.588,0.488,0.568,0.0,0.742,0.702,0.584,0.58,0.518,0.618,0.746,0.606,0.634,0.568,0.628,0.702,0.688,0.588,0.61,0.488,0.732,0.756,0.5,0.69,0.688,0.676,0.496,0.572,0.472,0.706,0.65,0.582,0.588,0,0.65,0.582,0.69,0,0.6,0.522,0.596,0.638,0.678,0.64,0.5,0.674,0.578,0.698,0.63,0.532,0.708,0.706,0.568,0.618,0.724,0.548,0.718,0.642,0.514,0.696,0.774,0.588,0.49,0.704,0,0.688,0.6,0.478,0.754,0.712,0.69,0.694,0.618,0.754,0.646,0.634,0.578,0.5,0.632,0.704,0.602,0.718,0.584,0.758,0.718,0.676,0.638,0.608,0,0.488,0.708,0.62,0.784,0.716,0.61,0.668,0.68,0.716,0.688,0.65,0.552,0.698,0.67,0.736
44449,0.7,0.664,0.61,0.64,0.582,0.694,0.594,0.68,0.708,0.628,0.49,0.594,0.692,0.668,0.592,0.496,0.598,0.64,0.616,0.638,0.612,0.638,0.638,0.468,0.49,0.592,0.586,0.588,0.666,0.714,0.536,0.604,0.742,0.464,0.686,0.604,0.742,0.468,0.614,0,0.468,0.706,0.596,0.486,0.708,0.7,0.596,0.494,0.608,0.51,0.688,0.656,0.548,0.564,0.496,0.59,0.71,0.592,0.61,0.586,0.622,0.634,0.646,0.592,0.598,0.468,0.66,0.72,0.5,0.666,0.652,0.658,0.498,0.598,0.466,0.652,0.598,0.556,0.592,0,0.622,0.588,0.628,0,0.58,0.524,0.58,0.618,0.658,0.592,0.5,0.666,0.624,0.702,0.648,0.526,0.69,0.664,0.576,0.596,0.718,0.598,0.694,0.648,0.506,0.706,0.718,0.596,0.49,0.682,0,0.702,0.58,0.524,0.692,0.646,0.686,0.656,0.59,0.71,0.574,0.588,0.594,0.5,0.654,0.67,0.614,0.666,0.574,0.73,0.652,0.642,0.622,0.57,0,0.468,0.686,0.612,0.72,0.678,0.58,0.63,0.67,0.68,0.642,0.644,0.57,0.68,0.664,0.696
44450,0.708,0.666,0.566,0.64,0.548,0.712,0.602,0.684,0.714,0.586,0.528,0.586,0.694,0.692,0.624,0.55,0.598,0.654,0.62,0.624,0.61,0.61,0.628,0.532,0.488,0.624,0.54,0.604,0.65,0.698,0.554,0.556,0.732,0.528,0.69,0.62,0.722,0.518,0.656,0,0.518,0.664,0.612,0.528,0.708,0.682,0.612,0.53,0.59,0.518,0.71,0.684,0.578,0.582,0.49,0.612,0.69,0.586,0.644,0.58,0.666,0.62,0.632,0.624,0.522,0.518,0.688,0.694,0.5,0.646,0.644,0.598,0.51,0.584,0.528,0.66,0.62,0.548,0.624,0,0.622,0.598,0.67,0,0.548,0.486,0.59,0.588,0.644,0.632,0.5,0.668,0.6,0.678,0.574,0.542,0.67,0.682,0.604,0.596,0.714,0.516,0.698,0.64,0.534,0.64,0.72,0.612,0.472,0.67,0,0.68,0.548,0.48,0.726,0.692,0.696,0.67,0.654,0.686,0.572,0.584,0.578,0.5,0.68,0.648,0.534,0.668,0.552,0.726,0.692,0.71,0.638,0.566,0,0.518,0.678,0.566,0.724,0.666,0.604,0.652,0.666,0.654,0.628,0.598,0.544,0.674,0.726,0.7
44451,0.694,0.69,0.612,0.658,0.584,0.69,0.606,0.7,0.702,0.644,0.544,0.626,0.684,0.722,0.622,0.504,0.61,0.6,0.618,0.656,0.622,0.624,0.67,0.538,0.544,0.622,0.584,0.61,0.674,0.714,0.55,0.618,0.72,0.522,0.694,0.62,0.704,0.542,0.652,0,0.542,0.68,0.612,0.544,0.712,0.688,0.608,0.546,0.612,0.0,0.736,0.676,0.562,0.578,0.494,0.564,0.672,0.614,0.644,0.622,0.63,0.668,0.676,0.622,0.59,0.544,0.688,0.702,0.5,0.66,0.648,0.616,0.49,0.638,0.542,0.634,0.604,0.572,0.622,0,0.616,0.616,0.666,0,0.584,0.518,0.606,0.598,0.654,0.638,0.5,0.676,0.622,0.686,0.626,0.584,0.678,0.696,0.59,0.646,0.708,0.574,0.682,0.656,0.51,0.636,0.72,0.612,0.548,0.664,0,0.682,0.584,0.514,0.714,0.672,0.678,0.66,0.604,0.736,0.596,0.592,0.624,0.5,0.676,0.708,0.53,0.66,0.576,0.722,0.702,0.666,0.648,0.572,0,0.544,0.678,0.602,0.716,0.68,0.612,0.71,0.666,0.674,0.644,0.628,0.57,0.67,0.692,0.694
44452,0.704,0.616,0.58,0.652,0.55,0.716,0.596,0.704,0.666,0.584,0.534,0.564,0.664,0.662,0.614,0.496,0.596,0.612,0.598,0.634,0.614,0.58,0.63,0.504,0.562,0.614,0.552,0.604,0.672,0.702,0.488,0.55,0.734,0.504,0.692,0.626,0.724,0.524,0.656,0,0.524,0.66,0.586,0.542,0.7,0.702,0.586,0.528,0.588,0.492,0.67,0.682,0.544,0.59,0.522,0.596,0.718,0.562,0.606,0.588,0.652,0.626,0.618,0.614,0.558,0.526,0.7,0.71,0.5,0.636,0.652,0.606,0.524,0.616,0.534,0.648,0.608,0.554,0.614,0,0.616,0.566,0.694,0,0.55,0.498,0.598,0.592,0.64,0.594,0.5,0.638,0.608,0.678,0.572,0.532,0.692,0.664,0.546,0.616,0.712,0.52,0.7,0.628,0.492,0.678,0.722,0.586,0.49,0.696,0,0.668,0.55,0.444,0.708,0.686,0.662,0.648,0.604,0.69,0.596,0.578,0.53,0.5,0.648,0.66,0.548,0.64,0.58,0.716,0.698,0.642,0.622,0.568,0,0.526,0.668,0.572,0.73,0.668,0.596,0.646,0.658,0.68,0.63,0.564,0.53,0.694,0.646,0.71
44453,0.714,0.704,0.534,0.726,0.0,0.736,0.578,0.728,0.752,0.722,0.57,0.658,0.734,0.0,0.704,0.528,0.654,0.55,0.576,0.716,0.552,0.716,0.714,0.518,0.526,0.704,0.636,0.572,0.716,0.722,0.5,0.72,0.744,0.444,0.734,0.688,0.728,0.572,0.722,0,0.558,0.69,0.688,0.562,0.734,0.692,0.688,0.57,0.616,0.0,0.0,0.702,0.468,0.652,0.522,0.554,0.722,0.67,0.69,0.698,0.694,0.714,0.716,0.704,0.676,0.558,0.712,0.716,0.5,0.72,0.724,0.62,0.508,0.68,0.574,0.724,0.56,0.532,0.704,0,0.714,0.0,0.712,0,0.0,0.522,0.706,0.558,0.716,0.708,0.5,0.71,0.686,0.68,0.75,0.652,0.716,0.722,0.56,0.682,0.72,0.53,0.714,0.696,0.506,0.704,0.736,0.688,0.5,0.722,0,0.662,0.0,0.498,0.732,0.722,0.734,0.736,0.65,0.732,0.708,0.71,0.578,0.0,0.68,0.676,0.0,0.748,0.0,0.716,0.71,0.676,0.704,0.552,0,0.558,0.698,0.546,0.734,0.736,0.572,0.7,0.576,0.72,0.724,0.712,0.576,0.724,0.702,0.716
44454,0.708,0.642,0.524,0.712,0.0,0.71,0.546,0.706,0.704,0.694,0.5,0.606,0.716,0.0,0.678,0.504,0.658,0.544,0.524,0.708,0.502,0.674,0.692,0.496,0.504,0.678,0.596,0.548,0.72,0.732,0.5,0.666,0.712,0.502,0.726,0.678,0.7,0.506,0.684,0,0.498,0.682,0.678,0.5,0.706,0.654,0.678,0.496,0.584,0.0,0.0,0.672,0.492,0.63,0.508,0.54,0.73,0.646,0.674,0.682,0.644,0.702,0.694,0.678,0.716,0.496,0.738,0.676,0.5,0.704,0.702,0.698,0.502,0.66,0.504,0.69,0.54,0.522,0.678,0,0.68,0.0,0.704,0,0.0,0.506,0.672,0.524,0.716,0.676,0.5,0.664,0.664,0.654,0.738,0.636,0.728,0.71,0.504,0.676,0.676,0.556,0.724,0.658,0.478,0.678,0.728,0.678,0.498,0.736,0,0.624,0.0,0.544,0.724,0.736,0.686,0.712,0.664,0.696,0.68,0.624,0.56,0.0,0.726,0.658,0.0,0.708,0.0,0.718,0.718,0.67,0.668,0.548,0,0.496,0.708,0.512,0.724,0.722,0.548,0.644,0.572,0.716,0.718,0.72,0.566,0.728,0.684,0.702
44455,0.724,0.684,0.512,0.69,0.0,0.738,0.56,0.718,0.7,0.658,0.5,0.618,0.708,0.0,0.65,0.478,0.66,0.53,0.512,0.676,0.504,0.67,0.672,0.492,0.472,0.65,0.56,0.588,0.692,0.758,0.5,0.73,0.736,0.478,0.722,0.66,0.712,0.496,0.688,0,0.488,0.674,0.622,0.546,0.72,0.62,0.622,0.496,0.618,0.0,0.0,0.662,0.494,0.636,0.452,0.486,0.694,0.666,0.646,0.638,0.648,0.666,0.67,0.65,0.698,0.488,0.74,0.71,0.5,0.682,0.68,0.68,0.462,0.626,0.49,0.682,0.518,0.51,0.65,0,0.658,0.0,0.686,0,0.0,0.464,0.658,0.494,0.676,0.648,0.5,0.662,0.644,0.646,0.716,0.638,0.712,0.712,0.488,0.64,0.676,0.602,0.718,0.69,0.488,0.65,0.72,0.622,0.0,0.706,0,0.622,0.0,0.502,0.722,0.746,0.702,0.706,0.668,0.726,0.65,0.646,0.548,0.0,0.678,0.7,0.0,0.716,0.0,0.732,0.732,0.68,0.666,0.542,0,0.488,0.69,0.508,0.72,0.714,0.586,0.704,0.534,0.706,0.674,0.7,0.55,0.698,0.702,0.71
44456,0.686,0.674,0.544,0.686,0.0,0.704,0.568,0.702,0.704,0.672,0.528,0.662,0.7,0.0,0.66,0.542,0.642,0.508,0.528,0.688,0.544,0.67,0.696,0.508,0.518,0.66,0.556,0.58,0.698,0.708,0.5,0.66,0.69,0.518,0.732,0.642,0.69,0.552,0.686,0,0.53,0.682,0.616,0.532,0.696,0.662,0.616,0.538,0.614,0.0,0.0,0.704,0.504,0.622,0.49,0.504,0.7,0.654,0.674,0.674,0.642,0.682,0.698,0.66,0.694,0.53,0.706,0.688,0.5,0.686,0.692,0.66,0.488,0.634,0.524,0.686,0.518,0.516,0.66,0,0.672,0.0,0.694,0,0.0,0.522,0.662,0.522,0.696,0.662,0.5,0.654,0.65,0.65,0.708,0.616,0.694,0.712,0.524,0.654,0.674,0.604,0.706,0.692,0.502,0.66,0.716,0.616,0.53,0.71,0,0.664,0.0,0.514,0.702,0.698,0.71,0.7,0.602,0.694,0.666,0.65,0.594,0.0,0.686,0.686,0.0,0.672,0.0,0.716,0.7,0.678,0.668,0.604,0,0.53,0.676,0.534,0.674,0.712,0.58,0.674,0.574,0.706,0.688,0.724,0.592,0.704,0.686,0.672
44457,0.696,0.644,0.492,0.686,0.0,0.69,0.578,0.7,0.71,0.652,0.554,0.614,0.702,0.0,0.638,0.474,0.666,0.55,0.526,0.672,0.528,0.656,0.666,0.478,0.518,0.638,0.62,0.58,0.682,0.71,0.5,0.692,0.714,0.51,0.7,0.642,0.674,0.57,0.668,0,0.55,0.66,0.622,0.556,0.686,0.662,0.622,0.558,0.62,0.0,0.0,0.682,0.554,0.624,0.54,0.536,0.698,0.634,0.646,0.652,0.662,0.664,0.678,0.638,0.696,0.55,0.7,0.682,0.5,0.674,0.682,0.708,0.498,0.656,0.552,0.674,0.542,0.502,0.638,0,0.678,0.0,0.684,0,0.0,0.472,0.64,0.526,0.674,0.676,0.5,0.672,0.66,0.696,0.724,0.616,0.7,0.696,0.476,0.652,0.69,0.592,0.694,0.668,0.504,0.642,0.688,0.622,0.514,0.682,0,0.674,0.0,0.498,0.728,0.708,0.732,0.704,0.532,0.686,0.642,0.642,0.55,0.0,0.678,0.624,0.0,0.7,0.0,0.704,0.698,0.61,0.66,0.552,0,0.55,0.696,0.504,0.698,0.714,0.58,0.684,0.558,0.696,0.676,0.682,0.598,0.688,0.654,0.706
44458,0.712,0.676,0.642,0.686,0.0,0.714,0.696,0.702,0.73,0.698,0.65,0.716,0.71,0.7,0.64,0.594,0.692,0.69,0.666,0.676,0.658,0.676,0.676,0.636,0.48,0.64,0.588,0.68,0.678,0.712,0.544,0.638,0.702,0.64,0.704,0.688,0.696,0.638,0.69,0,0.634,0.678,0.638,0.596,0.714,0.64,0.638,0.642,0.662,0.64,0.694,0.714,0.6,0.616,0.48,0.68,0.692,0.696,0.612,0.644,0.662,0.678,0.678,0.64,0.686,0.642,0.72,0.7,0.5,0.686,0.718,0.706,0.496,0.712,0.65,0.714,0.67,0.562,0.64,0,0.704,0.0,0.708,0,0.0,0.512,0.684,0.656,0.69,0.712,0.5,0.67,0.676,0.712,0.69,0.688,0.704,0.712,0.604,0.65,0.662,0.66,0.68,0.694,0.516,0.64,0.712,0.638,0.502,0.676,0,0.7,0.0,0.472,0.708,0.726,0.728,0.7,0.636,0.694,0.662,0.648,0.64,0.0,0.68,0.694,0.0,0.706,0.558,0.694,0.72,0.712,0.666,0.634,0,0.642,0.668,0.65,0.696,0.712,0.688,0.684,0.71,0.69,0.68,0.688,0.602,0.692,0.712,0.702

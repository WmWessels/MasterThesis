0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44499,0.776,0.732,0.712,0.76,0.624,0.768,0.772,0.756,0.788,0.728,0.712,0.7,0.764,0.72,0.7,0.716,0.764,0.704,0.704,0.752,0.716,0.736,0.764,0.712,0.7,0.7,0.696,0.796,0.776,0.7,0.7,0.728,0.78,0.732,0.756,0.788,0.788,0.7,0.744,0,0.736,0.752,0.7,0.76,0.772,0.736,0.7,0.7,0.764,0.708,0.72,0.784,0.652,0.732,0.692,0.708,0.76,0.72,0.7,0.752,0.764,0.752,0.756,0.7,0.696,0.696,0.768,0.776,0.3,0.752,0.716,0.784,0.7,0.732,0.74,0.776,0.688,0.7,0.7,0,0.7,0.7,0.76,0.604,0.628,0.672,0.76,0.7,0.756,0.7,0.7,0.688,0.716,0.704,0.752,0.704,0.792,0.748,0.7,0.74,0.756,0.664,0.764,0.772,0.7,0.712,0.772,0.7,0.672,0.752,0,0.668,0.628,0.664,0.784,0.776,0.768,0.724,0.696,0.764,0.724,0.756,0.704,0.7,0.7,0.728,0.7,0.728,0.604,0.732,0.792,0.772,0.744,0.696,0.0,0.736,0.756,0.708,0.748,0.74,0.792,0.736,0.7,0.768,0.748,0.744,0.712,0.76,0.748,0.744
44500,0.756,0.724,0.712,0.756,0.624,0.768,0.776,0.748,0.764,0.748,0.712,0.7,0.768,0.716,0.7,0.716,0.764,0.704,0.704,0.76,0.716,0.736,0.752,0.712,0.7,0.7,0.672,0.796,0.772,0.7,0.7,0.724,0.784,0.732,0.768,0.788,0.744,0.7,0.748,0,0.736,0.728,0.7,0.78,0.784,0.728,0.7,0.7,0.752,0.708,0.728,0.764,0.652,0.732,0.704,0.708,0.752,0.728,0.7,0.752,0.764,0.76,0.768,0.7,0.74,0.696,0.788,0.776,0.3,0.752,0.72,0.78,0.7,0.732,0.732,0.74,0.688,0.7,0.7,0,0.7,0.7,0.764,0.62,0.628,0.672,0.76,0.7,0.768,0.7,0.7,0.688,0.716,0.696,0.744,0.704,0.784,0.728,0.7,0.74,0.744,0.66,0.764,0.768,0.696,0.712,0.772,0.7,0.72,0.764,0,0.656,0.628,0.66,0.772,0.76,0.768,0.732,0.696,0.76,0.712,0.756,0.708,0.7,0.712,0.724,0.7,0.752,0.604,0.748,0.788,0.764,0.744,0.704,0.0,0.736,0.752,0.708,0.732,0.752,0.792,0.736,0.7,0.764,0.764,0.748,0.712,0.768,0.752,0.764
44501,0.768,0.724,0.712,0.764,0.624,0.78,0.776,0.764,0.768,0.728,0.712,0.7,0.768,0.704,0.7,0.716,0.764,0.704,0.704,0.756,0.716,0.728,0.756,0.712,0.7,0.7,0.696,0.796,0.768,0.7,0.7,0.72,0.768,0.732,0.776,0.788,0.76,0.7,0.752,0,0.736,0.736,0.7,0.708,0.772,0.744,0.7,0.7,0.764,0.708,0.724,0.768,0.652,0.732,0.7,0.708,0.748,0.724,0.7,0.752,0.764,0.76,0.752,0.7,0.748,0.696,0.776,0.776,0.3,0.748,0.704,0.756,0.7,0.732,0.732,0.772,0.688,0.7,0.7,0,0.7,0.7,0.776,0.696,0.628,0.68,0.76,0.7,0.76,0.7,0.7,0.688,0.712,0.7,0.776,0.704,0.772,0.752,0.7,0.74,0.752,0.672,0.756,0.768,0.704,0.712,0.78,0.7,0.644,0.756,0,0.664,0.628,0.616,0.792,0.764,0.736,0.72,0.696,0.764,0.72,0.756,0.704,0.7,0.704,0.724,0.7,0.752,0.604,0.78,0.776,0.776,0.744,0.696,0.0,0.736,0.776,0.708,0.756,0.752,0.792,0.736,0.7,0.776,0.768,0.756,0.712,0.752,0.74,0.756
44502,0.772,0.732,0.712,0.764,0.624,0.772,0.776,0.768,0.756,0.732,0.716,0.7,0.764,0.72,0.7,0.716,0.764,0.704,0.704,0.752,0.716,0.752,0.748,0.712,0.692,0.7,0.696,0.796,0.768,0.7,0.7,0.708,0.784,0.732,0.768,0.788,0.764,0.7,0.76,0,0.736,0.74,0.7,0.736,0.76,0.752,0.7,0.7,0.76,0.708,0.744,0.752,0.652,0.732,0.7,0.708,0.748,0.716,0.7,0.752,0.764,0.752,0.756,0.7,0.732,0.696,0.764,0.772,0.3,0.748,0.712,0.776,0.7,0.732,0.732,0.748,0.688,0.7,0.7,0,0.7,0.712,0.752,0.616,0.628,0.696,0.76,0.7,0.78,0.7,0.7,0.688,0.72,0.716,0.744,0.704,0.772,0.748,0.7,0.74,0.756,0.64,0.764,0.768,0.7,0.712,0.776,0.7,0.644,0.768,0,0.684,0.628,0.648,0.78,0.772,0.764,0.732,0.696,0.76,0.732,0.756,0.704,0.7,0.696,0.728,0.7,0.752,0.604,0.76,0.78,0.772,0.744,0.704,0.0,0.736,0.772,0.708,0.732,0.748,0.792,0.736,0.7,0.752,0.756,0.74,0.712,0.748,0.752,0.76
44503,0.757201646090535,0.7139917695473251,0.4835390946502058,0.7448559670781894,0.0,0.7592592592592593,0.46502057613168724,0.779835390946502,0.7860082304526749,0.6707818930041153,0.5041152263374485,0.5,0.7530864197530864,0.0,0.48559670781893005,0.5679012345679012,0.7119341563786008,0.44650205761316875,0.4732510288065844,0.7160493827160493,0.49382716049382713,0.7489711934156379,0.7098765432098766,0.48148148148148145,0.3497942386831276,0.48148148148148145,0.654320987654321,0.44238683127572015,0.7304526748971193,0.0,0.345679012345679,0.6502057613168725,0.7777777777777778,0.5699588477366255,0.7551440329218106,0.5061728395061729,0.3395061728395062,0.4691358024691358,0.6090534979423868,0,0.43621399176954734,0.823045267489712,0.4773662551440329,0.5823045267489712,0.7633744855967078,0.1934156378600823,0.4794238683127572,0.345679012345679,0.6234567901234568,0.46296296296296297,0.0,0.7654320987654321,0.3950617283950617,0.6831275720164609,0.32510288065843623,0.4773662551440329,0.7757201646090535,0.7119341563786008,0.7016460905349794,0.6831275720164609,0.6707818930041153,0.7057613168724279,0.720164609053498,0.48559670781893005,0.6358024691358025,0.1748971193415638,0.7242798353909465,0.6934156378600823,0.20781893004115226,0.7139917695473251,0.7345679012345679,0.6419753086419753,0.345679012345679,0.5123456790123457,0.5637860082304527,0.7777777777777778,0.46502057613168724,0.3497942386831276,0.48559670781893005,0,0.6399176954732511,0.0,0.720164609053498,0.0,0.0,0.29835390946502055,0.6728395061728395,0.4794238683127572,0.7242798353909465,0.5781893004115226,0.345679012345679,0.6872427983539094,0.5925925925925926,0.7613168724279835,0.7283950617283951,0.0,0.7654320987654321,0.7304526748971193,0.345679012345679,0.6954732510288066,0.25102880658436216,0.5823045267489712,0.7613168724279835,0.5946502057613169,0.30246913580246915,0.5020576131687243,0.779835390946502,0.4773662551440329,0.0,0.7633744855967078,0,0.720164609053498,0.0,0.2654320987654321,0.0,0.7160493827160493,0.7880658436213992,0.7283950617283951,0.46502057613168724,0.7921810699588477,0.6646090534979424,0.48559670781893005,0.48559670781893005,0.0,0.720164609053498,0.7530864197530864,0.0,0.7407407407407407,0.0,0.8004115226337448,0.7098765432098766,0.7942386831275721,0.7283950617283951,0.5308641975308642,0.0,0.43209876543209874,0.720164609053498,0.47530864197530864,0.8024691358024691,0.7613168724279835,0.44238683127572015,0.6707818930041153,0.345679012345679,0.7489711934156379,0.7222222222222222,0.676954732510288,0.4588477366255144,0.7613168724279835,0.808641975308642,0.7448559670781894
44504,0.7654320987654321,0.7139917695473251,0.4835390946502058,0.7510288065843621,0.0,0.7695473251028807,0.46502057613168724,0.7880658436213992,0.7983539094650206,0.6810699588477366,0.4876543209876543,0.5082304526748971,0.7592592592592593,0.0,0.48559670781893005,0.5679012345679012,0.7119341563786008,0.44650205761316875,0.4732510288065844,0.7181069958847737,0.49382716049382713,0.7510288065843621,0.7139917695473251,0.48148148148148145,0.345679012345679,0.48148148148148145,0.6378600823045267,0.44238683127572015,0.7283950617283951,0.0,0.345679012345679,0.6748971193415638,0.7695473251028807,0.5699588477366255,0.7551440329218106,0.5061728395061729,0.2736625514403292,0.4897119341563786,0.6090534979423868,0,0.43621399176954734,0.8148148148148148,0.4773662551440329,0.588477366255144,0.7736625514403292,0.2037037037037037,0.4794238683127572,0.345679012345679,0.6296296296296297,0.46296296296296297,0.0,0.7880658436213992,0.3950617283950617,0.6831275720164609,0.3271604938271605,0.4773662551440329,0.7736625514403292,0.7160493827160493,0.7078189300411523,0.6831275720164609,0.6707818930041153,0.7119341563786008,0.7160493827160493,0.48559670781893005,0.6275720164609053,0.1748971193415638,0.7263374485596708,0.6872427983539094,0.20781893004115226,0.7037037037037037,0.7448559670781894,0.6440329218106996,0.3436213991769547,0.5123456790123457,0.5596707818930041,0.7818930041152263,0.46502057613168724,0.3497942386831276,0.48559670781893005,0,0.6111111111111112,0.0,0.7222222222222222,0.0,0.0,0.2716049382716049,0.6728395061728395,0.4794238683127572,0.7304526748971193,0.5781893004115226,0.345679012345679,0.6872427983539094,0.588477366255144,0.7757201646090535,0.6995884773662552,0.0,0.7674897119341564,0.7242798353909465,0.345679012345679,0.6954732510288066,0.8127572016460906,0.6008230452674898,0.7716049382716049,0.5823045267489712,0.3148148148148148,0.5020576131687243,0.7860082304526749,0.4773662551440329,0.0,0.7551440329218106,0,0.7551440329218106,0.0,0.2674897119341564,0.0,0.7222222222222222,0.7860082304526749,0.7345679012345679,0.46502057613168724,0.7901234567901234,0.6810699588477366,0.48559670781893005,0.4609053497942387,0.0,0.720164609053498,0.7551440329218106,0.0,0.7386831275720165,0.0,0.7983539094650206,0.7181069958847737,0.7942386831275721,0.7283950617283951,0.5370370370370371,0.0,0.43209876543209874,0.7242798353909465,0.47530864197530864,0.8004115226337448,0.7448559670781894,0.44238683127572015,0.6707818930041153,0.345679012345679,0.7407407407407407,0.7222222222222222,0.6810699588477366,0.4588477366255144,0.7592592592592593,0.8045267489711934,0.7530864197530864
44505,0.7654320987654321,0.7139917695473251,0.4835390946502058,0.7551440329218106,0.0,0.7716049382716049,0.46502057613168724,0.7860082304526749,0.8148148148148148,0.6748971193415638,0.4897119341563786,0.51440329218107,0.7448559670781894,0.0,0.48559670781893005,0.5679012345679012,0.7119341563786008,0.44650205761316875,0.4732510288065844,0.7181069958847737,0.49382716049382713,0.7510288065843621,0.7119341563786008,0.48148148148148145,0.3477366255144033,0.48148148148148145,0.6358024691358025,0.44238683127572015,0.7325102880658436,0.0,0.345679012345679,0.6502057613168725,0.7695473251028807,0.5699588477366255,0.742798353909465,0.5061728395061729,0.2757201646090535,0.49794238683127573,0.6111111111111112,0,0.43621399176954734,0.8148148148148148,0.4773662551440329,0.5596707818930041,0.7592592592592593,0.3395061728395062,0.4794238683127572,0.345679012345679,0.6255144032921811,0.46296296296296297,0.0,0.7674897119341564,0.3950617283950617,0.6831275720164609,0.3333333333333333,0.4773662551440329,0.7839506172839507,0.7098765432098766,0.7098765432098766,0.6831275720164609,0.6707818930041153,0.7078189300411523,0.720164609053498,0.48559670781893005,0.6213991769547325,0.1748971193415638,0.720164609053498,0.6851851851851852,0.20781893004115226,0.7160493827160493,0.7304526748971193,0.6460905349794238,0.3395061728395062,0.5123456790123457,0.5637860082304527,0.7592592592592593,0.46502057613168724,0.3497942386831276,0.48559670781893005,0,0.6440329218106996,0.0,0.7160493827160493,0.0,0.0,0.29012345679012347,0.6728395061728395,0.4794238683127572,0.7325102880658436,0.5720164609053497,0.345679012345679,0.6872427983539094,0.5905349794238683,0.7654320987654321,0.7037037037037037,0.0,0.7736625514403292,0.7386831275720165,0.345679012345679,0.6954732510288066,0.808641975308642,0.551440329218107,0.7613168724279835,0.5843621399176955,0.3168724279835391,0.5020576131687243,0.7839506172839507,0.4773662551440329,0.0,0.7716049382716049,0,0.7654320987654321,0.0,0.2880658436213992,0.0,0.7283950617283951,0.8127572016460906,0.7345679012345679,0.46502057613168724,0.8024691358024691,0.6748971193415638,0.48559670781893005,0.44650205761316875,0.0,0.720164609053498,0.7530864197530864,0.0,0.7530864197530864,0.0,0.8168724279835391,0.720164609053498,0.7901234567901234,0.7283950617283951,0.5370370370370371,0.0,0.43209876543209874,0.7222222222222222,0.47530864197530864,0.7983539094650206,0.7530864197530864,0.44238683127572015,0.6707818930041153,0.345679012345679,0.7510288065843621,0.7242798353909465,0.6851851851851852,0.4588477366255144,0.7530864197530864,0.8127572016460906,0.7530864197530864
44506,0.7551440329218106,0.7119341563786008,0.4835390946502058,0.7469135802469136,0.0,0.7777777777777778,0.46502057613168724,0.7962962962962963,0.7983539094650206,0.6954732510288066,0.5020576131687243,0.5041152263374485,0.7489711934156379,0.0,0.48559670781893005,0.5679012345679012,0.7119341563786008,0.44650205761316875,0.4732510288065844,0.7222222222222222,0.49382716049382713,0.7489711934156379,0.7139917695473251,0.48148148148148145,0.3477366255144033,0.48148148148148145,0.6255144032921811,0.44238683127572015,0.7222222222222222,0.0,0.345679012345679,0.6502057613168725,0.7716049382716049,0.5699588477366255,0.7551440329218106,0.5061728395061729,0.360082304526749,0.49588477366255146,0.6069958847736625,0,0.43621399176954734,0.8065843621399177,0.4773662551440329,0.5740740740740741,0.7592592592592593,0.17901234567901234,0.4794238683127572,0.345679012345679,0.6234567901234568,0.46296296296296297,0.0,0.7716049382716049,0.3950617283950617,0.6831275720164609,0.3230452674897119,0.4773662551440329,0.7818930041152263,0.7098765432098766,0.6934156378600823,0.6831275720164609,0.6707818930041153,0.7057613168724279,0.7098765432098766,0.48559670781893005,0.6604938271604939,0.1748971193415638,0.7283950617283951,0.7057613168724279,0.20781893004115226,0.7160493827160493,0.7407407407407407,0.6563786008230452,0.3436213991769547,0.5123456790123457,0.5534979423868313,0.7592592592592593,0.46502057613168724,0.3497942386831276,0.48559670781893005,0,0.6234567901234568,0.0,0.7160493827160493,0.0,0.0,0.2654320987654321,0.6728395061728395,0.4794238683127572,0.7263374485596708,0.5740740740740741,0.345679012345679,0.6872427983539094,0.5905349794238683,0.7674897119341564,0.7242798353909465,0.0,0.7530864197530864,0.720164609053498,0.345679012345679,0.6954732510288066,0.8106995884773662,0.6172839506172839,0.7654320987654321,0.5679012345679012,0.3271604938271605,0.5020576131687243,0.7674897119341564,0.4773662551440329,0.0,0.7674897119341564,0,0.7551440329218106,0.0,0.2839506172839506,0.0,0.7037037037037037,0.7901234567901234,0.7283950617283951,0.46502057613168724,0.7901234567901234,0.668724279835391,0.48559670781893005,0.4732510288065844,0.0,0.7222222222222222,0.7530864197530864,0.0,0.7407407407407407,0.0,0.7901234567901234,0.720164609053498,0.7860082304526749,0.7283950617283951,0.5452674897119342,0.0,0.43209876543209874,0.7283950617283951,0.47530864197530864,0.8106995884773662,0.7448559670781894,0.44238683127572015,0.6707818930041153,0.345679012345679,0.742798353909465,0.720164609053498,0.6748971193415638,0.4588477366255144,0.7469135802469136,0.8168724279835391,0.757201646090535
44507,0.7613168724279835,0.7119341563786008,0.4835390946502058,0.7469135802469136,0.0,0.7736625514403292,0.46502057613168724,0.7777777777777778,0.7901234567901234,0.6707818930041153,0.5041152263374485,0.5061728395061729,0.7654320987654321,0.0,0.48559670781893005,0.5679012345679012,0.7119341563786008,0.44650205761316875,0.4732510288065844,0.7139917695473251,0.49382716049382713,0.7469135802469136,0.6893004115226338,0.48148148148148145,0.3374485596707819,0.48148148148148145,0.6358024691358025,0.44238683127572015,0.742798353909465,0.0,0.345679012345679,0.6378600823045267,0.7716049382716049,0.5699588477366255,0.7489711934156379,0.5061728395061729,0.12757201646090535,0.49794238683127573,0.602880658436214,0,0.43621399176954734,0.8148148148148148,0.4773662551440329,0.5679012345679012,0.7592592592592593,0.3045267489711934,0.4794238683127572,0.345679012345679,0.6234567901234568,0.46296296296296297,0.0,0.779835390946502,0.3950617283950617,0.6831275720164609,0.3271604938271605,0.4773662551440329,0.7860082304526749,0.7160493827160493,0.691358024691358,0.6831275720164609,0.6707818930041153,0.7098765432098766,0.7119341563786008,0.48559670781893005,0.6193415637860082,0.1748971193415638,0.7181069958847737,0.7078189300411523,0.20781893004115226,0.7016460905349794,0.7366255144032922,0.6460905349794238,0.3477366255144033,0.5123456790123457,0.5637860082304527,0.7654320987654321,0.46502057613168724,0.3497942386831276,0.48559670781893005,0,0.6337448559670782,0.0,0.7181069958847737,0.0,0.0,0.2736625514403292,0.6728395061728395,0.4794238683127572,0.7283950617283951,0.5781893004115226,0.345679012345679,0.6872427983539094,0.5905349794238683,0.7674897119341564,0.7139917695473251,0.0,0.7674897119341564,0.7304526748971193,0.345679012345679,0.6954732510288066,0.8148148148148148,0.6069958847736625,0.757201646090535,0.5905349794238683,0.29835390946502055,0.5020576131687243,0.7839506172839507,0.4773662551440329,0.0,0.7592592592592593,0,0.7654320987654321,0.0,0.29218106995884774,0.0,0.720164609053498,0.7860082304526749,0.7304526748971193,0.46502057613168724,0.7901234567901234,0.6646090534979424,0.48559670781893005,0.4506172839506173,0.0,0.7222222222222222,0.757201646090535,0.0,0.7407407407407407,0.0,0.7921810699588477,0.7119341563786008,0.8004115226337448,0.7283950617283951,0.5411522633744856,0.0,0.43209876543209874,0.7325102880658436,0.47530864197530864,0.8209876543209876,0.7551440329218106,0.44238683127572015,0.6707818930041153,0.345679012345679,0.7448559670781894,0.7325102880658436,0.6975308641975309,0.4588477366255144,0.7469135802469136,0.8189300411522634,0.7530864197530864
44508,0.99,0.98,0.982,0.98,0.308,0.984,0.91,0.984,0.986,0.982,0.982,0.99,0.988,0.0,0.984,0.982,0.68,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.988,0.98,0.0,0.982,0.982,0.0,0.982,0.986,0.974,0.928,0.982,0.98,0,0.97,0.982,0.982,0.99,0.988,0.958,0.982,0.982,0.982,0.982,0.0,0.982,0.976,0.982,0.982,0.984,0.986,0.982,0.982,0.984,0.982,0.982,0.982,0.984,0.98,0.914,0.984,0.986,0.982,0.982,0.99,0.92,0.982,0.984,0.982,0.982,0.982,0.982,0.984,0,0.982,0.982,0.984,0.982,0.33,0.982,0.982,0.982,0.984,0.982,0.982,0.984,0.97,0.984,0.982,0.924,0.988,0.982,0.982,0.982,0.986,0.922,0.988,0.986,0.982,0.982,0.988,0.982,0.982,0.986,0,0.982,0.33,0.978,0.0,0.988,0.986,0.982,0.982,0.98,0.982,0.814,0.982,0.982,0.982,0.99,0.982,0.988,0.0,0.984,0.984,0.982,0.982,0.978,0.0,0.964,0.982,0.982,0.984,0.986,0.99,0.988,0.982,0.98,0.984,0.982,0.966,0.982,0.986,0.0
44509,0.98,0.982,0.982,0.976,0.214,0.986,0.892,0.988,0.984,0.982,0.982,0.982,0.978,0.0,0.982,0.982,0.752,0.976,0.982,0.978,0.978,0.978,0.982,0.982,0.982,0.982,0.982,0.986,0.976,0.0,0.982,0.98,0.0,0.982,0.982,0.98,0.954,0.982,0.976,0,0.97,0.986,0.982,0.986,0.984,0.972,0.984,0.982,0.982,0.982,0.0,0.984,0.98,0.99,0.982,0.98,0.982,0.982,0.982,0.982,0.986,0.982,0.978,0.982,0.97,0.926,0.986,0.982,0.018,0.978,0.982,0.1,0.982,0.982,0.982,0.988,0.978,0.982,0.982,0,0.982,0.982,0.978,0.982,0.322,0.982,0.988,0.982,0.976,0.982,0.982,0.978,0.988,0.988,0.984,0.746,0.98,0.982,0.982,0.982,0.982,0.92,0.98,0.98,0.982,0.982,0.988,0.982,0.982,0.978,0,0.98,0.322,0.982,0.0,0.982,0.982,0.982,0.978,0.982,0.982,0.7,0.982,0.982,0.988,0.98,0.982,0.978,0.0,0.99,0.984,0.986,0.982,0.984,0.0,0.964,0.982,0.982,0.988,0.98,0.986,0.98,0.982,0.976,0.978,0.982,0.97,0.978,0.984,0.0
44510,0.99,0.99,0.982,0.99,0.906,0.99,0.918,0.994,0.988,0.982,0.982,0.982,0.99,0.0,0.986,0.982,0.696,0.984,0.982,0.982,0.982,0.988,0.982,0.982,0.982,0.982,0.982,0.984,0.986,0.0,0.982,0.986,0.0,0.982,0.992,0.984,0.938,0.982,0.984,0,0.948,0.99,0.978,0.98,0.988,0.952,0.978,0.982,0.982,0.982,0.0,0.996,0.988,0.982,0.982,0.984,0.992,0.982,0.982,0.982,0.984,0.982,0.982,0.986,0.982,0.89,0.984,0.992,0.982,0.982,0.986,0.98,0.982,0.98,0.982,0.988,0.984,0.982,0.986,0,0.982,0.982,0.988,0.982,0.922,0.982,0.992,0.982,0.984,0.982,0.982,0.99,0.98,0.986,0.984,0.942,0.992,0.982,0.982,0.982,0.994,0.916,0.99,0.986,0.982,0.982,0.99,0.978,0.982,0.992,0,0.992,0.922,0.982,0.0,0.986,0.992,0.986,0.984,0.99,0.982,0.702,0.982,0.982,0.984,0.988,0.982,0.988,0.0,0.986,0.98,0.99,0.982,0.986,0.0,0.96,0.988,0.982,0.99,0.988,0.984,0.986,0.982,0.988,0.982,0.982,0.97,0.988,0.994,0.0
44511,0.988,0.98,0.982,0.986,0.198,0.986,0.852,0.986,0.984,0.982,0.982,0.984,0.988,0.0,0.982,0.982,0.612,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.98,0.0,0.982,0.984,0.0,0.982,0.984,0.97,0.98,0.982,0.984,0,0.96,0.986,0.982,0.982,0.986,0.938,0.982,0.982,0.984,0.982,0.0,0.988,0.98,0.984,0.982,0.978,0.984,0.982,0.982,0.982,0.968,0.982,0.982,0.982,0.972,0.922,0.984,0.986,0.982,0.982,0.988,0.018,0.982,0.98,0.982,0.978,0.982,0.982,0.982,0,0.982,0.982,0.984,0.982,0.244,0.982,0.976,0.982,0.984,0.982,0.982,0.97,0.976,0.984,0.982,0.688,0.984,0.982,0.982,0.982,0.972,0.894,0.978,0.98,0.982,0.982,0.988,0.982,0.982,0.984,0,0.986,0.242,0.982,0.0,0.982,0.98,0.984,0.982,0.986,0.982,0.826,0.982,0.982,0.978,0.986,0.982,0.988,0.974,0.982,0.984,0.988,0.982,0.984,0.0,0.97,0.982,0.982,0.984,0.988,0.98,0.98,0.982,0.984,0.984,0.982,0.954,0.986,0.982,0.0
44512,0.982,0.976,0.982,0.982,0.94,0.98,0.904,0.982,0.98,0.982,0.982,0.982,0.982,0.0,0.982,0.982,0.664,0.98,0.982,0.982,0.982,0.984,0.982,0.982,0.982,0.982,0.982,0.988,0.982,0.0,0.982,0.984,0.0,0.982,0.988,0.984,0.958,0.982,0.982,0,0.96,0.978,0.99,0.986,0.982,0.958,0.99,0.982,0.982,0.982,0.0,0.982,0.984,0.98,0.982,0.98,0.982,0.982,0.982,0.982,0.99,0.982,0.982,0.982,0.97,0.844,0.988,0.982,0.982,0.982,0.982,0.98,0.982,0.98,0.982,0.976,0.982,0.982,0.982,0,0.982,0.982,0.984,0.982,0.944,0.982,0.984,0.982,0.982,0.982,0.982,0.986,0.986,0.978,0.982,0.844,0.984,0.982,0.982,0.982,0.984,0.914,0.984,0.984,0.982,0.982,0.982,0.99,0.98,0.984,0,0.972,0.944,0.982,0.0,0.988,0.988,0.982,0.982,0.984,0.982,0.652,0.982,0.982,0.972,0.984,0.982,0.982,0.0,0.982,0.988,0.982,0.982,0.986,0.0,0.938,0.986,0.982,0.982,0.982,0.986,0.986,0.982,0.982,0.982,0.982,0.952,0.982,0.992,0.0
44513,0.518,0.576,0.702,0.762,0.422,0.768,0.782,0.852,0.896,0.674,0.514,0.358,0.758,0.0,0.304,0.604,0.816,0.818,0.0,0.674,0.744,0.758,0.656,0.204,0.416,0.304,0.212,0.82,0.722,0.0,0.53,0.632,0.0,0.548,0.85,0.418,0.0,0.398,0.6,0,0.206,0.0,0.334,0.698,0.734,0.0,0.334,0.532,0.47,0.0,0.0,0.862,0.372,0.63,0.49,0.746,0.826,0.316,0.534,0.748,0.574,0.67,0.7,0.304,0.368,0.206,0.8,0.692,0.258,0.694,0.77,0.82,0.46,0.508,0.51,0.868,0.746,0.206,0.304,0,0.666,0.34,0.74,0.0,0.552,0.508,0.804,0.0,0.718,0.616,0.206,0.554,0.612,0.428,0.704,0.502,0.66,0.836,0.464,0.732,0.888,0.572,0.792,0.6,0.45,0.604,0.0,0.334,0.0,0.808,0,0.0,0.546,0.638,0.0,0.812,0.854,0.722,0.776,0.0,0.612,0.328,0.418,0.206,0.622,0.606,0.318,0.792,0.246,0.0,0.78,0.782,0.722,0.4,0.0,0.206,0.856,0.702,0.808,0.796,0.742,0.552,0.76,0.748,0.716,0.674,0.338,0.79,0.886,0.0
44514,0.494,0.666,0.666,0.792,0.468,0.776,0.704,0.836,0.852,0.67,0.592,0.0,0.77,0.0,0.342,0.612,0.774,0.756,0.0,0.708,0.706,0.778,0.694,0.204,0.358,0.366,0.216,0.748,0.762,0.0,0.528,0.54,0.0,0.556,0.818,0.468,0.0,0.38,0.672,0,0.206,0.0,0.302,0.698,0.764,0.0,0.302,0.602,0.452,0.0,0.0,0.842,0.284,0.586,0.368,0.7,0.814,0.33,0.522,0.71,0.562,0.704,0.708,0.342,0.364,0.206,0.728,0.74,0.254,0.728,0.732,0.78,0.422,0.536,0.494,0.828,0.704,0.206,0.342,0,0.632,0.348,0.762,0.0,0.562,0.404,0.728,0.0,0.742,0.604,0.206,0.53,0.656,0.234,0.714,0.51,0.698,0.774,0.372,0.702,0.88,0.608,0.828,0.664,0.374,0.694,0.0,0.302,0.0,0.812,0,0.0,0.564,0.628,0.0,0.726,0.806,0.712,0.768,0.794,0.636,0.388,0.378,0.206,0.642,0.63,0.358,0.768,0.344,0.0,0.722,0.804,0.724,0.278,0.0,0.206,0.846,0.658,0.854,0.786,0.67,0.554,0.75,0.79,0.734,0.612,0.0,0.802,0.86,0.0
44515,0.596,0.648,0.698,0.788,0.51,0.778,0.772,0.844,0.868,0.72,0.534,0.262,0.788,0.0,0.352,0.646,0.792,0.834,0.0,0.73,0.756,0.79,0.724,0.204,0.43,0.352,0.214,0.78,0.758,0.0,0.61,0.572,0.0,0.568,0.826,0.456,0.0,0.414,0.7,0,0.206,0.0,0.362,0.758,0.742,0.0,0.336,0.53,0.562,0.0,0.0,0.86,0.426,0.64,0.5,0.766,0.84,0.358,0.51,0.73,0.614,0.72,0.744,0.352,0.372,0.206,0.764,0.738,0.22,0.752,0.738,0.792,0.518,0.588,0.528,0.862,0.754,0.206,0.352,0,0.672,0.34,0.796,0.0,0.628,0.466,0.764,0.0,0.762,0.642,0.206,0.634,0.622,0.438,0.696,0.494,0.72,0.81,0.424,0.74,0.874,0.584,0.83,0.706,0.464,0.712,0.776,0.362,0.0,0.822,0,0.0,0.63,0.654,0.0,0.788,0.834,0.75,0.79,0.0,0.706,0.38,0.46,0.206,0.662,0.65,0.384,0.796,0.39,0.0,0.764,0.802,0.764,0.426,0.0,0.206,0.836,0.704,0.85,0.818,0.756,0.624,0.762,0.794,0.756,0.612,0.272,0.806,0.842,0.0
44516,0.57,0.594,0.694,0.764,0.422,0.774,0.746,0.848,0.862,0.664,0.56,0.322,0.752,0.0,0.366,0.672,0.794,0.834,0.0,0.724,0.732,0.796,0.738,0.204,0.458,0.364,0.242,0.772,0.748,0.0,0.534,0.608,0.0,0.594,0.836,0.418,0.0,0.402,0.706,0,0.206,0.0,0.296,0.756,0.726,0.0,0.296,0.558,0.514,0.0,0.0,0.842,0.418,0.646,0.43,0.746,0.826,0.3,0.522,0.76,0.558,0.728,0.74,0.366,0.352,0.206,0.766,0.704,0.248,0.742,0.718,0.788,0.512,0.492,0.482,0.842,0.758,0.204,0.366,0,0.616,0.316,0.762,0.0,0.564,0.454,0.746,0.0,0.742,0.568,0.206,0.558,0.602,0.502,0.73,0.474,0.712,0.826,0.346,0.734,0.862,0.616,0.824,0.692,0.432,0.694,0.76,0.296,0.412,0.834,0,0.0,0.558,0.588,0.0,0.746,0.796,0.746,0.792,0.0,0.67,0.438,0.354,0.206,0.588,0.6,0.248,0.796,0.388,0.0,0.754,0.798,0.754,0.418,0.0,0.206,0.808,0.702,0.85,0.79,0.71,0.578,0.76,0.792,0.75,0.626,0.314,0.822,0.862,0.0
44517,0.458,0.624,0.642,0.804,0.472,0.828,0.738,0.862,0.866,0.676,0.586,0.27,0.802,0.0,0.328,0.568,0.756,0.79,0.0,0.776,0.718,0.808,0.73,0.204,0.416,0.338,0.198,0.768,0.798,0.0,0.466,0.596,0.0,0.52,0.778,0.462,0.0,0.424,0.73,0,0.206,0.0,0.35,0.674,0.768,0.0,0.35,0.57,0.446,0.0,0.0,0.858,0.306,0.596,0.46,0.648,0.838,0.368,0.472,0.698,0.554,0.734,0.74,0.328,0.358,0.206,0.74,0.762,0.272,0.756,0.748,0.744,0.528,0.492,0.556,0.822,0.68,0.206,0.328,0,0.7,0.344,0.816,0.0,0.606,0.398,0.748,0.0,0.77,0.632,0.206,0.596,0.602,0.33,0.726,0.482,0.682,0.774,0.314,0.696,0.868,0.574,0.844,0.77,0.458,0.678,0.798,0.35,0.414,0.85,0,0.0,0.606,0.692,0.0,0.75,0.828,0.784,0.766,0.0,0.726,0.414,0.41,0.206,0.662,0.652,0.376,0.83,0.266,0.0,0.726,0.83,0.706,0.336,0.0,0.206,0.828,0.658,0.87,0.85,0.704,0.566,0.708,0.8,0.77,0.618,0.26,0.834,0.868,0.0
44518,0.0,0.288,0.282,0.306,0.0,0.288,0.296,0.316,0.278,0.282,0.25,0.0,0.284,0.0,0.246,0.246,0.298,0.24,0.0,0.258,0.286,0.294,0.246,0.276,0.288,0.246,0.232,0.286,0.278,0.0,0.234,0.28,0.0,0.262,0.272,0.238,0.24,0.234,0.292,0,0.278,0.298,0.246,0.25,0.276,0.208,0.246,0.234,0.262,0.246,0.0,0.262,0.184,0.256,0.276,0.272,0.28,0.266,0.272,0.264,0.274,0.246,0.264,0.246,0.252,0.22,0.274,0.296,0.234,0.268,0.294,0.254,0.286,0.258,0.262,0.254,0.266,0.246,0.246,0,0.234,0.238,0.294,0.0,0.298,0.264,0.296,0.0,0.286,0.234,0.234,0.262,0.29,0.0,0.288,0.234,0.0,0.302,0.246,0.268,0.262,0.244,0.282,0.29,0.25,0.202,0.264,0.246,0.0,0.272,0,0.0,0.29,0.31,0.0,0.276,0.284,0.266,0.3,0.272,0.234,0.278,0.24,0.234,0.28,0.292,0.234,0.298,0.0,0.274,0.282,0.292,0.276,0.232,0.218,0.276,0.294,0.282,0.278,0.28,0.282,0.28,0.26,0.292,0.274,0.31,0.0,0.29,0.298,0.0

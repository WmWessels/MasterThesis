0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
40999,1.0,0.9982993197278912,0.8078231292517006,1.0,0.0,1.0,0.9455782312925171,1.0,1.0,0.7925170068027211,0.782312925170068,0.6972789115646258,1.0,1.0,0.717687074829932,0.7568027210884354,0.9880952380952381,0.9540816326530612,0.8945578231292517,0.9880952380952381,0.9642857142857143,1.0,0.9880952380952381,0.7670068027210885,0.54421768707483,0.717687074829932,0.7721088435374149,0.9693877551020408,0.9982993197278912,0.5595238095238095,0.5595238095238095,0.7363945578231292,1.0,0.7687074829931972,1.0,0.8979591836734694,1.0,0.6649659863945578,0.9982993197278912,0.0,0.6972789115646258,1.0,0.7551020408163265,0.7551020408163265,1.0,1.0,0.7551020408163265,0.5595238095238095,0.9438775510204082,0.6683673469387755,1.0,1.0,0.6054421768707483,1.0,0.5340136054421769,0.8044217687074829,1.0,0.7482993197278912,0.9693877551020408,0.9982993197278912,0.9659863945578231,1.0,1.0,0.717687074829932,0.7278911564625851,0.6955782312925171,0.9982993197278912,1.0,0.6105442176870748,1.0,1.0,0.9710884353741497,0.5459183673469388,0.9880952380952381,0.7602040816326531,1.0,0.8163265306122449,0.5595238095238095,0.717687074829932,0.0,1.0,0.0,1.0,0.0,0.0,0.6037414965986394,0.9251700680272109,0.7142857142857143,1.0,0.9863945578231292,0.5595238095238095,0.9863945578231292,0.9948979591836735,0.9761904761904762,0.8316326530612245,0.0,1.0,0.9982993197278912,0.5663265306122449,0.9914965986394558,1.0,0.6513605442176871,1.0,1.0,0.5119047619047619,0.9914965986394558,1.0,0.7551020408163265,0.5578231292517006,1.0,0.0,0.9608843537414966,0.0,0.6479591836734694,1.0,0.9982993197278912,1.0,1.0,0.9659863945578231,1.0,1.0,0.7704081632653061,0.6190476190476191,0.0,1.0,1.0,0.0,1.0,0.6649659863945578,1.0,0.9931972789115646,1.0,0.9982993197278912,0.6224489795918368,0.0,0.7006802721088435,1.0,0.8078231292517006,1.0,1.0,0.9336734693877551,1.0,0.5595238095238095,0.9982993197278912,1.0,0.7840136054421769,0.6989795918367347,1.0,1.0,1.0
41000,0.9948979591836735,0.9948979591836735,0.9064625850340136,0.9948979591836735,0.0,0.9948979591836735,0.9166666666666666,0.9965986394557823,0.9982993197278912,0.9319727891156463,0.6981292517006803,0.842687074829932,0.9923469387755102,0.0,0.7627551020408163,0.7006802721088435,0.967687074829932,0.9812925170068028,0.9243197278911565,0.9948979591836735,0.9574829931972789,0.9693877551020408,0.9948979591836735,0.7227891156462585,0.5187074829931972,0.7627551020408163,0.8460884353741497,0.9260204081632653,0.9948979591836735,0.0,0.7329931972789115,0.9115646258503401,0.9948979591836735,0.7125850340136054,0.9880952380952381,0.8095238095238095,1.0,0.6632653061224489,0.9549319727891157,0.0,0.6658163265306123,0.9940476190476191,0.7083333333333334,0.7040816326530612,0.9948979591836735,0.9795918367346939,0.7083333333333334,0.6496598639455783,0.9124149659863946,0.7125850340136054,0.0,0.9957482993197279,0.5059523809523809,0.9948979591836735,0.5110544217687075,0.9370748299319728,0.9948979591836735,0.8690476190476191,0.91921768707483,0.9855442176870748,0.9090136054421769,0.9948979591836735,0.9948979591836735,0.7627551020408163,0.9226190476190477,0.5654761904761905,0.9778911564625851,0.9566326530612245,0.5289115646258503,0.9948979591836735,0.9540816326530612,0.9413265306122449,0.5008503401360545,0.9540816326530612,0.7185374149659864,0.9974489795918368,0.9387755102040817,0.5306122448979592,0.7627551020408163,0.0,0.9540816326530612,0.0,0.9600340136054422,0.0,0.0,0.7619047619047619,0.9149659863945578,0.8988095238095238,0.9948979591836735,0.9540816326530612,0.5306122448979592,0.9948979591836735,0.9906462585034014,0.9617346938775511,0.9447278911564626,0.0,0.9948979591836735,0.9778911564625851,0.6641156462585034,0.9812925170068028,1.0,0.6173469387755102,0.9948979591836735,0.7457482993197279,0.5153061224489796,0.9787414965986394,0.9948979591836735,0.7083333333333334,0.0,0.9948979591836735,0.0,0.9761904761904762,0.0,0.5620748299319728,0.9948979591836735,0.9744897959183674,0.9991496598639455,0.9872448979591837,0.9804421768707483,0.9948979591836735,0.9753401360544217,0.6139455782312925,0.5816326530612245,0.0,0.9991496598639455,0.9948979591836735,0.0,0.9897959183673469,0.4013605442176871,0.9982993197278912,0.9736394557823129,0.9863945578231292,0.9914965986394558,0.5858843537414966,0.0,0.6887755102040817,0.9991496598639455,0.9064625850340136,0.9991496598639455,0.9914965986394558,0.9124149659863946,0.9617346938775511,0.6403061224489796,0.9693877551020408,0.9948979591836735,0.9430272108843537,0.7253401360544217,0.9948979591836735,0.9931972789115646,0.9948979591836735
41002,0.9891156462585035,0.9877551020408163,0.927891156462585,0.9863945578231292,0.0,0.991156462585034,0.9823129251700681,0.9959183673469387,0.9993197278911564,0.9659863945578231,0.8136054421768707,0.6727891156462585,0.9897959183673469,0.0,0.745578231292517,0.8768707482993198,0.9829931972789115,0.9884353741496599,0.9469387755102041,0.9863945578231292,0.9727891156462585,0.9891156462585035,0.9863945578231292,0.8666666666666667,0.43605442176870746,0.745578231292517,0.8231292517006803,0.9816326530612245,0.9863945578231292,0.0,0.4448979591836735,0.8585034013605443,0.0,0.8748299319727891,0.991156462585034,0.780952380952381,0.9993197278911564,0.6979591836734694,0.8020408163265306,0.0,0.7251700680272108,0.9979591836734694,0.638095238095238,0.8850340136054422,0.991156462585034,0.9979591836734694,0.6564625850340136,0.4448979591836735,0.9326530612244898,0.863265306122449,0.0,0.9979591836734694,0.49863945578231295,0.9809523809523809,0.4197278911564626,0.9585034013605442,0.9959183673469387,0.9136054421768708,0.9258503401360544,0.9741496598639455,0.9292517006802721,0.9863945578231292,0.9863945578231292,0.745578231292517,0.8571428571428571,0.7258503401360544,0.9809523809523809,0.7721088435374149,0.54421768707483,0.9863945578231292,0.9863945578231292,0.9809523809523809,0.44285714285714284,0.972108843537415,0.8789115646258503,0.9965986394557823,0.9571428571428572,0.4448979591836735,0.745578231292517,0.0,0.9564625850340136,0.0,0.7748299319727892,0.0,0.0,0.601360544217687,0.9727891156462585,0.9136054421768708,0.9863945578231292,0.9707482993197278,0.4448979591836735,0.9891156462585035,0.9870748299319728,0.9755102040816327,0.9768707482993197,0.0,0.9938775510204082,0.9857142857142858,0.5149659863945578,0.9768707482993197,0.9993197278911564,0.6414965986394557,0.9979591836734694,0.7829931972789116,0.42517006802721086,0.7435374149659864,0.9904761904761905,0.638095238095238,0.0,0.9972789115646259,0.0,0.9884353741496599,0.0,0.45918367346938777,0.991156462585034,0.9857142857142858,0.992517006802721,0.9863945578231292,0.9918367346938776,0.9931972789115646,0.9850340136054422,0.7931972789115647,0.5517006802721088,0.0,0.9979591836734694,0.9979591836734694,0.0,0.9877551020408163,0.0,0.9979591836734694,0.9843537414965986,0.9959183673469387,0.9891156462585035,0.5551020408163265,0.0,0.7326530612244898,0.9965986394557823,0.927891156462585,0.998639455782313,0.9884353741496599,0.9741496598639455,0.9802721088435374,0.4448979591836735,0.9863945578231292,0.9863945578231292,0.9435374149659864,0.7414965986394558,0.9897959183673469,0.9993197278911564,0.0
41003,0.991156462585034,0.9897959183673469,0.8068027210884354,0.9938775510204082,0.0,0.9938775510204082,0.9027210884353741,0.9972789115646259,0.998639455782313,0.9795918367346939,0.7081632653061225,0.6571428571428571,0.9931972789115646,0.0,0.7251700680272108,0.7598639455782313,0.9292517006802721,0.9428571428571428,0.8850340136054422,0.9931972789115646,0.954421768707483,0.9938775510204082,0.9931972789115646,0.7748299319727892,0.47959183673469385,0.7251700680272108,0.7503401360544217,0.8965986394557823,0.9931972789115646,0.0,0.5027210884353741,0.8040816326530612,0.0,0.7625850340136054,0.9945578231292517,0.746938775510204,0.7741496598639456,0.6285714285714286,0.8394557823129252,0.0,0.6482993197278911,0.9972789115646259,0.6653061224489796,0.7789115646258503,0.9938775510204082,0.9965986394557823,0.6727891156462585,0.4959183673469388,0.8673469387755102,0.7673469387755102,0.0,0.9979591836734694,0.5210884353741496,0.8340136054421768,0.4884353741496599,0.7952380952380952,0.9945578231292517,0.9006802721088435,0.8625850340136054,0.9517006802721089,0.9204081632653062,0.9931972789115646,0.9931972789115646,0.7251700680272108,0.9476190476190476,0.6482993197278911,0.9816326530612245,0.819047619047619,0.5693877551020409,0.9931972789115646,0.9095238095238095,0.8979591836734694,0.48775510204081635,0.8727891156462585,0.7693877551020408,0.9979591836734694,0.8122448979591836,0.4959183673469388,0.7251700680272108,0.0,0.8884353741496599,0.0,0.826530612244898,0.0,0.0,0.5979591836734693,0.8809523809523809,0.7340136054421769,0.9931972789115646,0.9272108843537415,0.4959183673469388,0.9904761904761905,0.9931972789115646,0.9782312925170068,0.9809523809523809,0.0,0.9945578231292517,0.991156462585034,0.6231292517006802,0.9775510204081632,0.9959183673469387,0.6414965986394557,0.9945578231292517,0.7299319727891157,0.49047619047619045,0.8639455782312925,0.9931972789115646,0.6653061224489796,0.0,0.9945578231292517,0.0,0.9829931972789115,0.0,0.501360544217687,0.0,0.9809523809523809,0.9945578231292517,0.9931972789115646,0.9469387755102041,0.992517006802721,0.991156462585034,0.7068027210884353,0.6625850340136055,0.0,0.9965986394557823,0.9945578231292517,0.0,0.9959183673469387,0.40476190476190477,0.9972789115646259,0.9816326530612245,0.9945578231292517,0.9897959183673469,0.5523809523809524,0.0,0.6632653061224489,0.9972789115646259,0.8074829931972789,0.9965986394557823,0.9931972789115646,0.8891156462585034,0.9870748299319728,0.4959183673469388,0.9938775510204082,0.9938775510204082,0.9714285714285714,0.6659863945578232,0.9945578231292517,0.9972789115646259,0.0
41004,0.9889455782312925,0.9880952380952381,0.935374149659864,0.9897959183673469,0.0,0.9889455782312925,0.9855442176870748,0.9974489795918368,0.9982993197278912,0.9651360544217688,0.8375850340136054,0.7568027210884354,0.9829931972789115,0.0,0.7185374149659864,0.8664965986394558,0.9940476190476191,0.9906462585034014,0.9489795918367347,0.9846938775510204,0.9608843537414966,0.9846938775510204,0.9846938775510204,0.8528911564625851,0.4379251700680272,0.7185374149659864,0.8622448979591837,0.983843537414966,0.9889455782312925,0.0,0.4421768707482993,0.9523809523809523,0.0,0.8554421768707483,0.9948979591836735,0.8358843537414966,0.9982993197278912,0.782312925170068,0.9778911564625851,0.0,0.8069727891156463,0.9957482993197279,0.6011904761904762,0.8860544217687075,0.9906462585034014,0.9982993197278912,0.6011904761904762,0.4421768707482993,0.9302721088435374,0.8715986394557823,0.0,0.9965986394557823,0.5654761904761905,0.9821428571428571,0.39285714285714285,0.9532312925170068,0.9974489795918368,0.9506802721088435,0.9149659863945578,0.9625850340136054,0.9413265306122449,0.9846938775510204,0.9846938775510204,0.7185374149659864,0.9251700680272109,0.8112244897959183,0.9804421768707483,0.9863945578231292,0.5425170068027211,0.9855442176870748,0.9727891156462585,0.9812925170068028,0.44302721088435376,0.9761904761904762,0.8741496598639455,0.9940476190476191,0.9523809523809523,0.4421768707482993,0.7185374149659864,0.0,0.9532312925170068,0.0,0.9872448979591837,0.0,0.0,0.6794217687074829,0.9727891156462585,0.91921768707483,0.9855442176870748,0.951530612244898,0.4421768707482993,0.9906462585034014,0.9923469387755102,0.9761904761904762,0.9812925170068028,0.0,0.9982993197278912,0.9872448979591837,0.6096938775510204,0.9642857142857143,0.9982993197278912,0.6632653061224489,0.9923469387755102,0.9311224489795918,0.41241496598639454,0.9821428571428571,0.9957482993197279,0.6011904761904762,0.0,0.9965986394557823,0.0,0.9753401360544217,0.0,0.45068027210884354,0.0,0.983843537414966,0.9940476190476191,0.9804421768707483,0.9897959183673469,0.9906462585034014,0.9778911564625851,0.8562925170068028,0.6284013605442177,0.0,0.9880952380952381,0.9931972789115646,0.0,0.983843537414966,0.6258503401360545,0.9982993197278912,0.9804421768707483,0.9880952380952381,0.9804421768707483,0.6292517006802721,0.0,0.8273809523809523,0.9974489795918368,0.935374149659864,0.9982993197278912,0.9872448979591837,0.9795918367346939,0.9761904761904762,0.4421768707482993,0.9897959183673469,0.9846938775510204,0.95578231292517,0.8818027210884354,0.9931972789115646,0.9940476190476191,0.9889455782312925
41005,1.0,1.0,0.8502732240437159,1.0,0.0,1.0,0.9595628415300547,1.0,1.0,0.8043715846994536,0.7693989071038252,0.6579234972677596,1.0,1.0,0.7377049180327869,0.7453551912568306,1.0,0.9748633879781421,0.921311475409836,1.0,0.9759562841530055,1.0,1.0,0.7573770491803279,0.5497267759562842,0.7377049180327869,0.7912568306010929,0.980327868852459,1.0,0.5617486338797815,0.5617486338797815,0.7617486338797814,1.0,0.7562841530054645,1.0,0.892896174863388,1.0,0.6721311475409836,1.0,0.0,0.6852459016393443,1.0,0.6983606557377049,0.7584699453551913,1.0,1.0,0.6983606557377049,0.5617486338797815,0.8994535519125683,0.6918032786885245,1.0,1.0,0.5628415300546448,0.994535519125683,0.5344262295081967,0.8065573770491803,1.0,0.7814207650273224,0.9639344262295082,0.9967213114754099,0.9737704918032787,1.0,1.0,0.7377049180327869,0.7366120218579235,0.7016393442622951,0.9934426229508196,1.0,0.5530054644808743,1.0,1.0,0.966120218579235,0.5333333333333333,0.9956284153005465,0.7497267759562841,1.0,0.8426229508196721,0.5617486338797815,0.7377049180327869,0.0,1.0,0.0,1.0,0.0,0.0,0.6841530054644809,0.9355191256830601,0.7377049180327869,1.0,1.0,0.5617486338797815,1.0,0.9934426229508196,0.9672131147540983,0.853551912568306,0.0,1.0,0.9989071038251366,0.6327868852459017,0.9923497267759562,1.0,0.6174863387978142,1.0,1.0,0.5180327868852459,0.9923497267759562,1.0,0.6983606557377049,0.0,1.0,0.0,0.9759562841530055,0.0,0.6109289617486339,1.0,0.994535519125683,1.0,1.0,0.9519125683060109,1.0,1.0,0.7387978142076502,0.6131147540983607,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.9912568306010929,1.0,1.0,0.5934426229508196,0.0,0.6852459016393443,1.0,0.853551912568306,1.0,1.0,0.9431693989071038,1.0,0.5617486338797815,1.0,1.0,0.8,0.6918032786885245,1.0,1.0,1.0
41006,0.9843537414965986,0.9863945578231292,0.9163265306122449,0.9843537414965986,0.0,0.9863945578231292,0.9673469387755103,0.992517006802721,0.9952380952380953,0.964625850340136,0.8693877551020408,0.8353741496598639,0.9843537414965986,0.0,0.8700680272108844,0.8850340136054422,0.9707482993197278,0.9741496598639455,0.9394557823129251,0.9843537414965986,0.95578231292517,0.9857142857142858,0.9843537414965986,0.8836734693877552,0.501360544217687,0.8700680272108844,0.6979591836734694,0.9639455782312926,0.9843537414965986,0.0,0.7068027210884353,0.954421768707483,0.0,0.891156462585034,0.992517006802721,0.8517006802721089,0.9945578231292517,0.8061224489795918,0.9510204081632653,0.0,0.7068027210884353,0.9959183673469387,0.7238095238095238,0.891156462585034,0.9843537414965986,0.4884353741496599,0.7238095238095238,0.7768707482993197,0.9204081632653062,0.8789115646258503,0.0,0.9938775510204082,0.5299319727891156,0.9578231292517007,0.507482993197279,0.9312925170068027,0.9877551020408163,0.9503401360544218,0.8945578231292517,0.9578231292517007,0.9380952380952381,0.9843537414965986,0.9843537414965986,0.8700680272108844,0.8639455782312925,0.6394557823129252,0.9823129251700681,0.9585034013605442,0.6156462585034014,0.9843537414965986,0.9537414965986395,0.9585034013605442,0.5183673469387755,0.9319727891156463,0.8884353741496599,0.9931972789115646,0.9272108843537415,0.5238095238095238,0.8700680272108844,0.0,0.936734693877551,0.0,0.9823129251700681,0.0,0.0,0.7605442176870748,0.9442176870748299,0.8979591836734694,0.9843537414965986,0.9346938775510204,0.5238095238095238,0.9850340136054422,0.9761904761904762,0.9816326530612245,0.9782312925170068,0.0,0.9877551020408163,0.9823129251700681,0.7054421768707483,0.9687074829931973,0.9959183673469387,0.7965986394557824,0.9891156462585035,0.9414965986394558,0.49523809523809526,0.9775510204081632,0.9870748299319728,0.7238095238095238,0.0,0.9891156462585035,0.0,0.9843537414965986,0.0,0.5122448979591837,0.0,0.9829931972789115,0.9877551020408163,0.9843537414965986,0.9789115646258504,0.9870748299319728,0.9795918367346939,0.6925170068027211,0.5904761904761905,0.0,0.992517006802721,0.9863945578231292,0.0,0.9850340136054422,0.41360544217687073,0.9952380952380953,0.9843537414965986,0.9884353741496599,0.9782312925170068,0.5748299319727891,0.0,0.8204081632653061,0.9870748299319728,0.9149659863945578,0.9938775510204082,0.9823129251700681,0.9537414965986395,0.9870748299319728,0.5605442176870749,0.9843537414965986,0.9843537414965986,0.9687074829931973,0.7755102040816326,0.9857142857142858,0.9959183673469387,0.0
41007,0.9761904761904762,0.95578231292517,0.8214285714285714,0.9761904761904762,0.0,0.9761904761904762,0.9472789115646258,0.9863945578231292,0.9914965986394558,0.8639455782312925,0.7602040816326531,0.7091836734693877,0.9778911564625851,0.9727891156462585,0.8214285714285714,0.7891156462585034,0.9574829931972789,0.9625850340136054,0.9013605442176871,0.9455782312925171,0.95578231292517,0.9761904761904762,0.9421768707482994,0.7874149659863946,0.5901360544217688,0.8214285714285714,0.8129251700680272,0.9540816326530612,0.9489795918367347,0.5969387755102041,0.5969387755102041,0.7891156462585034,0.9846938775510204,0.79421768707483,0.9795918367346939,0.8469387755102041,0.9914965986394558,0.6581632653061225,0.967687074829932,0.0,0.7704081632653061,0.9931972789115646,0.7074829931972789,0.8112244897959183,0.9608843537414966,0.9897959183673469,0.7074829931972789,0.5969387755102041,0.9183673469387755,0.7976190476190477,0.9812925170068028,0.9897959183673469,0.5884353741496599,0.9642857142857143,0.5867346938775511,0.8622448979591837,0.9846938775510204,0.8231292517006803,0.891156462585034,0.9523809523809523,0.9370748299319728,0.9574829931972789,0.9523809523809523,0.8214285714285714,0.8282312925170068,0.7772108843537415,0.9574829931972789,0.967687074829932,0.5969387755102041,0.9591836734693877,0.935374149659864,0.9625850340136054,0.5901360544217688,0.9370748299319728,0.7891156462585034,0.9863945578231292,0.8418367346938775,0.5969387755102041,0.8214285714285714,0.0,0.9115646258503401,0.0,0.9693877551020408,0.0,0.0,0.6751700680272109,0.9047619047619048,0.7789115646258503,0.9574829931972789,0.9030612244897959,0.5969387755102041,0.9489795918367347,0.9591836734693877,0.9472789115646258,0.8877551020408163,0.7738095238095238,0.9761904761904762,0.9778911564625851,0.5969387755102041,0.9642857142857143,0.9948979591836735,0.5952380952380952,0.9829931972789115,0.8469387755102041,0.5629251700680272,0.9863945578231292,0.9829931972789115,0.7074829931972789,0.0,0.9812925170068028,0.0,0.95578231292517,0.0,0.6071428571428571,0.9744897959183674,0.9540816326530612,0.9812925170068028,0.967687074829932,0.9710884353741497,0.9744897959183674,0.9659863945578231,0.8248299319727891,0.6581632653061225,0.0,0.9897959183673469,0.9625850340136054,0.0,0.9812925170068028,0.7125850340136054,0.9863945578231292,0.9540816326530612,0.9863945578231292,0.9761904761904762,0.6666666666666666,0.0,0.7636054421768708,0.9829931972789115,0.8299319727891157,0.9880952380952381,0.9829931972789115,0.923469387755102,0.9540816326530612,0.5969387755102041,0.9642857142857143,0.9642857142857143,0.8673469387755102,0.7551020408163265,0.9744897959183674,0.9897959183673469,0.9591836734693877
41143,0.8284182305630027,0.7882037533512064,0.7949061662198391,0.8056300268096515,0.0,0.8163538873994638,0.7734584450402144,0.82171581769437,0.7962466487935657,0.7761394101876675,0.7734584450402144,0.7667560321715817,0.8203753351206434,0.0,0.7734584450402144,0.7654155495978552,0.7774798927613941,0.7935656836461126,0.789544235924933,0.8083109919571045,0.8136729222520107,0.8150134048257373,0.8056300268096515,0.7640750670241286,0.4973190348525469,0.7734584450402144,0.5026809651474531,0.7694369973190348,0.8163538873994638,0.0,0.7815013404825737,0.7761394101876675,0.0,0.7640750670241286,0.8096514745308311,0.7949061662198391,0.7935656836461126,0.7734584450402144,0.8203753351206434,0.0,0.7721179624664879,0.8042895442359249,0.8002680965147453,0.7587131367292225,0.82171581769437,0.7640750670241286,0.8002680965147453,0.7721179624664879,0.7667560321715817,0.7734584450402144,0.0,0.8109919571045576,0.7305630026809652,0.7774798927613941,0.5026809651474531,0.7841823056300268,0.8176943699731903,0.7439678284182306,0.5951742627345844,0.7949061662198391,0.7198391420911529,0.8136729222520107,0.8083109919571045,0.7734584450402144,0.7493297587131368,0.7640750670241286,0.8176943699731903,0.82171581769437,0.7158176943699732,0.8109919571045576,0.8190348525469169,0.789544235924933,0.5348525469168901,0.806970509383378,0.7573726541554959,0.7882037533512064,0.789544235924933,0.5,0.7734584450402144,0.0,0.8136729222520107,0.0,0.8150134048257373,0.0,0.0,0.5723860589812333,0.7788203753351206,0.7721179624664879,0.8136729222520107,0.8056300268096515,0.5,0.7975871313672922,0.7989276139410187,0.792225201072386,0.7962466487935657,0.7506702412868632,0.8136729222520107,0.8123324396782842,0.7667560321715817,0.8042895442359249,0.7815013404825737,0.760053619302949,0.8150134048257373,0.8163538873994638,0.467828418230563,0.8150134048257373,0.82171581769437,0.8002680965147453,0.0,0.8109919571045576,0.0,0.8083109919571045,0.0,0.6193029490616622,0.0,0.806970509383378,0.8083109919571045,0.8176943699731903,0.8190348525469169,0.8029490616621984,0.7949061662198391,0.7546916890080428,0.7587131367292225,0.0,0.7654155495978552,0.7989276139410187,0.0,0.82171581769437,0.0,0.7908847184986595,0.8136729222520107,0.8230563002680965,0.7975871313672922,0.7332439678284183,0.0,0.7640750670241286,0.8270777479892761,0.7962466487935657,0.8042895442359249,0.824396782841823,0.7774798927613941,0.8002680965147453,0.8123324396782842,0.8203753351206434,0.8136729222520107,0.7962466487935657,0.7412868632707775,0.8056300268096515,0.8083109919571045,0.0
41146,0.9406713505074161,0.9258391881342701,0.741608118657299,0.9406713505074161,0.0,0.9437939110070258,0.8899297423887588,0.9305230288836847,0.9383294301327089,0.9024199843871975,0.47540983606557374,0.912568306010929,0.9281811085089774,0.0,0.9164715066354411,0.5136612021857924,0.912568306010929,0.8243559718969555,0.8352849336455894,0.9336455893832943,0.8407494145199064,0.9234972677595629,0.9305230288836847,0.4769711163153786,0.4769711163153786,0.9164715066354411,0.7853239656518345,0.8376268540202967,0.9344262295081968,0.9313036690085871,0.4996096799375488,0.825136612021858,0.942232630757221,0.47540983606557374,0.9453551912568307,0.8540202966432474,0.9484777517564403,0.5152224824355972,0.936768149882904,0.0,0.48243559718969553,0.9469164715066355,0.7384855581576893,0.516783762685402,0.942232630757221,0.9336455893832943,0.7580015612802498,0.4816549570647931,0.7962529274004684,0.4996096799375488,0.0,0.9336455893832943,0.5745511319281811,0.8032786885245902,0.48009367681498827,0.750975800156128,0.9461358313817331,0.8571428571428571,0.7704918032786885,0.8188914910226386,0.9016393442622951,0.9328649492583919,0.9336455893832943,0.9164715066354411,0.8157689305230289,0.48243559718969553,0.9344262295081968,0.9406713505074161,0.4996096799375488,0.9320843091334895,0.921935987509758,0.8227946916471507,0.5003903200624512,0.5940671350507416,0.4972677595628415,0.9336455893832943,0.7704918032786885,0.4996096799375488,0.9164715066354411,0.0,0.9211553473848556,0.0,0.9461358313817331,0.0,0.0,0.5089773614363778,0.9133489461358314,0.7595628415300546,0.9344262295081968,0.9234972677595629,0.4996096799375488,0.9344262295081968,0.7533177205308352,0.9328649492583919,0.9195940671350508,0.0,0.9484777517564403,0.9375487900078064,0.6042154566744731,0.8204527712724434,0.9375487900078064,0.8633879781420765,0.9492583918813428,0.9320843091334895,0.4839968774395004,0.9313036690085871,0.9461358313817331,0.7384855581576893,0.0,0.9469164715066355,0.0,0.9281811085089774,0.0,0.5027322404371585,0.0,0.9297423887587822,0.9289617486338798,0.9242779078844653,0.9352068696330992,0.9398907103825137,0.912568306010929,0.8985167837626854,0.5690866510538641,0.0,0.9242779078844653,0.9141295862607338,0.0,0.9250585480093677,0.0,0.9523809523809523,0.9305230288836847,0.9461358313817331,0.8688524590163934,0.5573770491803278,0.0,0.48243559718969553,0.8844652615144418,0.7447306791569087,0.955503512880562,0.9266198282591726,0.8360655737704918,0.927400468384075,0.8992974238875878,0.936768149882904,0.9359875097580016,0.8899297423887588,0.9063231850117096,0.9445745511319282,0.9414519906323185,0.9359875097580016
41156,0.8331726133076182,0.8235294117647058,0.7965284474445516,0.8389585342333655,0.7627772420443587,0.8466730954676953,0.837029893924783,0.8486017357762777,0.8486017357762777,0.8273866923818708,0.7878495660559306,0.7521697203471552,0.8466730954676953,0.0,0.7521697203471552,0.8138862102217936,0.8312439729990356,0.789778206364513,0.7907425265188043,0.8322082931533269,0.8013500482160077,0.8302796528447445,0.8341369334619093,0.8206364513018322,0.7521697203471552,0.7521697203471552,0.7820636451301832,0.8235294117647058,0.8331726133076182,0.7521697203471552,0.7521697203471552,0.7994214079074252,0.0,0.8254580520732884,0.8379942140790743,0.8052073288331726,0.8090646094503375,0.7521697203471552,0.8322082931533269,0.0,0.7222757955641272,0.8437801350048216,0.7521697203471552,0.81099324975892,0.8351012536162006,0.8225650916104147,0.7695274831243973,0.7521697203471552,0.8206364513018322,0.8206364513018322,0.0,0.845708775313404,0.7589199614271939,0.8167791706846673,0.7521697203471552,0.7859209257473481,0.845708775313404,0.8177434908389586,0.8119575699132112,0.8351012536162006,0.8283510125361621,0.8351012536162006,0.8341369334619093,0.7521697203471552,0.8119575699132112,0.7232401157184185,0.8466730954676953,0.8322082931533269,0.7521697203471552,0.8293153326904532,0.8351012536162006,0.8447444551591128,0.7521697203471552,0.819672131147541,0.8167791706846673,0.8418514946962391,0.7917068466730954,0.7521697203471552,0.7521697203471552,0.0,0.7820636451301832,0.781099324975892,0.8418514946962391,0.0,0.76374156219865,0.7348119575699132,0.837029893924783,0.793635486981678,0.8331726133076182,0.7994214079074252,0.7521697203471552,0.8244937319189971,0.837029893924783,0.8216007714561234,0.8351012536162006,0.7618129218900676,0.8466730954676953,0.8389585342333655,0.7521697203471552,0.8302796528447445,0.8447444551591128,0.7685631629701061,0.8351012536162006,0.8148505303760849,0.7521697203471552,0.7907425265188043,0.8360655737704918,0.7521697203471552,0.0,0.8428158148505304,0.0,0.8090646094503375,0.7627772420443587,0.7521697203471552,0.8476374156219865,0.8428158148505304,0.8428158148505304,0.8399228543876567,0.793635486981678,0.8273866923818708,0.8312439729990356,0.7328833172613307,0.7695274831243973,0.7521697203471552,0.8119575699132112,0.8293153326904532,0.7560270009643202,0.8418514946962391,0.0,0.8476374156219865,0.8379942140790743,0.8312439729990356,0.8312439729990356,0.7782063645130183,0.0,0.7463837994214079,0.8399228543876567,0.789778206364513,0.837029893924783,0.8389585342333655,0.8322082931533269,0.8254580520732884,0.7521697203471552,0.8351012536162006,0.8302796528447445,0.8273866923818708,0.7714561234329798,0.8379942140790743,0.8428158148505304,0.8273866923818708
41701,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
41705,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
41707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41722,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

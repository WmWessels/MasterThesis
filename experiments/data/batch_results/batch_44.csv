0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44749,0.51,0.572,0.566,0.594,0.494,0.59,0.57,0.548,0.568,0.6,0.6,0.6,0.602,0.0,0.6,0.51,0.582,0.508,0.526,0.608,0.572,0.63,0.61,0.584,0.602,0.6,0.582,0.574,0.624,0.0,0.6,0.588,0.0,0.56,0.53,0.6,0.582,0.6,0.612,0,0.518,0.656,0.6,0.518,0.608,0.56,0.6,0.6,0.526,0.612,0.0,0.56,0.496,0.514,0.594,0.544,0.564,0.576,0.6,0.566,0.554,0.604,0.616,0.6,0.568,0.536,0.56,0.62,0.598,0.61,0.612,0.586,0.588,0.616,0.596,0.558,0.508,0.6,0.6,0,0.602,0.0,0.606,0.0,0.0,0.526,0.568,0.524,0.6,0.598,0.6,0.586,0.558,0.558,0.568,0.0,0.512,0.57,0.6,0.582,0.562,0.54,0.582,0.628,0.568,0.0,0.58,0.6,0.0,0.58,0,0.542,0.0,0.55,0.0,0.548,0.588,0.606,0.68,0.588,0.598,0.514,0.6,0.0,0.592,0.614,0.0,0.572,0.0,0.586,0.594,0.644,0.512,0.56,0,0.564,0.55,0.562,0.582,0.58,0.572,0.592,0.6,0.612,0.61,0.578,0.472,0.594,0.65,0.0
44750,0.536,0.602,0.588,0.582,0.446,0.606,0.536,0.566,0.58,0.59,0.6,0.6,0.586,0.0,0.582,0.516,0.534,0.506,0.508,0.594,0.572,0.0,0.602,0.566,0.598,0.582,0.566,0.534,0.596,0.0,0.6,0.562,0.0,0.57,0.524,0.586,0.58,0.6,0.584,0,0.472,0.0,0.6,0.494,0.602,0.576,0.6,0.6,0.5,0.578,0.0,0.522,0.506,0.492,0.596,0.524,0.544,0.568,0.59,0.586,0.508,0.594,0.58,0.582,0.528,0.46,0.53,0.578,0.6,0.588,0.604,0.546,0.566,0.596,0.558,0.538,0.506,0.6,0.582,0,0.598,0.0,0.54,0.0,0.0,0.53,0.576,0.522,0.596,0.598,0.6,0.572,0.572,0.532,0.544,0.0,0.53,0.534,0.6,0.586,0.534,0.502,0.574,0.55,0.588,0.0,0.602,0.6,0.0,0.572,0,0.534,0.0,0.542,0.0,0.542,0.564,0.59,0.0,0.61,0.598,0.452,0.6,0.0,0.602,0.586,0.0,0.55,0.0,0.56,0.522,0.0,0.514,0.532,0,0.526,0.53,0.582,0.572,0.572,0.55,0.558,0.6,0.57,0.588,0.584,0.488,0.548,0.0,0.0
44751,0.554,0.61,0.57,0.592,0.498,0.604,0.57,0.576,0.578,0.586,0.6,0.6,0.574,0.0,0.614,0.496,0.566,0.508,0.534,0.588,0.558,0.0,0.602,0.574,0.586,0.614,0.532,0.568,0.602,0.0,0.6,0.544,0.0,0.532,0.546,0.614,0.57,0.6,0.594,0,0.498,0.0,0.608,0.536,0.604,0.556,0.608,0.6,0.522,0.0,0.0,0.536,0.522,0.542,0.584,0.53,0.578,0.53,0.594,0.576,0.508,0.596,0.596,0.614,0.558,0.514,0.534,0.534,0.6,0.59,0.614,0.564,0.566,0.58,0.59,0.532,0.518,0.6,0.614,0,0.602,0.0,0.55,0.0,0.0,0.568,0.574,0.54,0.574,0.602,0.6,0.6,0.554,0.566,0.538,0.0,0.522,0.546,0.6,0.566,0.598,0.51,0.582,0.552,0.554,0.0,0.616,0.608,0.0,0.578,0,0.534,0.0,0.584,0.0,0.542,0.59,0.596,0.0,0.632,0.598,0.53,0.606,0.0,0.59,0.61,0.0,0.566,0.0,0.55,0.552,0.0,0.524,0.522,0,0.544,0.558,0.558,0.584,0.556,0.568,0.55,0.6,0.616,0.59,0.566,0.524,0.58,0.0,0.0
44752,0.54,0.594,0.604,0.604,0.512,0.624,0.58,0.59,0.61,0.608,0.598,0.6,0.604,0.0,0.618,0.564,0.572,0.532,0.546,0.614,0.574,0.616,0.606,0.584,0.608,0.618,0.574,0.586,0.626,0.0,0.6,0.582,0.0,0.55,0.584,0.596,0.61,0.6,0.618,0,0.52,0.65,0.6,0.558,0.596,0.592,0.6,0.6,0.55,0.6,0.0,0.594,0.538,0.52,0.578,0.55,0.604,0.606,0.6,0.604,0.566,0.616,0.602,0.618,0.56,0.526,0.62,0.624,0.6,0.608,0.624,0.568,0.61,0.63,0.602,0.58,0.554,0.6,0.618,0,0.6,0.0,0.616,0.0,0.0,0.524,0.592,0.546,0.612,0.6,0.6,0.6,0.574,0.554,0.588,0.0,0.526,0.594,0.6,0.612,0.604,0.572,0.634,0.616,0.578,0.0,0.624,0.6,0.0,0.614,0,0.54,0.0,0.568,0.0,0.59,0.61,0.602,0.682,0.618,0.602,0.536,0.6,0.0,0.6,0.588,0.0,0.578,0.0,0.592,0.598,0.676,0.566,0.57,0,0.57,0.594,0.61,0.624,0.588,0.576,0.63,0.6,0.632,0.592,0.594,0.504,0.62,0.68,0.0
44753,0.878,0.756,0.748,0.8,0.584,0.838,0.75,0.918,0.878,0.766,0.75,0.75,0.824,0.0,0.75,0.9,0.75,0.862,0.94,0.75,0.744,0.75,0.752,0.75,0.796,0.75,0.752,0.746,0.764,0.0,0.75,0.834,0.0,0.748,0.9,0.732,0.916,0.75,0.776,0,0.572,0.782,0.75,0.922,0.804,0.878,0.75,0.75,0.912,0.75,0.0,0.92,0.822,0.834,0.75,0.728,0.874,0.804,0.756,0.75,0.774,0.752,0.754,0.75,0.75,0.568,0.87,0.834,0.75,0.762,0.75,0.804,0.816,0.74,0.752,0.906,0.912,0.75,0.75,0,0.75,0.0,0.836,0.808,0.0,0.25,0.744,0.944,0.764,0.75,0.75,0.724,0.738,0.788,0.852,0.75,0.914,0.828,0.75,0.754,0.92,0.724,0.84,0.898,0.784,0.0,0.848,0.75,0.85,0.862,0,0.864,0.0,0.746,0.0,0.82,0.856,0.774,0.836,0.804,0.75,0.562,0.75,0.0,0.75,0.756,0.0,0.846,0.0,0.91,0.848,0.794,0.916,0.766,0,0.702,0.922,0.75,0.886,0.868,0.746,0.748,0.75,0.794,0.762,0.784,0.658,0.842,0.79,0.0
44754,0.88,0.724,0.748,0.786,0.598,0.842,0.752,0.93,0.918,0.756,0.75,0.75,0.8,0.0,0.75,0.89,0.754,0.878,0.964,0.75,0.736,0.75,0.75,0.752,0.782,0.75,0.756,0.754,0.756,0.0,0.75,0.804,0.0,0.756,0.902,0.75,0.938,0.75,0.768,0,0.588,0.784,0.738,0.924,0.8,0.89,0.738,0.75,0.908,0.75,0.0,0.908,0.802,0.848,0.748,0.742,0.858,0.778,0.75,0.748,0.758,0.75,0.75,0.75,0.74,0.592,0.85,0.84,0.754,0.754,0.752,0.8,0.81,0.736,0.748,0.918,0.928,0.75,0.75,0,0.75,0.0,0.84,0.816,0.0,0.25,0.76,0.964,0.752,0.75,0.75,0.714,0.748,0.824,0.852,0.0,0.91,0.834,0.75,0.746,0.918,0.614,0.84,0.846,0.782,0.794,0.826,0.738,0.802,0.856,0,0.876,0.0,0.704,0.0,0.826,0.848,0.768,0.776,0.806,0.75,0.6,0.75,0.0,0.73,0.746,0.0,0.832,0.0,0.926,0.822,0.794,0.916,0.762,0,0.72,0.916,0.748,0.882,0.868,0.752,0.736,0.75,0.784,0.76,0.764,0.596,0.832,0.766,0.0
44755,0.878,0.706,0.744,0.784,0.55,0.828,0.724,0.92,0.914,0.758,0.75,0.75,0.816,0.0,0.75,0.886,0.72,0.858,0.942,0.75,0.73,0.0,0.75,0.756,0.766,0.75,0.754,0.722,0.76,0.0,0.75,0.816,0.0,0.762,0.904,0.74,0.936,0.75,0.778,0,0.596,0.0,0.75,0.926,0.812,0.9,0.75,0.75,0.91,0.75,0.0,0.896,0.822,0.798,0.75,0.746,0.854,0.782,0.752,0.75,0.738,0.752,0.752,0.75,0.75,0.588,0.856,0.882,0.75,0.758,0.75,0.792,0.804,0.736,0.762,0.9,0.9,0.75,0.75,0,0.75,0.0,0.842,0.0,0.0,0.25,0.75,0.944,0.756,0.75,0.75,0.73,0.73,0.798,0.832,0.0,0.898,0.814,0.75,0.746,0.924,0.666,0.842,0.892,0.776,0.0,0.834,0.75,0.0,0.874,0,0.848,0.0,0.746,0.0,0.832,0.82,0.782,0.832,0.808,0.75,0.582,0.75,0.0,0.782,0.74,0.0,0.84,0.0,0.918,0.806,0.786,0.886,0.758,0,0.716,0.902,0.744,0.884,0.866,0.732,0.732,0.75,0.784,0.756,0.774,0.61,0.84,0.8,0.0
44756,0.874,0.734,0.746,0.8,0.584,0.828,0.74,0.932,0.894,0.754,0.75,0.75,0.82,0.0,0.75,0.88,0.74,0.88,0.958,0.75,0.762,0.75,0.75,0.748,0.766,0.75,0.756,0.738,0.762,0.0,0.75,0.804,0.0,0.756,0.896,0.736,0.912,0.75,0.77,0,0.584,0.76,0.75,0.91,0.798,0.9,0.75,0.75,0.916,0.748,0.0,0.89,0.828,0.836,0.75,0.71,0.87,0.788,0.754,0.756,0.736,0.75,0.752,0.75,0.744,0.578,0.868,0.804,0.75,0.754,0.75,0.788,0.792,0.732,0.752,0.882,0.902,0.75,0.75,0,0.75,0.0,0.844,0.0,0.0,0.25,0.746,0.962,0.758,0.75,0.75,0.69,0.742,0.8,0.852,0.75,0.9,0.848,0.75,0.748,0.896,0.604,0.854,0.844,0.788,0.846,0.828,0.75,0.826,0.876,0,0.846,0.0,0.742,0.0,0.84,0.814,0.77,0.884,0.784,0.75,0.582,0.75,0.0,0.74,0.716,0.0,0.832,0.0,0.878,0.838,0.898,0.906,0.772,0,0.692,0.91,0.748,0.894,0.858,0.754,0.72,0.75,0.794,0.76,0.766,0.606,0.852,0.798,0.0
44757,0.87,0.712,0.762,0.774,0.518,0.802,0.73,0.9,0.876,0.752,0.75,0.75,0.78,0.0,0.75,0.888,0.724,0.864,0.946,0.756,0.742,0.75,0.754,0.752,0.758,0.75,0.748,0.722,0.764,0.0,0.75,0.79,0.0,0.74,0.876,0.734,0.902,0.75,0.764,0,0.604,0.734,0.75,0.92,0.78,0.89,0.75,0.75,0.92,0.742,0.0,0.88,0.812,0.82,0.75,0.688,0.84,0.776,0.75,0.734,0.71,0.758,0.76,0.75,0.75,0.578,0.83,0.776,0.748,0.76,0.752,0.798,0.768,0.746,0.76,0.894,0.852,0.75,0.75,0,0.75,0.0,0.81,0.784,0.0,0.25,0.74,0.946,0.764,0.75,0.75,0.704,0.716,0.786,0.812,0.0,0.904,0.818,0.75,0.746,0.908,0.656,0.824,0.806,0.77,0.782,0.792,0.75,0.792,0.838,0,0.856,0.0,0.73,0.0,0.812,0.816,0.768,0.794,0.774,0.75,0.544,0.75,0.0,0.716,0.74,0.0,0.812,0.0,0.898,0.766,0.778,0.86,0.738,0,0.704,0.904,0.754,0.868,0.818,0.72,0.708,0.75,0.776,0.762,0.778,0.642,0.806,0.776,0.0
44758,0.884,0.856,0.878,0.898,0.582,0.892,0.546,0.894,0.882,0.89,0.888,0.878,0.894,0.0,0.888,0.894,0.886,0.86,0.874,0.888,0.878,0.886,0.888,0.898,0.878,0.888,0.878,0.878,0.898,0.878,0.878,0.89,0.0,0.896,0.898,0.89,0.87,0.878,0.888,0,0.878,0.876,0.888,0.89,0.89,0.84,0.888,0.878,0.878,0.888,0.0,0.856,0.828,0.884,0.878,0.876,0.898,0.89,0.878,0.896,0.874,0.888,0.888,0.888,0.88,0.792,0.896,0.884,0.878,0.888,0.896,0.876,0.878,0.878,0.89,0.868,0.864,0.878,0.888,0,0.878,0.878,0.89,0.0,0.582,0.878,0.888,0.868,0.894,0.878,0.878,0.898,0.866,0.86,0.892,0.612,0.898,0.898,0.878,0.9,0.858,0.852,0.896,0.888,0.878,0.886,0.898,0.888,0.87,0.894,0,0.832,0.582,0.866,0.0,0.896,0.876,0.886,0.85,0.882,0.892,0.688,0.878,0.878,0.868,0.882,0.878,0.894,0.528,0.878,0.894,0.874,0.894,0.878,0,0.884,0.868,0.878,0.896,0.888,0.878,0.886,0.878,0.898,0.894,0.892,0.79,0.898,0.884,0.898
44759,0.886,0.886,0.878,0.894,0.558,0.894,0.522,0.898,0.892,0.894,0.894,0.878,0.894,0.0,0.894,0.902,0.9,0.834,0.866,0.894,0.878,0.894,0.894,0.9,0.878,0.894,0.878,0.878,0.894,0.878,0.878,0.894,0.9,0.894,0.9,0.89,0.87,0.878,0.894,0,0.884,0.894,0.894,0.902,0.894,0.76,0.894,0.878,0.878,0.894,0.0,0.896,0.8,0.882,0.878,0.88,0.9,0.888,0.878,0.894,0.864,0.894,0.894,0.894,0.9,0.83,0.894,0.894,0.878,0.894,0.894,0.876,0.878,0.878,0.894,0.892,0.84,0.878,0.894,0,0.878,0.878,0.894,0.0,0.558,0.876,0.894,0.856,0.894,0.878,0.878,0.894,0.878,0.874,0.89,0.89,0.9,0.894,0.878,0.904,0.884,0.692,0.898,0.888,0.878,0.896,0.896,0.894,0.878,0.896,0,0.864,0.558,0.878,0.0,0.894,0.894,0.894,0.866,0.882,0.894,0.668,0.878,0.878,0.866,0.874,0.878,0.898,0.696,0.894,0.892,0.892,0.904,0.878,0,0.892,0.876,0.878,0.902,0.896,0.878,0.888,0.878,0.894,0.894,0.898,0.822,0.896,0.878,0.894
44760,0.88,0.864,0.878,0.894,0.602,0.892,0.528,0.896,0.89,0.894,0.894,0.878,0.894,0.0,0.892,0.894,0.892,0.856,0.864,0.892,0.878,0.892,0.892,0.892,0.878,0.892,0.878,0.878,0.892,0.878,0.878,0.894,0.892,0.892,0.894,0.902,0.894,0.878,0.892,0,0.862,0.886,0.892,0.892,0.892,0.87,0.892,0.878,0.876,0.892,0.0,0.89,0.82,0.87,0.878,0.878,0.896,0.89,0.878,0.888,0.888,0.892,0.892,0.892,0.88,0.808,0.896,0.892,0.878,0.892,0.894,0.874,0.878,0.878,0.892,0.88,0.848,0.878,0.892,0,0.878,0.878,0.894,0.86,0.604,0.878,0.888,0.862,0.892,0.878,0.878,0.886,0.878,0.88,0.894,0.588,0.894,0.894,0.878,0.89,0.872,0.82,0.894,0.888,0.878,0.87,0.892,0.892,0.878,0.894,0,0.87,0.604,0.878,0.0,0.894,0.9,0.884,0.874,0.886,0.886,0.71,0.878,0.878,0.874,0.858,0.878,0.894,0.55,0.894,0.894,0.894,0.888,0.878,0,0.888,0.876,0.878,0.894,0.894,0.878,0.886,0.878,0.894,0.892,0.894,0.818,0.894,0.882,0.892
44761,0.878,0.894,0.878,0.89,0.55,0.89,0.524,0.89,0.886,0.896,0.882,0.878,0.89,0.0,0.896,0.894,0.894,0.872,0.878,0.896,0.878,0.896,0.896,0.9,0.878,0.896,0.878,0.878,0.896,0.878,0.878,0.896,0.894,0.9,0.898,0.894,0.88,0.878,0.896,0,0.854,0.89,0.896,0.894,0.894,0.85,0.896,0.878,0.878,0.896,0.0,0.888,0.846,0.878,0.878,0.878,0.894,0.88,0.878,0.898,0.888,0.896,0.896,0.896,0.898,0.742,0.896,0.89,0.878,0.896,0.888,0.876,0.878,0.878,0.896,0.886,0.876,0.878,0.896,0,0.878,0.878,0.892,0.0,0.55,0.878,0.888,0.876,0.896,0.878,0.878,0.892,0.878,0.868,0.9,0.888,0.892,0.898,0.878,0.888,0.878,0.382,0.896,0.89,0.878,0.894,0.89,0.896,0.876,0.896,0,0.866,0.55,0.876,0.0,0.898,0.886,0.88,0.874,0.886,0.884,0.646,0.878,0.878,0.87,0.868,0.878,0.89,0.0,0.884,0.894,0.898,0.892,0.878,0,0.894,0.88,0.878,0.892,0.894,0.878,0.876,0.878,0.894,0.896,0.9,0.804,0.894,0.888,0.894
44762,0.878,0.886,0.878,0.904,0.63,0.906,0.574,0.902,0.898,0.904,0.878,0.878,0.904,0.0,0.904,0.9,0.9,0.868,0.874,0.904,0.878,0.906,0.904,0.9,0.878,0.904,0.878,0.878,0.904,0.878,0.878,0.904,0.9,0.902,0.904,0.904,0.88,0.878,0.904,0,0.89,0.886,0.904,0.904,0.904,0.86,0.904,0.878,0.878,0.904,0.0,0.884,0.822,0.89,0.878,0.878,0.902,0.89,0.878,0.904,0.878,0.904,0.904,0.904,0.89,0.808,0.904,0.902,0.878,0.904,0.902,0.874,0.878,0.878,0.904,0.882,0.874,0.878,0.904,0,0.878,0.878,0.904,0.0,0.63,0.878,0.904,0.874,0.904,0.878,0.878,0.904,0.864,0.862,0.904,0.588,0.906,0.904,0.878,0.902,0.88,0.224,0.904,0.904,0.878,0.878,0.904,0.904,0.878,0.904,0,0.866,0.63,0.876,0.0,0.904,0.906,0.896,0.876,0.894,0.884,0.698,0.878,0.878,0.868,0.884,0.878,0.898,0.506,0.882,0.9,0.894,0.898,0.878,0,0.902,0.874,0.878,0.904,0.896,0.878,0.884,0.878,0.904,0.904,0.902,0.714,0.904,0.886,0.904
44763,0.83,0.796,0.832,0.832,0.408,0.83,0.546,0.826,0.824,0.832,0.832,0.832,0.832,0.802,0.834,0.832,0.832,0.788,0.798,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.828,0.832,0.828,0.824,0.796,0.832,0.832,0,0.814,0.832,0.832,0.832,0.83,0.758,0.832,0.832,0.83,0.0,0.806,0.824,0.784,0.804,0.832,0.826,0.834,0.834,0.832,0.832,0.796,0.832,0.832,0.834,0.826,0.186,0.832,0.836,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.826,0.792,0.832,0.834,0,0.832,0.832,0.832,0.818,0.408,0.832,0.832,0.8,0.832,0.832,0.832,0.832,0.832,0.832,0.834,0.832,0.832,0.832,0.0,0.832,0.806,0.832,0.832,0.828,0.834,0.832,0.832,0.832,0.836,0.832,0,0.822,0.408,0.83,0.832,0.832,0.83,0.832,0.782,0.824,0.832,0.628,0.832,0.832,0.772,0.808,0.832,0.832,0.814,0.816,0.824,0.796,0.832,0.83,0,0.832,0.832,0.832,0.836,0.832,0.832,0.814,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832
44764,0.828,0.814,0.832,0.832,0.386,0.828,0.466,0.824,0.824,0.832,0.832,0.832,0.834,0.8,0.828,0.832,0.832,0.752,0.778,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.828,0.832,0.832,0.832,0.832,0.832,0.826,0.832,0.818,0.832,0.794,0.832,0.832,0,0.818,0.808,0.832,0.832,0.83,0.786,0.828,0.832,0.832,0.0,0.818,0.82,0.762,0.812,0.832,0.832,0.828,0.808,0.832,0.83,0.814,0.832,0.832,0.828,0.83,0.182,0.82,0.834,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.826,0.77,0.832,0.828,0,0.832,0.832,0.832,0.792,0.386,0.832,0.832,0.778,0.832,0.832,0.832,0.824,0.832,0.828,0.832,0.474,0.83,0.832,0.0,0.828,0.792,0.83,0.832,0.832,0.832,0.834,0.822,0.832,0.818,0.832,0,0.812,0.386,0.822,0.832,0.822,0.83,0.832,0.812,0.818,0.832,0.578,0.832,0.832,0.794,0.808,0.832,0.832,0.744,0.814,0.814,0.796,0.826,0.832,0,0.832,0.832,0.832,0.826,0.832,0.832,0.83,0.832,0.832,0.832,0.828,0.832,0.832,0.822,0.828
44765,0.824,0.788,0.832,0.832,0.37,0.826,0.514,0.822,0.822,0.832,0.832,0.832,0.828,0.812,0.832,0.832,0.832,0.77,0.782,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.83,0.832,0.832,0.832,0.832,0.832,0.828,0.832,0.826,0.832,0.798,0.832,0.832,0,0.818,0.824,0.832,0.832,0.824,0.772,0.832,0.832,0.834,0.0,0.8,0.812,0.772,0.808,0.832,0.822,0.828,0.832,0.832,0.832,0.812,0.832,0.832,0.832,0.802,0.182,0.826,0.83,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.808,0.778,0.832,0.832,0,0.832,0.832,0.832,0.796,0.37,0.83,0.832,0.782,0.832,0.832,0.832,0.796,0.832,0.824,0.83,0.832,0.828,0.832,0.0,0.832,0.788,0.8,0.828,0.832,0.832,0.83,0.826,0.832,0.828,0.83,0,0.81,0.37,0.824,0.826,0.832,0.824,0.832,0.81,0.806,0.832,0.61,0.832,0.832,0.782,0.796,0.832,0.83,0.832,0.82,0.826,0.79,0.828,0.82,0,0.832,0.832,0.832,0.818,0.83,0.832,0.812,0.832,0.832,0.832,0.832,0.832,0.828,0.824,0.826
44766,0.832,0.82,0.832,0.832,0.398,0.832,0.5,0.83,0.826,0.832,0.832,0.832,0.832,0.804,0.832,0.832,0.832,0.758,0.772,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.84,0.832,0.832,0.828,0.8,0.832,0.832,0,0.822,0.822,0.832,0.832,0.832,0.764,0.832,0.832,0.834,0.0,0.812,0.824,0.772,0.8,0.832,0.822,0.832,0.79,0.832,0.83,0.81,0.832,0.832,0.832,0.834,0.178,0.83,0.826,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.824,0.766,0.832,0.832,0,0.832,0.832,0.832,0.798,0.398,0.832,0.83,0.772,0.832,0.832,0.832,0.826,0.832,0.828,0.834,0.418,0.832,0.832,0.0,0.832,0.79,0.822,0.832,0.834,0.83,0.828,0.836,0.832,0.824,0.832,0,0.824,0.398,0.826,0.834,0.832,0.828,0.832,0.822,0.822,0.832,0.556,0.832,0.832,0.81,0.808,0.832,0.832,0.79,0.822,0.832,0.814,0.83,0.828,0,0.832,0.832,0.832,0.836,0.832,0.832,0.838,0.832,0.832,0.832,0.832,0.832,0.83,0.824,0.83
44767,0.832,0.82,0.832,0.832,0.356,0.826,0.512,0.828,0.828,0.832,0.832,0.832,0.832,0.798,0.832,0.832,0.834,0.748,0.776,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.824,0.832,0.828,0.824,0.792,0.832,0.832,0,0.818,0.808,0.832,0.832,0.832,0.758,0.832,0.832,0.824,0.0,0.79,0.814,0.77,0.82,0.832,0.826,0.832,0.818,0.832,0.83,0.804,0.832,0.832,0.832,0.83,0.182,0.83,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.832,0.826,0.768,0.832,0.832,0,0.832,0.832,0.832,0.804,0.356,0.832,0.836,0.778,0.832,0.832,0.832,0.818,0.832,0.834,0.83,0.48,0.832,0.832,0.0,0.832,0.79,0.812,0.832,0.818,0.832,0.826,0.828,0.832,0.824,0.832,0,0.818,0.356,0.822,0.83,0.83,0.834,0.832,0.816,0.824,0.832,0.59,0.832,0.832,0.772,0.812,0.832,0.832,0.346,0.812,0.828,0.822,0.822,0.824,0,0.832,0.832,0.832,0.834,0.832,0.832,0.79,0.832,0.83,0.832,0.832,0.832,0.832,0.832,0.832
44768,0.718,0.674,0.716,0.724,0.524,0.73,0.722,0.726,0.742,0.716,0.716,0.716,0.724,0.664,0.716,0.714,0.722,0.71,0.718,0.718,0.716,0.716,0.716,0.716,0.716,0.716,0.718,0.724,0.726,0.716,0.716,0.72,0.73,0.716,0.724,0.716,0.724,0.716,0.712,0,0.64,0.69,0.716,0.714,0.732,0.704,0.716,0.716,0.702,0.0,0.694,0.734,0.694,0.694,0.716,0.714,0.728,0.714,0.716,0.714,0.702,0.716,0.72,0.716,0.69,0.422,0.712,0.728,0.716,0.716,0.718,0.718,0.716,0.716,0.716,0.744,0.72,0.716,0.716,0,0.716,0.716,0.724,0.0,0.52,0.714,0.71,0.716,0.716,0.716,0.716,0.7,0.652,0.724,0.724,0.702,0.736,0.72,0.716,0.718,0.722,0.574,0.732,0.72,0.716,0.726,0.722,0.716,0.0,0.732,0,0.73,0.518,0.692,0.738,0.728,0.734,0.716,0.7,0.72,0.716,0.596,0.718,0.716,0.686,0.688,0.716,0.716,0.716,0.708,0.726,0.724,0.714,0.724,0,0.712,0.71,0.716,0.73,0.716,0.722,0.678,0.716,0.734,0.72,0.716,0.678,0.732,0.72,0.736

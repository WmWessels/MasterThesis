0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44669,0.0,0.458,0.48,0.542,0.0,0.582,0.298,0.614,0.578,0.474,0.298,0.0,0.568,0.0,0.476,0.278,0.466,0.522,0.0,0.512,0.504,0.494,0.5,0.432,0.524,0.466,0.412,0.468,0.52,0.0,0.466,0.454,0.566,0.278,0.542,0.48,0.586,0.298,0.518,0,0.302,0.496,0.484,0.298,0.554,0.516,0.476,0.298,0.298,0.394,0.0,0.58,0.438,0.418,0.488,0.478,0.546,0.43,0.498,0.478,0.432,0.516,0.5,0.476,0.382,0.284,0.52,0.548,0.298,0.514,0.532,0.428,0.538,0.346,0.298,0.558,0.508,0.298,0.476,0,0.516,0.0,0.536,0.0,0.0,0.436,0.456,0.0,0.514,0.496,0.298,0.516,0.39,0.0,0.486,0.0,0.0,0.522,0.48,0.46,0.546,0.396,0.556,0.496,0.502,0.484,0.582,0.484,0.0,0.554,0,0.0,0.0,0.46,0.0,0.538,0.55,0.542,0.5,0.57,0.49,0.458,0.478,0.0,0.476,0.43,0.0,0.574,0.0,0.586,0.534,0.516,0.504,0.478,0,0.362,0.516,0.474,0.566,0.552,0.298,0.496,0.476,0.532,0.504,0.504,0.0,0.542,0.498,0.518
44670,0.0,0.492,0.5,0.518,0.0,0.574,0.298,0.594,0.56,0.408,0.298,0.0,0.55,0.0,0.414,0.278,0.468,0.584,0.0,0.47,0.508,0.466,0.466,0.392,0.512,0.432,0.416,0.42,0.488,0.0,0.432,0.404,0.582,0.278,0.518,0.464,0.562,0.298,0.488,0,0.314,0.572,0.426,0.298,0.566,0.516,0.424,0.298,0.298,0.394,0.0,0.538,0.392,0.428,0.492,0.532,0.566,0.438,0.478,0.494,0.4,0.452,0.474,0.414,0.378,0.312,0.514,0.56,0.298,0.458,0.51,0.432,0.544,0.36,0.298,0.524,0.556,0.298,0.414,0,0.442,0.0,0.548,0.0,0.0,0.454,0.442,0.0,0.482,0.44,0.298,0.51,0.41,0.0,0.442,0.0,0.0,0.502,0.432,0.498,0.536,0.418,0.564,0.446,0.512,0.458,0.578,0.426,0.0,0.552,0,0.0,0.0,0.434,0.0,0.516,0.522,0.5,0.544,0.542,0.43,0.452,0.422,0.0,0.466,0.482,0.0,0.52,0.0,0.572,0.502,0.588,0.526,0.422,0,0.346,0.524,0.502,0.598,0.532,0.298,0.502,0.428,0.514,0.474,0.446,0.0,0.522,0.56,0.522
44671,0.0,0.47,0.478,0.5,0.0,0.526,0.298,0.56,0.566,0.442,0.298,0.0,0.53,0.0,0.438,0.278,0.45,0.498,0.0,0.492,0.498,0.496,0.486,0.366,0.514,0.438,0.412,0.452,0.494,0.0,0.438,0.434,0.552,0.278,0.544,0.48,0.554,0.298,0.482,0,0.284,0.472,0.464,0.298,0.522,0.546,0.464,0.298,0.298,0.35,0.0,0.53,0.438,0.406,0.484,0.476,0.546,0.412,0.482,0.484,0.398,0.482,0.492,0.438,0.38,0.266,0.518,0.534,0.298,0.498,0.512,0.426,0.52,0.332,0.298,0.542,0.498,0.298,0.438,0,0.476,0.0,0.51,0.0,0.0,0.424,0.47,0.0,0.5,0.48,0.298,0.442,0.39,0.0,0.486,0.0,0.0,0.508,0.448,0.468,0.542,0.398,0.526,0.452,0.498,0.454,0.524,0.464,0.53,0.522,0,0.0,0.0,0.45,0.0,0.522,0.526,0.514,0.516,0.51,0.452,0.418,0.474,0.0,0.44,0.444,0.0,0.506,0.0,0.57,0.532,0.522,0.472,0.444,0,0.34,0.514,0.488,0.57,0.53,0.298,0.446,0.448,0.502,0.492,0.45,0.0,0.514,0.49,0.512
44672,0.0,0.468,0.496,0.502,0.0,0.522,0.298,0.568,0.54,0.43,0.298,0.0,0.522,0.0,0.432,0.278,0.464,0.554,0.0,0.474,0.484,0.48,0.474,0.372,0.538,0.446,0.428,0.436,0.468,0.0,0.452,0.392,0.542,0.278,0.55,0.47,0.548,0.298,0.46,0,0.296,0.502,0.444,0.298,0.506,0.304,0.446,0.298,0.298,0.388,0.0,0.546,0.426,0.45,0.47,0.5,0.518,0.432,0.486,0.488,0.466,0.466,0.47,0.432,0.42,0.266,0.54,0.532,0.298,0.488,0.496,0.374,0.54,0.348,0.298,0.538,0.532,0.298,0.432,0,0.472,0.0,0.558,0.0,0.0,0.458,0.46,0.0,0.488,0.47,0.298,0.466,0.366,0.0,0.492,0.0,0.0,0.514,0.458,0.478,0.52,0.392,0.526,0.476,0.498,0.45,0.542,0.444,0.522,0.516,0,0.0,0.0,0.444,0.0,0.532,0.534,0.502,0.51,0.524,0.456,0.414,0.46,0.0,0.466,0.448,0.0,0.524,0.0,0.544,0.518,0.554,0.498,0.456,0,0.324,0.48,0.504,0.55,0.524,0.298,0.45,0.45,0.514,0.49,0.454,0.0,0.526,0.524,0.502
44673,0.928,0.93,0.922,0.93,0.914,0.93,0.944,0.946,0.946,0.792,0.904,0.0,0.93,0.916,0.896,0.92,0.944,0.938,0.0,0.924,0.928,0.93,0.924,0.91,0.726,0.896,0.752,0.944,0.93,0.556,0.556,0.704,0.942,0.91,0.936,0.902,0.948,0.896,0.922,0,0.91,0.944,0.886,0.924,0.928,0.8,0.886,0.556,0.896,0.91,0.924,0.95,0.618,0.942,0.574,0.928,0.942,0.738,0.746,0.924,0.914,0.924,0.92,0.896,0.678,0.91,0.924,0.926,0.59,0.926,0.924,0.936,0.752,0.908,0.926,0.942,0.934,0.556,0.896,0,0.892,0.892,0.93,0.814,0.926,0.792,0.934,0.0,0.926,0.896,0.556,0.926,0.932,0.0,0.83,0.902,0.932,0.928,0.748,0.934,0.948,0.554,0.924,0.92,0.66,0.928,0.934,0.886,0.676,0.934,0,0.0,0.926,0.628,0.934,0.922,0.948,0.922,0.928,0.928,0.922,0.908,0.556,0.556,0.936,0.918,0.776,0.934,0.632,0.952,0.918,0.934,0.932,0.604,0,0.91,0.95,0.916,0.932,0.93,0.932,0.932,0.556,0.932,0.926,0.8,0.0,0.934,0.946,0.918
44674,0.91,0.942,0.948,0.952,0.934,0.954,0.956,0.96,0.976,0.94,0.916,0.0,0.944,0.942,0.89,0.944,0.954,0.952,0.0,0.932,0.948,0.944,0.92,0.932,0.694,0.89,0.698,0.954,0.942,0.556,0.556,0.896,0.952,0.93,0.954,0.888,0.976,0.89,0.944,0,0.932,0.96,0.9,0.95,0.942,0.82,0.906,0.556,0.894,0.932,0.946,0.972,0.534,0.946,0.658,0.958,0.964,0.918,0.74,0.95,0.89,0.934,0.938,0.89,0.876,0.93,0.946,0.956,0.556,0.934,0.922,0.946,0.728,0.898,0.94,0.972,0.96,0.556,0.89,0,0.912,0.768,0.954,0.836,0.944,0.846,0.954,0.0,0.946,0.89,0.556,0.942,0.938,0.0,0.936,0.922,0.954,0.95,0.726,0.942,0.978,0.746,0.946,0.918,0.646,0.938,0.958,0.9,0.732,0.942,0,0.0,0.944,0.694,0.952,0.952,0.956,0.944,0.948,0.942,0.944,0.942,0.538,0.556,0.942,0.936,0.668,0.954,0.658,0.972,0.938,0.954,0.956,0.54,0,0.93,0.968,0.938,0.942,0.952,0.952,0.94,0.556,0.94,0.944,0.934,0.0,0.958,0.962,0.93
44675,0.914,0.924,0.91,0.928,0.9,0.928,0.93,0.956,0.954,0.904,0.906,0.0,0.926,0.924,0.884,0.908,0.93,0.946,0.0,0.916,0.914,0.922,0.916,0.916,0.696,0.884,0.718,0.93,0.926,0.556,0.556,0.88,0.94,0.916,0.92,0.886,0.734,0.884,0.91,0,0.9,0.922,0.874,0.914,0.928,0.916,0.874,0.556,0.886,0.906,0.932,0.948,0.586,0.938,0.572,0.922,0.944,0.84,0.672,0.92,0.866,0.916,0.918,0.884,0.834,0.896,0.928,0.918,0.644,0.918,0.908,0.926,0.752,0.902,0.906,0.946,0.93,0.556,0.884,0,0.9,0.844,0.934,0.814,0.908,0.782,0.922,0.0,0.922,0.894,0.556,0.926,0.91,0.0,0.894,0.922,0.932,0.914,0.734,0.924,0.94,0.64,0.936,0.908,0.682,0.91,0.934,0.874,0.69,0.948,0,0.0,0.91,0.604,0.93,0.91,0.932,0.916,0.936,0.938,0.916,0.922,0.552,0.556,0.904,0.924,0.646,0.93,0.736,0.944,0.92,0.938,0.93,0.556,0,0.9,0.944,0.91,0.92,0.932,0.92,0.924,0.556,0.92,0.92,0.874,0.0,0.944,0.934,0.928
44676,0.922,0.916,0.916,0.93,0.914,0.926,0.928,0.94,0.94,0.904,0.922,0.0,0.932,0.916,0.884,0.922,0.924,0.936,0.0,0.916,0.916,0.928,0.918,0.928,0.65,0.884,0.644,0.924,0.914,0.556,0.556,0.904,0.912,0.924,0.932,0.854,0.914,0.884,0.918,0,0.91,0.942,0.782,0.93,0.922,0.924,0.782,0.556,0.834,0.918,0.916,0.934,0.544,0.922,0.66,0.926,0.938,0.858,0.762,0.918,0.9,0.92,0.916,0.884,0.866,0.908,0.924,0.928,0.6,0.922,0.922,0.928,0.704,0.914,0.922,0.934,0.936,0.556,0.884,0,0.898,0.864,0.926,0.794,0.922,0.814,0.93,0.0,0.92,0.886,0.556,0.908,0.904,0.0,0.906,0.926,0.916,0.918,0.75,0.928,0.938,0.842,0.924,0.91,0.658,0.926,0.93,0.782,0.718,0.924,0,0.0,0.922,0.658,0.934,0.924,0.94,0.928,0.946,0.922,0.93,0.93,0.55,0.556,0.92,0.926,0.714,0.934,0.686,0.936,0.916,0.928,0.938,0.554,0,0.91,0.928,0.912,0.918,0.932,0.93,0.91,0.556,0.92,0.928,0.908,0.0,0.934,0.938,0.92
44677,0.926,0.918,0.932,0.928,0.918,0.926,0.934,0.934,0.932,0.918,0.918,0.0,0.926,0.918,0.9,0.918,0.922,0.932,0.0,0.926,0.93,0.928,0.922,0.918,0.674,0.9,0.688,0.928,0.912,0.556,0.556,0.856,0.932,0.92,0.944,0.916,0.778,0.9,0.916,0,0.916,0.928,0.922,0.912,0.924,0.924,0.922,0.556,0.89,0.918,0.92,0.938,0.556,0.932,0.588,0.914,0.926,0.89,0.71,0.928,0.922,0.926,0.92,0.9,0.91,0.92,0.938,0.918,0.556,0.924,0.922,0.93,0.716,0.91,0.922,0.936,0.926,0.556,0.9,0,0.924,0.78,0.93,0.868,0.914,0.836,0.938,0.0,0.926,0.9,0.556,0.904,0.904,0.0,0.918,0.912,0.934,0.932,0.678,0.924,0.942,0.816,0.928,0.9,0.692,0.918,0.93,0.922,0.672,0.926,0,0.0,0.914,0.682,0.932,0.938,0.932,0.926,0.942,0.93,0.926,0.92,0.556,0.556,0.912,0.916,0.656,0.93,0.74,0.936,0.938,0.928,0.932,0.548,0,0.918,0.928,0.93,0.918,0.932,0.936,0.908,0.556,0.922,0.926,0.906,0.0,0.93,0.93,0.91
44678,0.914,0.908,0.692,0.92,0.0,0.916,0.874,0.918,0.918,0.87,0.512,0.904,0.906,0.0,0.904,0.502,0.892,0.792,0.822,0.914,0.804,0.91,0.914,0.524,0.5,0.904,0.734,0.832,0.918,0.906,0.5,0.872,0.926,0.492,0.886,0.832,0.924,0.522,0.918,0,0.528,0.916,0.748,0.51,0.912,0.93,0.748,0.512,0.746,0.0,0.914,0.912,0.576,0.772,0.504,0.732,0.926,0.834,0.68,0.786,0.858,0.914,0.918,0.904,0.808,0.526,0.884,0.918,0.5,0.914,0.906,0.792,0.518,0.602,0.512,0.91,0.718,0.5,0.904,0,0.904,0.0,0.916,0.0,0.0,0.468,0.898,0.72,0.918,0.906,0.5,0.91,0.77,0.916,0.868,0.0,0.926,0.874,0.59,0.786,0.93,0.808,0.92,0.92,0.484,0.906,0.916,0.748,0.522,0.93,0,0.914,0.0,0.492,0.91,0.882,0.91,0.906,0.906,0.924,0.902,0.892,0.574,0.0,0.9,0.892,0.0,0.908,0.0,0.924,0.884,0.918,0.842,0.542,0,0.526,0.862,0.686,0.928,0.908,0.836,0.912,0.858,0.918,0.92,0.848,0.876,0.924,0.93,0.914
44679,0.916,0.892,0.674,0.916,0.0,0.92,0.886,0.92,0.918,0.86,0.488,0.91,0.918,0.0,0.91,0.496,0.912,0.778,0.786,0.922,0.758,0.916,0.922,0.47,0.484,0.91,0.69,0.842,0.92,0.922,0.5,0.844,0.918,0.482,0.9,0.83,0.918,0.51,0.926,0,0.51,0.928,0.734,0.504,0.914,0.92,0.744,0.484,0.772,0.0,0.0,0.918,0.544,0.772,0.486,0.7,0.926,0.864,0.662,0.784,0.872,0.924,0.92,0.91,0.788,0.51,0.894,0.918,0.5,0.918,0.916,0.816,0.522,0.564,0.5,0.918,0.712,0.5,0.91,0,0.914,0.0,0.934,0.0,0.0,0.518,0.9,0.682,0.92,0.902,0.5,0.914,0.698,0.918,0.87,0.0,0.928,0.894,0.662,0.768,0.916,0.814,0.93,0.916,0.496,0.918,0.928,0.734,0.47,0.93,0,0.908,0.0,0.482,0.914,0.88,0.916,0.92,0.906,0.928,0.892,0.888,0.598,0.0,0.884,0.918,0.0,0.912,0.0,0.922,0.886,0.924,0.852,0.546,0,0.51,0.836,0.68,0.928,0.918,0.846,0.908,0.864,0.92,0.926,0.868,0.896,0.926,0.92,0.918
44680,0.944,0.908,0.714,0.938,0.0,0.946,0.888,0.944,0.942,0.872,0.48,0.93,0.944,0.932,0.928,0.472,0.922,0.802,0.826,0.938,0.826,0.912,0.94,0.508,0.502,0.928,0.696,0.842,0.946,0.946,0.5,0.826,0.952,0.478,0.928,0.846,0.942,0.5,0.944,0,0.478,0.936,0.752,0.482,0.944,0.93,0.764,0.474,0.802,0.0,0.936,0.938,0.552,0.78,0.522,0.728,0.944,0.856,0.7,0.79,0.886,0.934,0.942,0.928,0.786,0.478,0.92,0.94,0.5,0.942,0.944,0.824,0.538,0.63,0.48,0.932,0.738,0.5,0.928,0,0.932,0.0,0.944,0.492,0.0,0.504,0.886,0.724,0.936,0.926,0.5,0.916,0.734,0.94,0.858,0.0,0.95,0.922,0.612,0.798,0.944,0.832,0.944,0.934,0.464,0.926,0.942,0.752,0.534,0.946,0,0.93,0.0,0.504,0.942,0.91,0.948,0.938,0.924,0.932,0.892,0.89,0.56,0.0,0.9,0.912,0.0,0.936,0.0,0.942,0.916,0.946,0.848,0.534,0,0.478,0.876,0.708,0.948,0.942,0.838,0.906,0.91,0.948,0.946,0.852,0.888,0.946,0.94,0.942
44681,0.932,0.92,0.694,0.926,0.0,0.932,0.884,0.924,0.938,0.908,0.502,0.914,0.922,0.92,0.914,0.524,0.906,0.8,0.792,0.922,0.794,0.92,0.92,0.522,0.514,0.914,0.73,0.84,0.924,0.93,0.5,0.888,0.932,0.522,0.92,0.834,0.95,0.526,0.93,0,0.506,0.938,0.742,0.504,0.932,0.934,0.776,0.51,0.79,0.0,0.922,0.934,0.562,0.8,0.508,0.74,0.928,0.836,0.732,0.766,0.886,0.918,0.92,0.914,0.826,0.506,0.912,0.93,0.5,0.924,0.92,0.818,0.462,0.602,0.526,0.934,0.738,0.5,0.914,0,0.918,0.0,0.932,0.0,0.0,0.498,0.888,0.714,0.922,0.914,0.5,0.912,0.76,0.93,0.898,0.0,0.932,0.914,0.64,0.752,0.928,0.83,0.934,0.932,0.51,0.92,0.93,0.742,0.0,0.926,0,0.922,0.0,0.514,0.928,0.912,0.924,0.922,0.91,0.926,0.902,0.904,0.574,0.0,0.898,0.906,0.0,0.92,0.0,0.944,0.91,0.934,0.838,0.58,0,0.506,0.864,0.706,0.944,0.918,0.848,0.922,0.898,0.932,0.922,0.88,0.886,0.932,0.946,0.926
44682,0.922,0.906,0.7,0.92,0.0,0.926,0.894,0.924,0.93,0.892,0.502,0.9,0.914,0.0,0.902,0.5,0.908,0.81,0.818,0.91,0.82,0.912,0.916,0.502,0.52,0.902,0.71,0.838,0.922,0.932,0.5,0.82,0.932,0.5,0.902,0.85,0.924,0.5,0.924,0,0.498,0.928,0.718,0.5,0.924,0.934,0.75,0.504,0.798,0.0,0.926,0.916,0.56,0.786,0.502,0.74,0.932,0.844,0.704,0.774,0.866,0.91,0.912,0.902,0.858,0.502,0.896,0.932,0.5,0.914,0.914,0.84,0.53,0.63,0.502,0.924,0.73,0.5,0.902,0,0.902,0.0,0.934,0.0,0.0,0.474,0.896,0.716,0.924,0.902,0.5,0.912,0.754,0.926,0.906,0.0,0.936,0.896,0.574,0.786,0.928,0.852,0.932,0.916,0.462,0.912,0.936,0.718,0.0,0.928,0,0.912,0.0,0.496,0.924,0.9,0.922,0.912,0.902,0.932,0.902,0.888,0.582,0.0,0.914,0.908,0.0,0.912,0.526,0.932,0.894,0.94,0.848,0.566,0,0.502,0.864,0.706,0.936,0.918,0.844,0.912,0.886,0.932,0.918,0.862,0.88,0.926,0.94,0.918
44683,0.708,0.636,0.674,0.696,0.654,0.722,0.722,0.714,0.69,0.674,0.58,0.666,0.714,0.0,0.628,0.552,0.674,0.68,0.67,0.702,0.67,0.698,0.692,0.54,0.5,0.628,0.53,0.712,0.714,0.0,0.5,0.672,0.0,0.536,0.688,0.588,0.702,0.562,0.696,0,0.566,0.726,0.632,0.526,0.722,0.656,0.632,0.572,0.666,0.538,0.0,0.694,0.568,0.624,0.526,0.68,0.712,0.556,0.648,0.674,0.62,0.684,0.698,0.628,0.576,0.568,0.69,0.696,0.5,0.698,0.706,0.708,0.504,0.662,0.572,0.682,0.672,0.5,0.628,0,0.682,0.628,0.676,0.0,0.654,0.512,0.688,0.662,0.688,0.668,0.5,0.652,0.612,0.71,0.698,0.648,0.704,0.696,0.642,0.696,0.666,0.666,0.724,0.7,0.502,0.676,0.698,0.632,0.536,0.724,0,0.69,0.654,0.48,0.0,0.712,0.684,0.696,0.678,0.694,0.7,0.658,0.614,0.5,0.616,0.604,0.6,0.71,0.512,0.678,0.682,0.72,0.676,0.582,0,0.568,0.714,0.674,0.706,0.702,0.708,0.658,0.692,0.696,0.702,0.652,0.682,0.704,0.704,0.0
44684,0.706,0.618,0.652,0.718,0.666,0.702,0.674,0.702,0.706,0.678,0.588,0.68,0.72,0.0,0.668,0.574,0.684,0.642,0.674,0.694,0.668,0.71,0.706,0.588,0.522,0.658,0.516,0.682,0.706,0.0,0.5,0.596,0.0,0.59,0.676,0.608,0.668,0.596,0.71,0,0.592,0.698,0.596,0.58,0.698,0.624,0.596,0.598,0.606,0.594,0.0,0.67,0.55,0.58,0.484,0.656,0.698,0.574,0.642,0.632,0.578,0.682,0.706,0.668,0.632,0.58,0.686,0.702,0.5,0.696,0.702,0.678,0.502,0.688,0.572,0.71,0.634,0.5,0.668,0,0.7,0.574,0.718,0.0,0.666,0.474,0.692,0.67,0.712,0.71,0.5,0.642,0.6,0.704,0.644,0.666,0.706,0.696,0.64,0.68,0.668,0.65,0.688,0.696,0.48,0.712,0.702,0.596,0.0,0.72,0,0.666,0.666,0.51,0.0,0.676,0.702,0.706,0.682,0.686,0.694,0.646,0.604,0.5,0.6,0.628,0.532,0.686,0.522,0.682,0.64,0.702,0.668,0.542,0,0.58,0.684,0.654,0.726,0.702,0.682,0.584,0.666,0.712,0.698,0.656,0.662,0.712,0.71,0.0
44685,0.702,0.646,0.676,0.722,0.688,0.706,0.71,0.724,0.716,0.676,0.626,0.678,0.74,0.0,0.634,0.538,0.7,0.66,0.69,0.704,0.668,0.722,0.718,0.56,0.496,0.634,0.492,0.708,0.738,0.0,0.5,0.672,0.0,0.562,0.716,0.636,0.69,0.622,0.71,0,0.622,0.704,0.63,0.586,0.712,0.654,0.63,0.61,0.66,0.588,0.0,0.714,0.586,0.632,0.53,0.632,0.71,0.584,0.62,0.672,0.568,0.718,0.728,0.634,0.582,0.62,0.714,0.702,0.5,0.718,0.708,0.684,0.516,0.65,0.612,0.692,0.662,0.5,0.634,0,0.712,0.57,0.722,0.0,0.688,0.504,0.724,0.682,0.712,0.696,0.5,0.634,0.644,0.726,0.684,0.68,0.724,0.724,0.658,0.664,0.692,0.628,0.722,0.712,0.472,0.69,0.714,0.63,0.0,0.73,0,0.658,0.688,0.508,0.0,0.718,0.724,0.744,0.67,0.678,0.698,0.664,0.626,0.5,0.674,0.626,0.562,0.726,0.538,0.728,0.706,0.702,0.642,0.578,0,0.62,0.73,0.678,0.732,0.728,0.706,0.664,0.7,0.716,0.71,0.646,0.692,0.726,0.726,0.0
44686,0.676,0.568,0.656,0.694,0.644,0.686,0.666,0.686,0.666,0.658,0.586,0.654,0.694,0.0,0.558,0.53,0.682,0.64,0.678,0.688,0.674,0.7,0.694,0.578,0.47,0.558,0.56,0.674,0.694,0.0,0.5,0.634,0.0,0.594,0.676,0.6,0.654,0.564,0.71,0,0.566,0.656,0.602,0.584,0.68,0.656,0.602,0.586,0.646,0.584,0.0,0.65,0.526,0.628,0.472,0.658,0.684,0.608,0.594,0.656,0.562,0.702,0.698,0.558,0.532,0.566,0.658,0.682,0.5,0.692,0.672,0.66,0.51,0.624,0.576,0.654,0.678,0.5,0.558,0,0.694,0.584,0.7,0.0,0.644,0.472,0.684,0.66,0.702,0.678,0.5,0.57,0.584,0.684,0.65,0.66,0.702,0.674,0.612,0.658,0.63,0.576,0.708,0.69,0.52,0.704,0.688,0.602,0.48,0.704,0,0.664,0.644,0.48,0.0,0.666,0.668,0.688,0.68,0.636,0.68,0.622,0.578,0.5,0.614,0.582,0.62,0.688,0.498,0.65,0.65,0.694,0.662,0.558,0,0.566,0.694,0.652,0.702,0.704,0.67,0.634,0.672,0.704,0.698,0.674,0.636,0.692,0.678,0.0
44687,0.678,0.61,0.672,0.666,0.656,0.68,0.656,0.676,0.69,0.65,0.612,0.658,0.688,0.0,0.65,0.578,0.65,0.658,0.664,0.672,0.654,0.66,0.678,0.608,0.486,0.65,0.492,0.652,0.666,0.0,0.5,0.638,0.0,0.612,0.69,0.638,0.664,0.624,0.66,0,0.628,0.672,0.614,0.582,0.682,0.598,0.64,0.6,0.648,0.622,0.0,0.656,0.602,0.628,0.518,0.652,0.688,0.578,0.586,0.646,0.598,0.674,0.668,0.65,0.574,0.634,0.662,0.69,0.5,0.668,0.678,0.644,0.508,0.636,0.61,0.648,0.652,0.5,0.65,0,0.676,0.546,0.68,0.0,0.656,0.478,0.678,0.656,0.676,0.656,0.5,0.6,0.616,0.674,0.658,0.656,0.682,0.684,0.644,0.66,0.648,0.592,0.672,0.666,0.52,0.642,0.69,0.614,0.0,0.682,0,0.624,0.656,0.514,0.0,0.67,0.668,0.678,0.646,0.664,0.66,0.654,0.658,0.5,0.608,0.594,0.618,0.672,0.53,0.684,0.652,0.682,0.664,0.64,0,0.634,0.684,0.662,0.67,0.67,0.652,0.64,0.67,0.684,0.672,0.662,0.63,0.686,0.674,0.0
44688,0.524,0.47,0.462,0.54,0.152,0.588,0.522,0.608,0.596,0.494,0.448,0.446,0.576,0.58,0.454,0.41,0.534,0.504,0.552,0.536,0.484,0.522,0.54,0.448,0.514,0.448,0.518,0.452,0.544,0.448,0.448,0.462,0.6,0.472,0.59,0.498,0.22,0.448,0.542,0,0.444,0.584,0.454,0.458,0.564,0.208,0.462,0.448,0.452,0.0,0.586,0.594,0.478,0.454,0.428,0.464,0.598,0.6,0.574,0.492,0.518,0.544,0.542,0.454,0.536,0.18,0.544,0.552,0.448,0.542,0.526,0.024,0.512,0.478,0.462,0.596,0.526,0.448,0.454,0,0.51,0.434,0.538,0.0,0.394,0.358,0.522,0.528,0.538,0.496,0.448,0.47,0.476,0.52,0.572,0.466,0.532,0.542,0.448,0.554,0.404,0.472,0.574,0.526,0.522,0.544,0.572,0.454,0.0,0.574,0,0.076,0.396,0.39,0.594,0.564,0.576,0.532,0.526,0.55,0.448,0.322,0.45,0.448,0.54,0.484,0.448,0.576,0.368,0.572,0.552,0.592,0.602,0.47,0,0.448,0.616,0.448,0.602,0.586,0.444,0.53,0.448,0.562,0.542,0.544,0.488,0.558,0.594,0.558

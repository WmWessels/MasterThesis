0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44649,0.0,0.898,0.882,0.898,0.0,0.898,0.918,0.924,0.89,0.91,0.86,0.0,0.898,0,0.898,0.86,0.92,0.92,0.0,0.89,0.884,0.914,0.89,0.86,0.914,0.898,0.88,0.924,0.89,0.0,0.86,0.926,0.0,0.86,0.924,0.906,0.874,0.86,0.89,0,0.86,0.89,0.894,0.86,0.89,0.888,0.898,0.86,0.922,0.0,0,0.886,0.844,0.914,0.89,0.904,0.924,0.918,0.912,0.886,0.892,0.89,0.89,0.898,0.896,0.86,0.92,0.898,0.86,0.89,0.898,0.902,0.92,0.896,0.86,0.896,0.916,0.86,0.898,0,0.86,0.876,0.922,0.916,0.86,0.878,0.918,0.0,0.89,0.86,0.86,0.89,0.896,0.0,0.92,0.86,0.86,0.92,0.86,0.89,0.89,0.648,0.922,0.924,0.916,0.914,0.912,0.894,0.912,0.922,0,0.0,0.86,0.924,0.0,0.92,0.924,0.86,0.924,0.912,0.86,0.9,0.86,0.86,0.924,0.924,0.86,0.896,0.278,0.906,0.92,0.924,0.92,0.85,0.504,0.86,0.924,0.884,0.922,0.914,0.886,0.92,0.86,0.89,0.89,0.914,0.0,0.912,0.924,0.0
44650,0.0,0.902,0.866,0.902,0.0,0.902,0.906,0.916,0.886,0.892,0.86,0.0,0.886,0,0.886,0.86,0.912,0.91,0.0,0.886,0.888,0.908,0.886,0.86,0.908,0.886,0.886,0.912,0.886,0.0,0.86,0.908,0.0,0.86,0.91,0.908,0.886,0.86,0.886,0,0.86,0.886,0.89,0.86,0.886,0.844,0.89,0.86,0.912,0.0,0,0.886,0.86,0.9,0.866,0.904,0.916,0.91,0.904,0.896,0.906,0.886,0.886,0.886,0.882,0.86,0.906,0.902,0.86,0.886,0.886,0.9,0.91,0.886,0.86,0.886,0.91,0.86,0.886,0,0.86,0.86,0.908,0.904,0.86,0.882,0.914,0.0,0.886,0.86,0.86,0.886,0.886,0.0,0.898,0.86,0.0,0.906,0.86,0.896,0.886,0.666,0.91,0.91,0.906,0.908,0.904,0.89,0.906,0.908,0,0.0,0.86,0.91,0.0,0.904,0.916,0.86,0.914,0.908,0.86,0.874,0.86,0.86,0.91,0.914,0.86,0.902,0.158,0.896,0.906,0.916,0.91,0.86,0.436,0.86,0.91,0.886,0.912,0.906,0.864,0.91,0.86,0.882,0.886,0.89,0.0,0.908,0.916,0.0
44651,0.902,0.93,0.898,0.928,0.14,0.928,0.936,0.958,0.942,0.938,0.86,0.86,0.924,0,0.888,0.86,0.944,0.964,0.938,0.92,0.912,0.934,0.918,0.86,0.926,0.888,0.892,0.944,0.924,0.0,0.86,0.956,0.0,0.86,0.962,0.934,0.956,0.86,0.926,0,0.86,0.954,0.892,0.86,0.926,0.788,0.892,0.86,0.934,0.86,0,0.934,0.938,0.93,0.892,0.922,0.962,0.954,0.948,0.92,0.958,0.916,0.922,0.888,0.944,0.37,0.956,0.93,0.856,0.924,0.914,0.954,0.938,0.92,0.86,0.934,0.96,0.86,0.888,0,0.86,0.864,0.95,0.948,0.86,0.896,0.938,0.938,0.924,0.86,0.86,0.932,0.926,0.906,0.964,0.844,0.86,0.952,0.86,0.924,0.944,0.768,0.964,0.934,0.954,0.928,0.938,0.892,0.948,0.946,0,0.922,0.86,0.932,0.0,0.958,0.958,0.888,0.956,0.938,0.886,0.91,0.86,0.86,0.956,0.952,0.86,0.912,0.798,0.95,0.952,0.956,0.968,0.906,0.0,0.86,0.966,0.9,0.962,0.944,0.898,0.938,0.86,0.928,0.924,0.95,0.86,0.934,0.964,0.0
44652,0.0,0.906,0.872,0.906,0.0,0.906,0.904,0.91,0.896,0.888,0.86,0.0,0.886,0,0.886,0.86,0.914,0.916,0.0,0.886,0.888,0.904,0.886,0.86,0.904,0.886,0.864,0.91,0.886,0.0,0.86,0.914,0.0,0.86,0.914,0.906,0.886,0.86,0.894,0,0.86,0.906,0.87,0.86,0.886,0.878,0.882,0.86,0.904,0.0,0,0.886,0.864,0.916,0.874,0.904,0.912,0.908,0.91,0.89,0.908,0.886,0.886,0.886,0.888,0.86,0.916,0.906,0.86,0.886,0.886,0.896,0.906,0.886,0.86,0.886,0.916,0.86,0.886,0,0.86,0.866,0.904,0.904,0.86,0.88,0.912,0.0,0.886,0.86,0.86,0.886,0.896,0.0,0.912,0.86,0.0,0.908,0.86,0.892,0.886,0.754,0.902,0.908,0.91,0.906,0.908,0.87,0.91,0.906,0,0.0,0.86,0.908,0.0,0.916,0.91,0.86,0.908,0.902,0.86,0.884,0.864,0.86,0.91,0.908,0.86,0.9,0.206,0.906,0.916,0.912,0.916,0.866,0.496,0.86,0.908,0.888,0.908,0.904,0.874,0.902,0.86,0.906,0.886,0.902,0.0,0.904,0.908,0.0
44653,0.608,0.644,0.68,0.73,0.602,0.728,0.66,0.754,0.746,0.712,0.634,0.0,0.742,0,0.598,0.684,0.686,0.728,0.0,0.73,0.688,0.64,0.702,0.69,0.624,0.598,0.554,0.688,0.716,0.0,0.542,0.662,0.0,0.702,0.73,0.6,0.768,0.538,0.706,0,0.646,0.676,0.62,0.668,0.734,0.724,0.62,0.542,0.584,0.636,0,0.734,0.522,0.674,0.606,0.688,0.738,0.68,0.646,0.694,0.61,0.73,0.708,0.598,0.584,0.658,0.738,0.726,0.542,0.736,0.656,0.702,0.646,0.562,0.656,0.706,0.702,0.542,0.598,0,0.668,0.586,0.744,0.632,0.598,0.62,0.678,0.0,0.734,0.666,0.542,0.69,0.622,0.0,0.692,0.546,0.64,0.74,0.542,0.708,0.738,0.578,0.738,0.704,0.654,0.616,0.744,0.62,0.642,0.738,0,0.0,0.598,0.628,0.0,0.74,0.724,0.716,0.692,0.724,0.692,0.654,0.568,0.542,0.658,0.662,0.574,0.754,0.0,0.754,0.706,0.698,0.738,0.532,0.0,0.662,0.746,0.676,0.744,0.742,0.652,0.672,0.542,0.728,0.732,0.674,0.0,0.74,0.706,0.0
44654,0.554,0.64,0.618,0.716,0.61,0.728,0.678,0.732,0.73,0.656,0.666,0.0,0.726,0,0.556,0.612,0.694,0.672,0.0,0.692,0.63,0.67,0.69,0.658,0.63,0.556,0.588,0.694,0.702,0.542,0.548,0.64,0.0,0.662,0.676,0.612,0.718,0.542,0.68,0,0.628,0.658,0.542,0.638,0.696,0.686,0.56,0.542,0.574,0.644,0,0.728,0.564,0.67,0.62,0.634,0.724,0.652,0.616,0.632,0.608,0.69,0.696,0.556,0.548,0.626,0.66,0.68,0.542,0.692,0.674,0.68,0.65,0.618,0.654,0.702,0.628,0.542,0.556,0,0.626,0.58,0.7,0.0,0.596,0.632,0.688,0.0,0.694,0.61,0.542,0.658,0.672,0.0,0.684,0.546,0.606,0.694,0.542,0.638,0.72,0.6,0.722,0.682,0.654,0.632,0.726,0.542,0.0,0.736,0,0.0,0.604,0.612,0.0,0.668,0.704,0.684,0.668,0.71,0.68,0.612,0.616,0.542,0.64,0.65,0.542,0.704,0.0,0.726,0.654,0.676,0.666,0.622,0.0,0.644,0.686,0.614,0.748,0.71,0.646,0.648,0.542,0.702,0.698,0.662,0.0,0.718,0.654,0.0
44655,0.612,0.624,0.626,0.682,0.57,0.7,0.642,0.738,0.688,0.698,0.622,0.0,0.694,0,0.542,0.68,0.65,0.702,0.0,0.672,0.674,0.604,0.666,0.66,0.63,0.542,0.6,0.646,0.656,0.542,0.542,0.656,0.0,0.66,0.702,0.612,0.724,0.542,0.656,0,0.558,0.612,0.52,0.692,0.686,0.674,0.52,0.542,0.594,0.62,0,0.678,0.564,0.686,0.582,0.674,0.718,0.644,0.652,0.66,0.622,0.686,0.678,0.542,0.594,0.548,0.72,0.668,0.542,0.672,0.65,0.672,0.674,0.566,0.606,0.71,0.682,0.556,0.542,0,0.648,0.556,0.7,0.0,0.584,0.62,0.62,0.0,0.668,0.626,0.542,0.672,0.57,0.0,0.67,0.548,0.674,0.71,0.542,0.676,0.694,0.562,0.71,0.628,0.656,0.552,0.704,0.52,0.63,0.698,0,0.0,0.588,0.616,0.0,0.69,0.698,0.686,0.652,0.682,0.648,0.57,0.578,0.542,0.624,0.648,0.602,0.708,0.47,0.722,0.698,0.622,0.718,0.55,0.0,0.56,0.714,0.634,0.708,0.722,0.636,0.62,0.542,0.668,0.69,0.656,0.0,0.698,0.624,0.0
44656,0.556,0.696,0.654,0.742,0.552,0.754,0.68,0.748,0.736,0.684,0.668,0.0,0.76,0,0.546,0.668,0.678,0.73,0.0,0.72,0.674,0.63,0.714,0.614,0.69,0.534,0.608,0.684,0.734,0.542,0.546,0.678,0.0,0.65,0.688,0.652,0.73,0.572,0.73,0,0.616,0.646,0.626,0.672,0.744,0.686,0.626,0.542,0.586,0.602,0,0.736,0.624,0.702,0.61,0.662,0.738,0.706,0.68,0.678,0.646,0.716,0.718,0.546,0.588,0.632,0.694,0.736,0.542,0.724,0.676,0.7,0.684,0.638,0.694,0.734,0.714,0.55,0.546,0,0.664,0.572,0.744,0.0,0.618,0.598,0.7,0.0,0.73,0.63,0.542,0.686,0.672,0.0,0.718,0.544,0.624,0.71,0.542,0.682,0.712,0.522,0.76,0.73,0.676,0.65,0.75,0.626,0.656,0.744,0,0.0,0.614,0.606,0.0,0.692,0.708,0.722,0.69,0.758,0.698,0.68,0.624,0.542,0.632,0.68,0.548,0.754,0.0,0.75,0.706,0.674,0.724,0.638,0.0,0.63,0.738,0.672,0.746,0.764,0.626,0.672,0.542,0.742,0.728,0.692,0.0,0.75,0.642,0.0
44657,0.614,0.642,0.658,0.696,0.6,0.698,0.678,0.736,0.676,0.678,0.624,0.0,0.69,0,0.59,0.658,0.656,0.728,0.0,0.69,0.642,0.632,0.686,0.646,0.642,0.59,0.576,0.668,0.684,0.542,0.542,0.688,0.0,0.656,0.714,0.602,0.638,0.544,0.69,0,0.612,0.602,0.54,0.662,0.68,0.642,0.54,0.542,0.61,0.642,0,0.706,0.56,0.706,0.598,0.69,0.728,0.668,0.628,0.628,0.61,0.682,0.676,0.59,0.638,0.588,0.694,0.692,0.542,0.678,0.642,0.642,0.644,0.578,0.664,0.672,0.69,0.552,0.59,0,0.622,0.616,0.694,0.0,0.622,0.636,0.686,0.0,0.692,0.628,0.542,0.634,0.584,0.0,0.684,0.542,0.656,0.714,0.542,0.652,0.644,0.562,0.722,0.638,0.664,0.566,0.682,0.54,0.692,0.704,0,0.0,0.618,0.586,0.0,0.686,0.67,0.668,0.606,0.694,0.67,0.61,0.586,0.542,0.626,0.658,0.57,0.688,0.0,0.648,0.694,0.602,0.712,0.538,0.0,0.61,0.706,0.656,0.72,0.686,0.654,0.618,0.546,0.696,0.694,0.654,0.0,0.698,0.628,0.0
44658,0.888,0.894,0.858,0.908,0.556,0.922,0.838,0.9,0.916,0.868,0.858,0.858,0.898,0,0.87,0.876,0.852,0.862,0.858,0.896,0.858,0.906,0.898,0.85,0.858,0.858,0.858,0.864,0.904,0.858,0.858,0.842,0.96,0.85,0.944,0.908,0.93,0.858,0.898,0,0.848,0.902,0.858,0.876,0.914,0.91,0.858,0.858,0.874,0.858,0,0.904,0.858,0.842,0.858,0.86,0.94,0.858,0.858,0.852,0.928,0.888,0.892,0.87,0.878,0.722,0.948,0.894,0.858,0.906,0.88,0.86,0.858,0.864,0.858,0.898,0.856,0.858,0.87,0,0.858,0.858,0.914,0.0,0.574,0.858,0.852,0.858,0.9,0.858,0.858,0.92,0.894,0.882,0.878,0.61,0.936,0.92,0.858,0.858,0.906,0.878,0.948,0.886,0.858,0.86,0.926,0.858,0.852,0.932,0,0.884,0.574,0.852,0.912,0.952,0.896,0.874,0.892,0.932,0.858,0.736,0.858,0.858,0.92,0.9,0.858,0.886,0.0,0.926,0.946,0.93,0.87,0.84,0.0,0.878,0.9,0.858,0.968,0.888,0.866,0.92,0.858,0.912,0.902,0.87,0.882,0.93,0.922,0.928
44659,0.89,0.906,0.858,0.9,0.586,0.922,0.872,0.902,0.912,0.858,0.858,0.858,0.892,0,0.858,0.846,0.856,0.858,0.858,0.896,0.858,0.88,0.892,0.858,0.858,0.858,0.858,0.862,0.904,0.858,0.858,0.868,0.932,0.858,0.92,0.878,0.908,0.858,0.884,0,0.844,0.892,0.848,0.854,0.918,0.904,0.848,0.858,0.864,0.858,0,0.892,0.858,0.852,0.858,0.858,0.918,0.856,0.858,0.858,0.896,0.896,0.892,0.858,0.876,0.73,0.922,0.92,0.858,0.896,0.884,0.864,0.858,0.854,0.858,0.88,0.858,0.858,0.858,0,0.858,0.868,0.894,0.82,0.646,0.856,0.854,0.858,0.892,0.858,0.858,0.91,0.828,0.888,0.86,0.858,0.904,0.882,0.858,0.858,0.896,0.852,0.926,0.88,0.858,0.862,0.94,0.848,0.852,0.92,0,0.884,0.646,0.848,0.924,0.912,0.878,0.876,0.876,0.922,0.858,0.76,0.858,0.858,0.874,0.908,0.858,0.884,0.858,0.906,0.92,0.874,0.868,0.85,0.0,0.854,0.876,0.858,0.936,0.892,0.868,0.924,0.858,0.914,0.894,0.856,0.886,0.912,0.888,0.914
44660,0.888,0.906,0.858,0.916,0.546,0.94,0.86,0.912,0.92,0.872,0.858,0.858,0.906,0,0.852,0.856,0.858,0.862,0.858,0.89,0.858,0.886,0.89,0.858,0.858,0.84,0.858,0.856,0.938,0.858,0.858,0.868,0.956,0.848,0.95,0.912,0.944,0.858,0.894,0,0.838,0.888,0.864,0.854,0.934,0.91,0.864,0.858,0.872,0.858,0,0.892,0.856,0.85,0.858,0.858,0.942,0.86,0.858,0.852,0.954,0.884,0.898,0.852,0.88,0.698,0.96,0.894,0.858,0.892,0.884,0.852,0.858,0.86,0.858,0.874,0.858,0.858,0.852,0,0.858,0.858,0.934,0.0,0.568,0.858,0.85,0.858,0.908,0.858,0.858,0.928,0.858,0.882,0.87,0.706,0.928,0.924,0.858,0.866,0.916,0.866,0.944,0.87,0.858,0.848,0.948,0.864,0.844,0.948,0,0.864,0.568,0.852,0.942,0.95,0.9,0.88,0.866,0.936,0.858,0.738,0.858,0.858,0.936,0.922,0.858,0.878,0.0,0.92,0.956,0.894,0.87,0.854,0.0,0.86,0.878,0.858,0.952,0.882,0.854,0.926,0.858,0.942,0.9,0.872,0.876,0.938,0.896,0.944
44661,0.892,0.944,0.858,0.906,0.566,0.946,0.86,0.926,0.92,0.86,0.858,0.858,0.924,0,0.854,0.86,0.86,0.86,0.858,0.892,0.858,0.884,0.894,0.858,0.858,0.854,0.858,0.86,0.914,0.858,0.858,0.872,0.962,0.86,0.936,0.912,0.944,0.858,0.884,0,0.83,0.9,0.858,0.848,0.938,0.81,0.858,0.858,0.872,0.858,0,0.902,0.856,0.844,0.858,0.856,0.93,0.856,0.858,0.86,0.912,0.888,0.886,0.854,0.888,0.772,0.932,0.93,0.858,0.904,0.88,0.836,0.858,0.854,0.858,0.896,0.858,0.858,0.854,0,0.858,0.858,0.926,0.0,0.624,0.858,0.854,0.858,0.902,0.858,0.858,0.916,0.846,0.894,0.864,0.506,0.902,0.91,0.858,0.854,0.932,0.842,0.942,0.864,0.858,0.852,0.948,0.858,0.854,0.932,0,0.872,0.624,0.856,0.934,0.938,0.914,0.884,0.892,0.946,0.858,0.766,0.858,0.858,0.93,0.95,0.858,0.886,0.858,0.946,0.94,0.928,0.86,0.86,0.0,0.842,0.884,0.858,0.954,0.892,0.86,0.942,0.858,0.918,0.892,0.858,0.87,0.924,0.892,0.93
44662,0.894,0.942,0.858,0.902,0.556,0.946,0.86,0.914,0.916,0.864,0.858,0.858,0.904,0,0.858,0.85,0.834,0.858,0.858,0.896,0.858,0.868,0.888,0.858,0.858,0.858,0.858,0.862,0.914,0.858,0.858,0.862,0.95,0.848,0.934,0.894,0.932,0.858,0.904,0,0.828,0.866,0.834,0.836,0.932,0.574,0.834,0.858,0.856,0.858,0,0.894,0.856,0.864,0.858,0.856,0.948,0.86,0.858,0.858,0.918,0.886,0.894,0.858,0.874,0.832,0.936,0.924,0.858,0.904,0.88,0.834,0.858,0.84,0.858,0.904,0.858,0.858,0.858,0,0.858,0.858,0.924,0.836,0.602,0.858,0.846,0.858,0.908,0.858,0.858,0.94,0.856,0.878,0.882,0.75,0.916,0.888,0.858,0.86,0.924,0.832,0.946,0.868,0.858,0.858,0.948,0.834,0.854,0.93,0,0.87,0.602,0.854,0.934,0.922,0.888,0.87,0.91,0.942,0.858,0.782,0.858,0.858,0.924,0.936,0.858,0.878,0.858,0.93,0.936,0.918,0.87,0.852,0.0,0.838,0.866,0.858,0.952,0.874,0.862,0.936,0.858,0.926,0.886,0.866,0.882,0.932,0.92,0.926
44663,0.532,0.464,0.468,0.546,0.0,0.548,0.48,0.6,0.588,0.474,0.428,0.418,0.544,0,0.412,0.486,0.468,0.556,0.546,0.5,0.498,0.532,0.5,0.498,0.484,0.412,0.438,0.47,0.528,0.0,0.418,0.49,0.58,0.474,0.544,0.428,0.0,0.418,0.512,0,0.294,0.568,0.418,0.468,0.526,0.144,0.418,0.418,0.526,0.484,0,0.568,0.5,0.488,0.408,0.502,0.582,0.494,0.514,0.478,0.44,0.5,0.498,0.412,0.476,0.306,0.528,0.53,0.41,0.508,0.488,0.484,0.49,0.454,0.44,0.56,0.566,0.418,0.412,0,0.448,0.0,0.536,0.0,0.0,0.44,0.462,0.518,0.522,0.438,0.418,0.478,0.44,0.538,0.522,0.0,0.568,0.502,0.418,0.498,0.554,0.248,0.57,0.532,0.506,0.526,0.576,0.418,0.0,0.558,0,0.546,0.0,0.416,0.0,0.522,0.542,0.508,0.558,0.55,0.468,0.282,0.418,0.0,0.474,0.48,0.0,0.542,0.0,0.572,0.54,0.572,0.568,0.444,0.0,0.32,0.594,0.472,0.608,0.556,0.48,0.478,0.418,0.538,0.516,0.486,0.186,0.56,0.566,0.546
44664,0.52,0.46,0.46,0.518,0.0,0.53,0.458,0.576,0.542,0.464,0.444,0.418,0.526,0,0.418,0.516,0.462,0.524,0.52,0.486,0.47,0.508,0.49,0.436,0.46,0.418,0.442,0.458,0.51,0.0,0.418,0.492,0.544,0.46,0.532,0.446,0.0,0.418,0.498,0,0.314,0.554,0.418,0.484,0.522,0.106,0.418,0.418,0.474,0.476,0,0.526,0.49,0.502,0.44,0.484,0.558,0.494,0.494,0.484,0.47,0.488,0.49,0.418,0.438,0.298,0.526,0.51,0.418,0.5,0.48,0.512,0.49,0.44,0.438,0.536,0.53,0.418,0.418,0,0.43,0.0,0.52,0.0,0.0,0.448,0.448,0.514,0.502,0.434,0.418,0.482,0.488,0.52,0.498,0.0,0.552,0.502,0.418,0.49,0.524,0.276,0.532,0.51,0.496,0.502,0.542,0.418,0.496,0.544,0,0.514,0.0,0.462,0.0,0.526,0.526,0.496,0.52,0.53,0.468,0.254,0.418,0.0,0.47,0.468,0.0,0.536,0.0,0.542,0.524,0.53,0.522,0.44,0.0,0.328,0.536,0.454,0.558,0.534,0.464,0.488,0.418,0.516,0.506,0.476,0.168,0.526,0.544,0.52
44665,0.52,0.49,0.456,0.536,0.0,0.542,0.468,0.56,0.534,0.466,0.444,0.418,0.532,0,0.418,0.478,0.474,0.512,0.532,0.5,0.488,0.53,0.49,0.442,0.47,0.418,0.462,0.456,0.524,0.0,0.418,0.496,0.536,0.446,0.52,0.424,0.0,0.418,0.494,0,0.282,0.53,0.418,0.482,0.538,0.118,0.418,0.418,0.484,0.478,0,0.536,0.5,0.486,0.428,0.498,0.53,0.502,0.51,0.502,0.442,0.494,0.504,0.418,0.428,0.292,0.508,0.51,0.418,0.504,0.488,0.522,0.48,0.456,0.438,0.532,0.53,0.418,0.418,0,0.446,0.0,0.524,0.0,0.0,0.436,0.458,0.526,0.514,0.432,0.418,0.466,0.446,0.532,0.5,0.0,0.542,0.504,0.418,0.504,0.524,0.222,0.54,0.522,0.486,0.504,0.548,0.418,0.0,0.53,0,0.528,0.0,0.408,0.0,0.514,0.522,0.51,0.522,0.538,0.468,0.284,0.418,0.0,0.438,0.48,0.0,0.53,0.0,0.55,0.502,0.552,0.538,0.458,0.0,0.336,0.542,0.472,0.546,0.544,0.478,0.462,0.418,0.52,0.51,0.468,0.16,0.534,0.532,0.53
44666,0.546,0.458,0.482,0.536,0.0,0.56,0.458,0.566,0.59,0.488,0.452,0.424,0.546,0,0.404,0.532,0.466,0.558,0.548,0.508,0.498,0.54,0.502,0.476,0.492,0.392,0.498,0.454,0.526,0.0,0.418,0.51,0.584,0.468,0.57,0.414,0.0,0.418,0.51,0,0.294,0.572,0.418,0.502,0.532,0.144,0.418,0.418,0.526,0.5,0,0.562,0.472,0.486,0.454,0.52,0.574,0.514,0.516,0.522,0.448,0.51,0.516,0.404,0.454,0.284,0.536,0.552,0.418,0.512,0.5,0.516,0.518,0.434,0.466,0.57,0.558,0.418,0.404,0,0.464,0.0,0.55,0.0,0.0,0.462,0.468,0.54,0.516,0.436,0.418,0.478,0.486,0.524,0.526,0.0,0.572,0.526,0.418,0.528,0.55,0.276,0.572,0.546,0.508,0.53,0.572,0.418,0.0,0.578,0,0.54,0.0,0.454,0.0,0.544,0.554,0.514,0.562,0.56,0.478,0.254,0.418,0.0,0.5,0.472,0.0,0.53,0.0,0.562,0.554,0.58,0.566,0.452,0.0,0.326,0.586,0.49,0.592,0.556,0.464,0.49,0.418,0.534,0.528,0.496,0.184,0.552,0.544,0.554
44667,0.542,0.464,0.466,0.532,0.0,0.544,0.486,0.548,0.57,0.482,0.434,0.42,0.532,0,0.418,0.514,0.452,0.526,0.506,0.494,0.468,0.534,0.486,0.452,0.488,0.418,0.458,0.472,0.514,0.0,0.418,0.522,0.58,0.47,0.558,0.42,0.0,0.418,0.508,0,0.296,0.53,0.418,0.49,0.526,0.164,0.418,0.418,0.518,0.474,0,0.546,0.496,0.49,0.468,0.504,0.576,0.508,0.48,0.476,0.466,0.502,0.502,0.418,0.45,0.288,0.512,0.544,0.416,0.518,0.486,0.524,0.504,0.476,0.458,0.554,0.524,0.418,0.418,0,0.436,0.0,0.558,0.0,0.0,0.448,0.434,0.508,0.524,0.422,0.418,0.458,0.466,0.532,0.506,0.0,0.564,0.52,0.418,0.484,0.546,0.266,0.566,0.54,0.472,0.518,0.56,0.418,0.0,0.568,0,0.546,0.0,0.428,0.0,0.532,0.534,0.514,0.52,0.526,0.458,0.28,0.418,0.0,0.498,0.454,0.0,0.56,0.0,0.542,0.528,0.548,0.526,0.448,0.0,0.328,0.54,0.456,0.564,0.552,0.49,0.462,0.418,0.532,0.504,0.484,0.172,0.544,0.546,0.532
44668,0.0,0.486,0.474,0.508,0.0,0.524,0.298,0.56,0.54,0.446,0.298,0.0,0.514,0,0.432,0.278,0.488,0.548,0.0,0.492,0.484,0.502,0.48,0.384,0.51,0.432,0.414,0.46,0.498,0.0,0.44,0.43,0.55,0.278,0.508,0.432,0.534,0.298,0.468,0,0.264,0.488,0.468,0.298,0.516,0.222,0.458,0.298,0.298,0.386,0,0.552,0.44,0.444,0.494,0.52,0.526,0.428,0.49,0.504,0.434,0.49,0.494,0.432,0.406,0.24,0.488,0.51,0.298,0.498,0.504,0.434,0.524,0.364,0.298,0.508,0.5,0.298,0.432,0,0.492,0.0,0.51,0.0,0.0,0.466,0.478,0.0,0.494,0.474,0.298,0.44,0.366,0.0,0.514,0.0,0.0,0.5,0.45,0.498,0.54,0.406,0.516,0.438,0.482,0.426,0.53,0.468,0.536,0.53,0,0.0,0.0,0.488,0.0,0.496,0.52,0.508,0.502,0.512,0.472,0.426,0.46,0.0,0.428,0.478,0.0,0.518,0.0,0.54,0.51,0.514,0.516,0.42,0.0,0.3,0.492,0.474,0.56,0.508,0.298,0.456,0.456,0.508,0.502,0.47,0.0,0.518,0.518,0.51

0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44262,0.9955555555555555,0.9955555555555555,0.96,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9911111111111112,1.0,0.9955555555555555,0.92,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9822222222222222,0.9688888888888889,0.9911111111111112,0.96,0.9911111111111112,0.9911111111111112,0.8888888888888888,0.7111111111111111,0.9955555555555555,0.6266666666666667,1.0,0.9911111111111112,0.9911111111111112,0.7022222222222222,0.9022222222222223,0.9911111111111112,0.8666666666666667,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9866666666666667,0,0.9422222222222222,1.0,0.9911111111111112,1.0,0.9955555555555555,0.37777777777777777,0.9911111111111112,0.9955555555555555,0.8177777777777778,0.9955555555555555,0.9955555555555555,1.0,0.9955555555555555,0.8355555555555556,0.6311111111111111,0.9733333333333334,1.0,0.8711111111111111,0.8222222222222222,0.8044444444444444,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9333333333333333,0.9777777777777777,0.9911111111111112,0.9955555555555555,0.5422222222222223,0.9911111111111112,0.9955555555555555,1.0,0.7466666666666667,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9777777777777777,0.9288888888888889,0.9955555555555555,0,0.9911111111111112,0.9733333333333334,0.9955555555555555,0.8044444444444444,0.9911111111111112,0.7688888888888888,0.8666666666666667,0.9688888888888889,0.9911111111111112,0.96,0.5422222222222223,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9555555555555556,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9555555555555556,0.8,1.0,0.7955555555555556,1.0,0.9955555555555555,0.6711111111111111,1.0,0.9955555555555555,0.9911111111111112,0.7244444444444444,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.6355555555555555,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9333333333333333,0.8577777777777778,0.9866666666666667,0.5422222222222223,1.0,1.0,0.8977777777777778,0.9955555555555555,0.0,1.0,0.9911111111111112,1.0,0.8622222222222222,0.9955555555555555,0,0.9733333333333334,1.0,0.96,1.0,1.0,0.9911111111111112,1.0,0.5422222222222223,0.9911111111111112,0.9911111111111112,0.9288888888888889,0.9955555555555555,0.9955555555555555,1.0,0.9911111111111112
44263,0.9955555555555555,0.9955555555555555,0.96,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9911111111111112,1.0,1.0,0.96,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9822222222222222,0.9688888888888889,0.9733333333333334,0.96,0.9955555555555555,0.9911111111111112,0.8888888888888888,0.7244444444444444,0.9955555555555555,0.6266666666666667,1.0,0.9911111111111112,0.9911111111111112,0.6933333333333334,0.8577777777777778,0.9911111111111112,0.8666666666666667,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9911111111111112,0,0.9422222222222222,1.0,0.9911111111111112,1.0,0.9955555555555555,0.9822222222222222,0.9911111111111112,0.9955555555555555,0.8044444444444444,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.8355555555555556,0.56,0.9733333333333334,1.0,0.88,0.7955555555555556,0.8044444444444444,0.9911111111111112,0.9911111111111112,0.9866666666666667,0.9955555555555555,0.92,0.9777777777777777,0.9911111111111112,0.9955555555555555,0.5422222222222223,0.9911111111111112,0.9955555555555555,1.0,0.7022222222222222,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9777777777777777,0.9288888888888889,0.9955555555555555,0,0.9911111111111112,0.96,0.9955555555555555,0.6577777777777778,0.9911111111111112,0.6933333333333334,0.8666666666666667,0.9688888888888889,0.9866666666666667,0.9733333333333334,0.5422222222222223,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9333333333333333,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9244444444444444,0.8,1.0,0.8088888888888889,0.9955555555555555,0.9955555555555555,0.6177777777777778,1.0,0.9955555555555555,0.9911111111111112,0.6488888888888888,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.6355555555555555,0.9955555555555555,0.9911111111111112,1.0,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9155555555555556,0.8577777777777778,0.9911111111111112,0.5422222222222223,1.0,1.0,0.9555555555555556,1.0,0.0,1.0,0.9911111111111112,1.0,0.8622222222222222,0.9955555555555555,0,0.9733333333333334,1.0,0.96,1.0,0.9955555555555555,0.9911111111111112,1.0,0.5422222222222223,0.9911111111111112,0.9911111111111112,0.9066666666666666,0.9955555555555555,0.9911111111111112,1.0,0.9911111111111112
44264,0.9955555555555555,0.9955555555555555,0.96,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9911111111111112,1.0,0.9955555555555555,0.8888888888888888,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9822222222222222,0.9688888888888889,0.9911111111111112,0.96,0.9955555555555555,0.9911111111111112,0.8888888888888888,0.7022222222222222,0.9955555555555555,0.64,1.0,0.9911111111111112,0.9866666666666667,0.7155555555555555,0.8888888888888888,0.9911111111111112,0.8666666666666667,0.9911111111111112,0.9911111111111112,1.0,0.9955555555555555,0.9911111111111112,0,0.9422222222222222,1.0,0.9911111111111112,1.0,0.9955555555555555,0.8577777777777778,0.9911111111111112,0.9955555555555555,0.8088888888888889,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.8355555555555556,0.6266666666666667,0.9733333333333334,1.0,0.8933333333333333,0.8355555555555556,0.8044444444444444,0.9911111111111112,0.9733333333333334,0.9866666666666667,0.9955555555555555,0.9111111111111111,0.9777777777777777,0.9911111111111112,0.9955555555555555,0.5422222222222223,0.9911111111111112,0.9955555555555555,1.0,0.6933333333333334,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9777777777777777,0.9288888888888889,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.7022222222222222,0.9911111111111112,0.7244444444444444,0.8666666666666667,0.9688888888888889,0.9911111111111112,0.9733333333333334,0.5422222222222223,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9244444444444444,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9511111111111111,0.8,1.0,0.7866666666666666,0.9955555555555555,0.9955555555555555,0.6488888888888888,1.0,0.9955555555555555,0.9911111111111112,0.6844444444444444,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.6177777777777778,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9066666666666666,0.8577777777777778,0.9911111111111112,0.5422222222222223,1.0,1.0,0.9111111111111111,0.9955555555555555,0.0,1.0,0.9911111111111112,1.0,0.8622222222222222,0.9955555555555555,0,0.9733333333333334,1.0,0.96,1.0,1.0,0.9911111111111112,1.0,0.5422222222222223,0.9911111111111112,0.9911111111111112,0.9244444444444444,0.9955555555555555,0.9911111111111112,1.0,0.9911111111111112
44265,0.9955555555555555,0.9955555555555555,0.96,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9911111111111112,1.0,1.0,0.8933333333333333,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9822222222222222,0.9688888888888889,0.9911111111111112,0.96,0.9955555555555555,0.9911111111111112,0.8888888888888888,0.6622222222222223,0.9955555555555555,0.6088888888888889,1.0,0.9911111111111112,0.9911111111111112,0.72,0.8977777777777778,0.9911111111111112,0.8666666666666667,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9911111111111112,0,0.9422222222222222,1.0,0.9911111111111112,1.0,0.9955555555555555,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.8044444444444444,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.8355555555555556,0.5333333333333333,0.9733333333333334,1.0,0.8844444444444445,0.84,0.8044444444444444,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9066666666666666,0.9777777777777777,0.9911111111111112,0.9955555555555555,0.5422222222222223,0.9911111111111112,0.9955555555555555,1.0,0.6977777777777778,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9777777777777777,0.9288888888888889,0.9955555555555555,0,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.7466666666666667,0.9911111111111112,0.6888888888888889,0.8666666666666667,0.9688888888888889,0.9911111111111112,0.9644444444444444,0.5422222222222223,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9422222222222222,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9377777777777778,0.8,1.0,0.8133333333333334,0.9911111111111112,0.9955555555555555,0.68,1.0,0.9955555555555555,0.9911111111111112,0.6444444444444445,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.5955555555555555,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9244444444444444,0.8577777777777778,0.9866666666666667,0.5422222222222223,1.0,1.0,0.9733333333333334,0.9955555555555555,0.0,1.0,0.9911111111111112,1.0,0.8622222222222222,0.9955555555555555,0,0.9733333333333334,1.0,0.96,1.0,1.0,0.9911111111111112,1.0,0.5422222222222223,0.9911111111111112,0.9911111111111112,0.88,0.9955555555555555,0.9911111111111112,1.0,0.9911111111111112
44266,0.9955555555555555,0.9955555555555555,0.96,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9911111111111112,1.0,0.9955555555555555,0.9244444444444444,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9822222222222222,0.9688888888888889,0.9911111111111112,0.96,0.9955555555555555,0.9866666666666667,0.8888888888888888,0.6355555555555555,0.9955555555555555,0.6711111111111111,1.0,0.9911111111111112,0.9911111111111112,0.7466666666666667,0.9333333333333333,0.9911111111111112,0.8666666666666667,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9911111111111112,0,0.9422222222222222,1.0,0.9911111111111112,1.0,0.9955555555555555,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.8044444444444444,0.9955555555555555,0.9955555555555555,1.0,0.9955555555555555,0.8355555555555556,0.6222222222222222,0.9733333333333334,1.0,0.88,0.8044444444444444,0.8044444444444444,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.9288888888888889,0.9777777777777777,0.9911111111111112,0.9955555555555555,0.5422222222222223,0.9911111111111112,0.9955555555555555,1.0,0.7244444444444444,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9777777777777777,0.9288888888888889,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.9955555555555555,0.7733333333333333,0.9911111111111112,0.72,0.8666666666666667,0.9688888888888889,0.9911111111111112,0.9822222222222222,0.5422222222222223,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.96,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.8266666666666667,0.8,1.0,0.8844444444444445,0.9955555555555555,0.9955555555555555,0.68,1.0,0.9955555555555555,0.9911111111111112,0.6133333333333333,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.5777777777777777,0.9955555555555555,0.9911111111111112,1.0,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9377777777777778,0.8577777777777778,0.9866666666666667,0.5422222222222223,1.0,1.0,0.9511111111111111,1.0,0.0,1.0,0.9911111111111112,1.0,0.8622222222222222,0.9955555555555555,0,0.9733333333333334,1.0,0.96,1.0,0.9955555555555555,0.9911111111111112,1.0,0.5422222222222223,0.9911111111111112,0.9911111111111112,0.9244444444444444,0.9955555555555555,0.9911111111111112,1.0,0.9911111111111112
44268,0.9955555555555555,0.9955555555555555,0.96,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.9911111111111112,1.0,1.0,0.9155555555555556,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9822222222222222,0.9688888888888889,0.9866666666666667,0.96,0.9955555555555555,0.9733333333333334,0.8888888888888888,0.6933333333333334,0.9955555555555555,0.6355555555555555,1.0,0.9911111111111112,0.9955555555555555,0.6844444444444444,0.8888888888888888,0.9911111111111112,0.8666666666666667,0.9911111111111112,0.9911111111111112,1.0,0.9955555555555555,0.9911111111111112,0,0.9422222222222222,1.0,0.9911111111111112,1.0,0.9955555555555555,0.4488888888888889,0.9911111111111112,0.9955555555555555,0.8,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.8355555555555556,0.5555555555555556,0.9733333333333334,1.0,0.8711111111111111,0.8088888888888889,0.8044444444444444,0.9911111111111112,0.9911111111111112,0.9777777777777777,0.9955555555555555,0.9155555555555556,0.9777777777777777,0.9911111111111112,0.9955555555555555,0.5422222222222223,0.9911111111111112,0.9955555555555555,1.0,0.7288888888888889,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9777777777777777,0.9288888888888889,0.9955555555555555,0,0.9911111111111112,0.9822222222222222,0.9911111111111112,0.7066666666666667,0.9911111111111112,0.7155555555555555,0.8666666666666667,0.9688888888888889,0.9911111111111112,0.96,0.5422222222222223,0.9955555555555555,0.9955555555555555,0.9955555555555555,0.9377777777777778,0.9911111111111112,0.9911111111111112,0.9911111111111112,0.7111111111111111,0.8,1.0,0.8177777777777778,0.9955555555555555,0.9955555555555555,0.6088888888888889,1.0,0.9955555555555555,0.9911111111111112,0.68,0.9955555555555555,0,0.9911111111111112,0.9911111111111112,0.6355555555555555,0.9955555555555555,0.9911111111111112,0.9955555555555555,0.9955555555555555,0.9822222222222222,0.9955555555555555,0.9288888888888889,0.8577777777777778,0.9911111111111112,0.5422222222222223,1.0,1.0,0.9022222222222223,0.9955555555555555,0.0,1.0,0.9911111111111112,1.0,0.8622222222222222,0.9955555555555555,0,0.9733333333333334,1.0,0.96,1.0,0.9955555555555555,0.9911111111111112,1.0,0.5422222222222223,0.9911111111111112,0.9911111111111112,0.9244444444444444,0.9955555555555555,0.9911111111111112,1.0,0.9911111111111112
44345,0.752,0.714,0.598,0.776,0.512,0.76,0.686,0.78,0.778,0.732,0.738,0.746,0.774,0.74,0.708,0.77,0.71,0.59,0.608,0.756,0.614,0.698,0.762,0.708,0.474,0.706,0.702,0.714,0.77,0.784,0.516,0.656,0.778,0.726,0.732,0.726,0.7,0.718,0.664,0,0.74,0.668,0.67,0.762,0.764,0.704,0.67,0.736,0.634,0.734,0.752,0.764,0.542,0.508,0.522,0.586,0.776,0.706,0.65,0.606,0.694,0.772,0.762,0.708,0.72,0.738,0.748,0.698,0.5,0.76,0.746,0.756,0.474,0.736,0.744,0.768,0.58,0.512,0.706,0,0.75,0.58,0.742,0.0,0.512,0.536,0.578,0.59,0.772,0.74,0.5,0.728,0.748,0.774,0.726,0.662,0.772,0.724,0.5,0.642,0.764,0.704,0.778,0.648,0.48,0.604,0.754,0.67,0.482,0.778,0,0.75,0.512,0.546,0.754,0.746,0.782,0.792,0.578,0.724,0.598,0.758,0.618,0.5,0.73,0.752,0.564,0.786,0.488,0.748,0.752,0.728,0.662,0.562,0,0.738,0.786,0.604,0.756,0.784,0.716,0.75,0.704,0.758,0.766,0.738,0.5,0.774,0.72,0.772
44346,0.754,0.714,0.598,0.76,0.512,0.766,0.678,0.78,0.77,0.724,0.738,0.774,0.77,0.75,0.708,0.77,0.71,0.59,0.608,0.772,0.614,0.708,0.768,0.708,0.512,0.706,0.7,0.714,0.77,0.778,0.506,0.682,0.778,0.726,0.742,0.726,0.696,0.72,0.66,0,0.74,0.668,0.67,0.76,0.748,0.696,0.67,0.726,0.618,0.734,0.752,0.756,0.542,0.508,0.51,0.586,0.776,0.706,0.644,0.606,0.694,0.758,0.762,0.708,0.732,0.738,0.736,0.696,0.5,0.764,0.748,0.756,0.528,0.736,0.74,0.756,0.58,0.512,0.706,0,0.748,0.6,0.742,0.0,0.512,0.5,0.578,0.59,0.756,0.736,0.5,0.728,0.748,0.776,0.744,0.662,0.774,0.724,0.5,0.642,0.728,0.642,0.776,0.648,0.476,0.604,0.754,0.67,0.0,0.778,0,0.762,0.512,0.526,0.76,0.748,0.78,0.79,0.578,0.732,0.674,0.758,0.584,0.5,0.726,0.752,0.56,0.782,0.488,0.76,0.754,0.726,0.662,0.554,0,0.738,0.77,0.604,0.762,0.788,0.716,0.752,0.692,0.76,0.758,0.736,0.5,0.78,0.706,0.766
44347,0.754,0.714,0.598,0.768,0.512,0.762,0.696,0.778,0.766,0.72,0.738,0.746,0.778,0.75,0.708,0.77,0.71,0.59,0.608,0.752,0.614,0.706,0.76,0.708,0.502,0.706,0.692,0.714,0.772,0.774,0.528,0.664,0.776,0.726,0.728,0.726,0.72,0.72,0.678,0,0.74,0.672,0.67,0.77,0.756,0.694,0.67,0.726,0.634,0.734,0.738,0.754,0.542,0.508,0.496,0.586,0.782,0.706,0.664,0.606,0.694,0.766,0.77,0.708,0.704,0.738,0.742,0.706,0.5,0.768,0.744,0.764,0.444,0.736,0.744,0.742,0.58,0.512,0.706,0,0.754,0.574,0.742,0.0,0.512,0.5,0.578,0.59,0.752,0.75,0.5,0.728,0.748,0.782,0.742,0.662,0.782,0.718,0.5,0.642,0.726,0.632,0.778,0.648,0.46,0.604,0.752,0.67,0.508,0.774,0,0.78,0.512,0.472,0.756,0.746,0.786,0.784,0.578,0.738,0.694,0.758,0.61,0.5,0.73,0.754,0.612,0.792,0.488,0.746,0.75,0.724,0.662,0.566,0,0.738,0.776,0.604,0.77,0.778,0.716,0.752,0.648,0.766,0.746,0.718,0.5,0.776,0.718,0.764
44348,0.756,0.714,0.598,0.758,0.512,0.756,0.696,0.766,0.77,0.728,0.738,0.74,0.778,0.738,0.708,0.77,0.71,0.59,0.608,0.758,0.614,0.712,0.762,0.708,0.488,0.706,0.708,0.714,0.768,0.768,0.522,0.632,0.774,0.726,0.732,0.726,0.742,0.718,0.67,0,0.74,0.676,0.67,0.754,0.754,0.69,0.67,0.736,0.628,0.734,0.744,0.752,0.542,0.508,0.528,0.586,0.776,0.706,0.644,0.606,0.694,0.76,0.766,0.708,0.752,0.738,0.744,0.702,0.5,0.758,0.748,0.756,0.482,0.736,0.74,0.77,0.58,0.512,0.706,0,0.748,0.604,0.744,0.0,0.512,0.508,0.578,0.59,0.76,0.742,0.5,0.728,0.748,0.78,0.724,0.662,0.78,0.722,0.594,0.642,0.726,0.666,0.776,0.648,0.526,0.604,0.748,0.67,0.498,0.786,0,0.76,0.512,0.516,0.758,0.742,0.794,0.776,0.578,0.724,0.634,0.758,0.594,0.5,0.726,0.754,0.532,0.776,0.488,0.762,0.75,0.73,0.662,0.556,0,0.738,0.772,0.604,0.758,0.784,0.716,0.744,0.688,0.76,0.772,0.722,0.5,0.784,0.712,0.772
44349,0.772,0.722,0.556,0.78,0.512,0.768,0.678,0.772,0.762,0.692,0.74,0.772,0.776,0.732,0.718,0.746,0.738,0.562,0.58,0.756,0.538,0.742,0.764,0.714,0.496,0.718,0.658,0.744,0.754,0.774,0.494,0.672,0.784,0.74,0.75,0.71,0.746,0.73,0.674,0,0.734,0.72,0.628,0.754,0.774,0.716,0.628,0.746,0.624,0.736,0.734,0.768,0.516,0.502,0.53,0.53,0.786,0.676,0.6,0.56,0.732,0.754,0.758,0.718,0.72,0.74,0.754,0.728,0.5,0.752,0.768,0.752,0.494,0.714,0.74,0.762,0.55,0.498,0.718,0,0.77,0.556,0.736,0.0,0.512,0.478,0.62,0.562,0.768,0.746,0.5,0.75,0.716,0.772,0.694,0.662,0.784,0.748,0.55,0.584,0.748,0.66,0.782,0.65,0.522,0.62,0.766,0.628,0.522,0.768,0,0.766,0.512,0.526,0.768,0.754,0.76,0.762,0.548,0.734,0.646,0.752,0.544,0.5,0.714,0.692,0.552,0.77,0.502,0.754,0.76,0.702,0.61,0.54,0,0.74,0.75,0.55,0.77,0.77,0.726,0.706,0.634,0.762,0.762,0.71,0.704,0.782,0.734,0.78
44350,0.774,0.754,0.552,0.756,0.496,0.77,0.714,0.774,0.752,0.734,0.764,0.752,0.776,0.744,0.732,0.752,0.778,0.54,0.558,0.766,0.554,0.694,0.754,0.74,0.48,0.732,0.694,0.776,0.76,0.778,0.502,0.656,0.772,0.746,0.758,0.734,0.724,0.77,0.642,0,0.76,0.726,0.662,0.76,0.77,0.694,0.662,0.772,0.684,0.756,0.724,0.738,0.528,0.582,0.492,0.556,0.77,0.676,0.674,0.642,0.708,0.758,0.762,0.732,0.738,0.76,0.752,0.722,0.5,0.764,0.766,0.772,0.494,0.738,0.764,0.756,0.564,0.496,0.732,0,0.764,0.552,0.702,0.0,0.496,0.514,0.634,0.556,0.762,0.76,0.5,0.724,0.778,0.77,0.73,0.648,0.766,0.768,0.5,0.632,0.732,0.634,0.774,0.672,0.544,0.642,0.764,0.662,0.474,0.768,0,0.758,0.496,0.506,0.766,0.758,0.768,0.762,0.564,0.75,0.754,0.75,0.576,0.5,0.726,0.692,0.534,0.774,0.504,0.744,0.74,0.714,0.658,0.574,0,0.76,0.764,0.55,0.76,0.77,0.764,0.724,0.698,0.76,0.754,0.748,0.632,0.778,0.744,0.77
44351,0.792,0.758,0.542,0.786,0.506,0.796,0.68,0.8,0.776,0.734,0.762,0.774,0.78,0.736,0.712,0.752,0.736,0.534,0.53,0.77,0.548,0.704,0.768,0.74,0.558,0.712,0.718,0.752,0.768,0.794,0.502,0.696,0.798,0.716,0.796,0.728,0.746,0.766,0.652,0,0.758,0.696,0.694,0.756,0.786,0.724,0.694,0.754,0.666,0.754,0.734,0.774,0.512,0.542,0.514,0.5,0.812,0.736,0.628,0.608,0.734,0.764,0.77,0.712,0.736,0.758,0.774,0.648,0.5,0.782,0.78,0.762,0.496,0.706,0.76,0.786,0.518,0.498,0.712,0,0.764,0.532,0.752,0.0,0.506,0.446,0.62,0.528,0.774,0.736,0.5,0.738,0.74,0.798,0.738,0.624,0.796,0.79,0.52,0.638,0.766,0.668,0.806,0.572,0.486,0.538,0.796,0.694,0.486,0.794,0,0.776,0.506,0.466,0.786,0.788,0.8,0.788,0.526,0.778,0.646,0.762,0.552,0.5,0.738,0.748,0.51,0.79,0.504,0.782,0.776,0.7,0.632,0.524,0,0.758,0.784,0.542,0.79,0.8,0.75,0.722,0.702,0.726,0.762,0.75,0.522,0.796,0.744,0.786
44352,0.756,0.71,0.526,0.778,0.496,0.762,0.674,0.754,0.752,0.74,0.75,0.732,0.76,0.708,0.698,0.746,0.692,0.51,0.54,0.762,0.538,0.732,0.762,0.718,0.456,0.698,0.684,0.698,0.768,0.77,0.518,0.678,0.768,0.74,0.748,0.698,0.702,0.738,0.65,0,0.76,0.692,0.642,0.74,0.76,0.71,0.642,0.75,0.668,0.752,0.714,0.744,0.49,0.578,0.474,0.542,0.754,0.682,0.602,0.584,0.704,0.772,0.756,0.698,0.726,0.762,0.76,0.68,0.5,0.76,0.752,0.756,0.464,0.722,0.748,0.74,0.538,0.496,0.698,0,0.744,0.556,0.754,0.0,0.496,0.482,0.59,0.534,0.764,0.732,0.5,0.71,0.704,0.752,0.716,0.662,0.776,0.742,0.508,0.602,0.74,0.688,0.77,0.648,0.516,0.604,0.75,0.642,0.0,0.774,0,0.75,0.496,0.496,0.762,0.74,0.748,0.742,0.618,0.734,0.59,0.736,0.586,0.5,0.732,0.694,0.536,0.76,0.5,0.726,0.73,0.686,0.62,0.564,0,0.762,0.754,0.52,0.75,0.746,0.708,0.722,0.65,0.728,0.77,0.744,0.51,0.77,0.726,0.78
44353,0.758,0.714,0.598,0.774,0.512,0.768,0.702,0.756,0.768,0.73,0.74,0.75,0.788,0.744,0.708,0.77,0.71,0.59,0.608,0.764,0.614,0.716,0.76,0.708,0.51,0.706,0.694,0.714,0.768,0.776,0.52,0.65,0.778,0.726,0.73,0.726,0.726,0.724,0.666,0,0.74,0.69,0.67,0.758,0.764,0.688,0.67,0.736,0.624,0.734,0.752,0.758,0.542,0.508,0.52,0.586,0.774,0.706,0.638,0.606,0.694,0.756,0.76,0.708,0.738,0.738,0.734,0.704,0.5,0.764,0.742,0.764,0.516,0.736,0.74,0.768,0.58,0.512,0.706,0,0.744,0.548,0.746,0.0,0.512,0.508,0.578,0.59,0.762,0.736,0.5,0.728,0.748,0.784,0.728,0.662,0.776,0.732,0.5,0.642,0.75,0.64,0.782,0.648,0.492,0.604,0.756,0.67,0.496,0.782,0,0.762,0.512,0.506,0.768,0.746,0.778,0.79,0.578,0.746,0.686,0.758,0.602,0.5,0.73,0.752,0.526,0.788,0.488,0.744,0.752,0.724,0.662,0.554,0,0.738,0.774,0.604,0.756,0.78,0.716,0.742,0.696,0.758,0.76,0.732,0.5,0.772,0.71,0.768
44354,0.772,0.716,0.556,0.762,0.512,0.778,0.678,0.764,0.752,0.73,0.74,0.764,0.764,0.732,0.718,0.746,0.738,0.562,0.58,0.76,0.538,0.742,0.752,0.714,0.504,0.718,0.658,0.744,0.758,0.774,0.5,0.586,0.782,0.74,0.748,0.71,0.726,0.734,0.672,0,0.734,0.736,0.628,0.75,0.768,0.712,0.628,0.746,0.632,0.736,0.732,0.756,0.516,0.502,0.538,0.53,0.784,0.676,0.596,0.56,0.734,0.752,0.754,0.718,0.74,0.74,0.758,0.722,0.5,0.758,0.772,0.744,0.49,0.714,0.74,0.76,0.55,0.5,0.718,0,0.768,0.552,0.736,0.0,0.512,0.5,0.62,0.562,0.768,0.718,0.5,0.75,0.716,0.762,0.718,0.662,0.782,0.75,0.538,0.584,0.73,0.702,0.78,0.648,0.516,0.62,0.756,0.628,0.498,0.774,0,0.754,0.512,0.516,0.77,0.754,0.76,0.766,0.548,0.738,0.718,0.752,0.542,0.5,0.712,0.692,0.554,0.786,0.502,0.76,0.764,0.694,0.61,0.538,0,0.74,0.748,0.55,0.782,0.772,0.726,0.708,0.62,0.774,0.76,0.724,0.704,0.782,0.732,0.776
44355,0.764,0.754,0.552,0.762,0.496,0.766,0.742,0.764,0.762,0.714,0.766,0.756,0.776,0.746,0.732,0.752,0.778,0.54,0.558,0.766,0.554,0.684,0.764,0.74,0.508,0.732,0.672,0.776,0.756,0.772,0.5,0.63,0.774,0.746,0.756,0.734,0.708,0.766,0.654,0,0.76,0.722,0.662,0.756,0.77,0.714,0.662,0.77,0.688,0.754,0.722,0.762,0.528,0.582,0.54,0.556,0.77,0.676,0.682,0.642,0.708,0.764,0.768,0.732,0.708,0.76,0.752,0.732,0.5,0.748,0.768,0.778,0.46,0.738,0.764,0.75,0.564,0.496,0.732,0,0.768,0.56,0.724,0.494,0.496,0.516,0.634,0.556,0.758,0.762,0.5,0.724,0.776,0.77,0.742,0.648,0.762,0.752,0.518,0.632,0.724,0.646,0.764,0.672,0.514,0.642,0.766,0.662,0.504,0.772,0,0.768,0.496,0.498,0.776,0.75,0.774,0.766,0.564,0.762,0.694,0.75,0.56,0.5,0.74,0.692,0.534,0.774,0.504,0.746,0.75,0.704,0.658,0.566,0,0.76,0.766,0.55,0.766,0.782,0.764,0.724,0.658,0.764,0.764,0.742,0.632,0.768,0.746,0.774
44356,0.792,0.758,0.542,0.782,0.506,0.794,0.682,0.768,0.808,0.732,0.764,0.778,0.782,0.74,0.712,0.752,0.736,0.534,0.53,0.778,0.548,0.732,0.77,0.74,0.496,0.712,0.734,0.752,0.766,0.79,0.502,0.652,0.788,0.716,0.81,0.728,0.754,0.766,0.656,0,0.758,0.706,0.694,0.754,0.784,0.756,0.694,0.744,0.67,0.754,0.738,0.79,0.512,0.542,0.47,0.5,0.812,0.736,0.648,0.608,0.734,0.76,0.766,0.712,0.712,0.758,0.782,0.658,0.5,0.766,0.774,0.772,0.506,0.706,0.76,0.778,0.518,0.498,0.712,0,0.768,0.53,0.754,0.474,0.506,0.512,0.62,0.528,0.764,0.74,0.5,0.738,0.744,0.798,0.754,0.624,0.802,0.776,0.526,0.638,0.758,0.662,0.798,0.592,0.528,0.538,0.788,0.694,0.506,0.796,0,0.79,0.506,0.526,0.796,0.786,0.812,0.786,0.526,0.782,0.698,0.762,0.552,0.5,0.74,0.748,0.5,0.784,0.504,0.778,0.77,0.712,0.632,0.516,0,0.758,0.772,0.542,0.788,0.802,0.75,0.722,0.672,0.738,0.78,0.764,0.522,0.806,0.738,0.786
44357,0.756,0.714,0.598,0.768,0.512,0.766,0.698,0.766,0.768,0.732,0.738,0.764,0.774,0.748,0.708,0.77,0.71,0.59,0.608,0.764,0.614,0.712,0.752,0.708,0.498,0.706,0.706,0.714,0.764,0.774,0.504,0.686,0.778,0.726,0.736,0.726,0.72,0.72,0.686,0,0.74,0.672,0.67,0.762,0.758,0.702,0.67,0.728,0.62,0.734,0.752,0.766,0.542,0.508,0.508,0.586,0.776,0.706,0.628,0.606,0.694,0.756,0.758,0.708,0.728,0.738,0.742,0.704,0.5,0.766,0.75,0.772,0.47,0.736,0.744,0.762,0.58,0.512,0.706,0,0.752,0.59,0.736,0.0,0.512,0.502,0.578,0.59,0.766,0.744,0.5,0.728,0.748,0.786,0.748,0.662,0.776,0.73,0.5,0.642,0.744,0.64,0.778,0.648,0.506,0.604,0.75,0.67,0.498,0.772,0,0.764,0.512,0.44,0.768,0.736,0.782,0.784,0.578,0.732,0.622,0.758,0.614,0.5,0.73,0.756,0.6,0.782,0.488,0.742,0.746,0.726,0.662,0.56,0,0.738,0.764,0.604,0.758,0.784,0.716,0.744,0.718,0.756,0.758,0.734,0.5,0.786,0.716,0.776
44358,0.772,0.722,0.556,0.784,0.512,0.772,0.678,0.774,0.758,0.728,0.74,0.738,0.776,0.734,0.718,0.746,0.738,0.562,0.58,0.76,0.538,0.724,0.758,0.714,0.508,0.718,0.668,0.744,0.758,0.77,0.506,0.62,0.778,0.74,0.74,0.71,0.748,0.734,0.676,0,0.734,0.708,0.628,0.752,0.77,0.694,0.628,0.746,0.632,0.738,0.742,0.778,0.516,0.502,0.494,0.53,0.782,0.676,0.592,0.56,0.732,0.754,0.764,0.718,0.728,0.74,0.756,0.726,0.5,0.76,0.768,0.758,0.48,0.714,0.74,0.756,0.55,0.498,0.718,0,0.76,0.548,0.736,0.0,0.512,0.504,0.62,0.562,0.764,0.756,0.5,0.75,0.716,0.77,0.726,0.662,0.78,0.738,0.522,0.584,0.75,0.7,0.786,0.65,0.49,0.62,0.764,0.628,0.0,0.774,0,0.76,0.512,0.49,0.766,0.746,0.758,0.768,0.548,0.75,0.668,0.752,0.542,0.5,0.716,0.702,0.542,0.776,0.502,0.738,0.77,0.694,0.61,0.534,0,0.74,0.756,0.55,0.778,0.764,0.726,0.698,0.686,0.77,0.752,0.714,0.704,0.782,0.73,0.778

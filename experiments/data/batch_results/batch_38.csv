0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44629,0.85,0.844,0.85,0.856,0.864,0.854,0.826,0.85,0.862,0.846,0.846,0.846,0.86,0.852,0.846,0.862,0.87,0.85,0.858,0.85,0.848,0.86,0.848,0.846,0.848,0.846,0.846,0.862,0.852,0.846,0.846,0.858,0.862,0.846,0.878,0.856,0.844,0.846,0.856,0,0.692,0.862,0.846,0.874,0.852,0.79,0.846,0.846,0.864,0.846,0.852,0.852,0.852,0.844,0.846,0.85,0.87,0.848,0.86,0.852,0.84,0.852,0.852,0.846,0.858,0.572,0.874,0.866,0.846,0.852,0.846,0.874,0.848,0.856,0.846,0.862,0.85,0.846,0.846,0,0.846,0.846,0.856,0.83,0.864,0.846,0.86,0.85,0.856,0.846,0.846,0.852,0.86,0.858,0.874,0.864,0.858,0.862,0.846,0.85,0.848,0.828,0.856,0.86,0.848,0.848,0.866,0.846,0.846,0.858,0,0.844,0.864,0.83,0.862,0.874,0.858,0.856,0.85,0.854,0.846,0.7,0.846,0.846,0.832,0.836,0.846,0.858,0.726,0.86,0.878,0.848,0.858,0.848,0.0,0.81,0.86,0.846,0.862,0.86,0.864,0.846,0.846,0.854,0.854,0.87,0.826,0.86,0.86,0.856
44630,0.856,0.84,0.854,0.86,0.85,0.844,0.834,0.856,0.866,0.846,0.846,0.846,0.858,0.838,0.846,0.864,0.852,0.828,0.844,0.858,0.852,0.866,0.862,0.846,0.848,0.846,0.842,0.846,0.864,0.846,0.846,0.85,0.866,0.846,0.868,0.862,0.856,0.846,0.86,0,0.668,0.85,0.846,0.87,0.864,0.696,0.846,0.846,0.864,0.846,0.858,0.86,0.83,0.842,0.846,0.848,0.874,0.848,0.862,0.862,0.846,0.86,0.852,0.846,0.864,0.514,0.87,0.854,0.846,0.862,0.844,0.852,0.846,0.852,0.846,0.86,0.836,0.846,0.846,0,0.846,0.846,0.862,0.826,0.85,0.846,0.868,0.842,0.86,0.846,0.846,0.854,0.844,0.87,0.864,0.85,0.866,0.866,0.846,0.86,0.854,0.822,0.872,0.852,0.846,0.858,0.854,0.846,0.834,0.872,0,0.846,0.85,0.814,0.866,0.866,0.864,0.862,0.836,0.844,0.846,0.664,0.846,0.846,0.838,0.822,0.846,0.862,0.724,0.864,0.874,0.846,0.858,0.836,0.0,0.68,0.856,0.854,0.862,0.856,0.846,0.84,0.846,0.862,0.856,0.86,0.82,0.874,0.856,0.864
44631,0.872,0.848,0.856,0.866,0.852,0.872,0.822,0.874,0.868,0.846,0.846,0.846,0.866,0.862,0.846,0.864,0.848,0.84,0.856,0.856,0.858,0.866,0.848,0.846,0.85,0.846,0.85,0.854,0.854,0.846,0.846,0.85,0.874,0.846,0.87,0.858,0.82,0.846,0.852,0,0.65,0.882,0.846,0.864,0.864,0.848,0.846,0.846,0.862,0.846,0.846,0.868,0.854,0.858,0.846,0.844,0.874,0.86,0.856,0.864,0.838,0.852,0.856,0.846,0.856,0.65,0.862,0.864,0.846,0.854,0.86,0.856,0.85,0.854,0.846,0.868,0.846,0.846,0.846,0,0.846,0.846,0.862,0.836,0.852,0.846,0.854,0.856,0.86,0.846,0.846,0.848,0.83,0.866,0.87,0.854,0.87,0.874,0.846,0.868,0.874,0.826,0.866,0.856,0.852,0.864,0.878,0.846,0.85,0.874,0,0.85,0.852,0.832,0.872,0.868,0.866,0.854,0.846,0.872,0.846,0.626,0.846,0.846,0.866,0.852,0.846,0.864,0.754,0.868,0.866,0.868,0.87,0.844,0.0,0.666,0.864,0.856,0.878,0.872,0.858,0.864,0.846,0.858,0.854,0.86,0.822,0.872,0.88,0.862
44632,0.852,0.836,0.858,0.864,0.86,0.866,0.824,0.866,0.864,0.846,0.846,0.846,0.866,0.83,0.846,0.876,0.852,0.85,0.862,0.856,0.86,0.858,0.858,0.846,0.846,0.846,0.846,0.846,0.858,0.846,0.846,0.846,0.866,0.862,0.876,0.848,0.846,0.846,0.848,0,0.664,0.854,0.846,0.882,0.864,0.66,0.846,0.846,0.86,0.846,0.856,0.838,0.846,0.868,0.846,0.832,0.862,0.856,0.852,0.856,0.83,0.856,0.85,0.846,0.858,0.524,0.864,0.85,0.846,0.86,0.85,0.874,0.846,0.866,0.846,0.86,0.856,0.846,0.846,0,0.846,0.846,0.864,0.822,0.86,0.846,0.87,0.856,0.862,0.846,0.846,0.84,0.852,0.878,0.856,0.86,0.866,0.864,0.846,0.854,0.854,0.83,0.864,0.872,0.85,0.862,0.864,0.846,0.85,0.866,0,0.854,0.86,0.824,0.866,0.87,0.86,0.854,0.856,0.826,0.846,0.648,0.846,0.846,0.836,0.832,0.846,0.862,0.726,0.864,0.858,0.852,0.864,0.848,0.0,0.678,0.874,0.86,0.872,0.858,0.846,0.842,0.846,0.862,0.858,0.852,0.838,0.866,0.872,0.854
44633,0.902,0.9,0.822,0.91,0.0,0.912,0.846,0.926,0.934,0.854,0.44,0.806,0.904,0.886,0.284,0.648,0.828,0.928,0.886,0.89,0.858,0.92,0.894,0.416,0.398,0.284,0.784,0.872,0.91,0.914,0.594,0.746,0.912,0.484,0.92,0.826,0.246,0.626,0.852,0,0.426,0.942,0.284,0.64,0.916,0.51,0.284,0.434,0.754,0.416,0.902,0.934,0.822,0.694,0.22,0.898,0.944,0.846,0.894,0.872,0.854,0.89,0.896,0.284,0.81,0.43,0.894,0.908,0.154,0.9,0.9,0.93,0.41,0.782,0.414,0.934,0.906,0.142,0.284,0,0.858,0.0,0.912,0.0,0.0,0.29,0.818,0.872,0.898,0.82,0.142,0.884,0.876,0.926,0.904,0.0,0.936,0.912,0.408,0.896,0.942,0.762,0.936,0.882,0.346,0.85,0.92,0.284,0.344,0.934,0,0.934,0.0,0.252,0.916,0.908,0.928,0.898,0.906,0.918,0.81,0.676,0.772,0.0,0.894,0.898,0.0,0.908,0.0,0.944,0.906,0.926,0.916,0.774,0.0,0.43,0.94,0.822,0.946,0.91,0.874,0.874,0.854,0.92,0.902,0.854,0.7,0.93,0.942,0.888
44634,0.912,0.9,0.83,0.922,0.0,0.926,0.858,0.946,0.948,0.876,0.45,0.758,0.94,0.902,0.284,0.552,0.868,0.922,0.876,0.914,0.866,0.928,0.912,0.438,0.39,0.284,0.786,0.896,0.93,0.934,0.686,0.71,0.938,0.472,0.934,0.808,0.332,0.618,0.866,0,0.42,0.94,0.284,0.616,0.924,0.394,0.284,0.444,0.798,0.426,0.922,0.95,0.79,0.696,0.25,0.894,0.944,0.846,0.926,0.882,0.872,0.916,0.92,0.284,0.778,0.422,0.898,0.904,0.142,0.918,0.918,0.924,0.356,0.782,0.44,0.946,0.914,0.142,0.284,0,0.896,0.0,0.908,0.0,0.0,0.296,0.866,0.874,0.914,0.824,0.142,0.902,0.884,0.936,0.922,0.0,0.928,0.918,0.534,0.886,0.938,0.76,0.934,0.878,0.342,0.858,0.93,0.284,0.0,0.94,0,0.926,0.0,0.344,0.93,0.906,0.938,0.914,0.914,0.932,0.8,0.68,0.782,0.0,0.91,0.908,0.0,0.93,0.0,0.95,0.914,0.94,0.902,0.758,0.0,0.422,0.946,0.838,0.944,0.928,0.898,0.894,0.904,0.932,0.916,0.864,0.732,0.93,0.938,0.92
44635,0.916,0.892,0.802,0.914,0.0,0.924,0.876,0.934,0.932,0.866,0.448,0.78,0.922,0.89,0.286,0.572,0.834,0.918,0.874,0.892,0.842,0.914,0.898,0.428,0.322,0.286,0.786,0.872,0.912,0.91,0.674,0.786,0.926,0.494,0.926,0.838,0.51,0.57,0.844,0,0.436,0.934,0.286,0.602,0.91,0.352,0.286,0.424,0.774,0.428,0.894,0.922,0.784,0.682,0.256,0.874,0.93,0.84,0.91,0.87,0.852,0.906,0.9,0.286,0.83,0.438,0.902,0.898,0.084,0.902,0.896,0.91,0.362,0.77,0.428,0.924,0.892,0.142,0.286,0,0.876,0.0,0.918,0.0,0.0,0.284,0.834,0.852,0.908,0.814,0.142,0.872,0.88,0.93,0.902,0.0,0.93,0.918,0.452,0.884,0.922,0.742,0.94,0.872,0.368,0.844,0.916,0.286,0.338,0.932,0,0.92,0.0,0.284,0.902,0.902,0.922,0.902,0.892,0.914,0.78,0.656,0.756,0.0,0.882,0.888,0.0,0.916,0.0,0.938,0.906,0.924,0.892,0.732,0.0,0.438,0.934,0.8,0.938,0.92,0.892,0.89,0.86,0.914,0.906,0.894,0.696,0.932,0.926,0.908
44636,0.918,0.918,0.8,0.91,0.0,0.93,0.862,0.94,0.94,0.848,0.46,0.794,0.92,0.898,0.284,0.636,0.84,0.912,0.866,0.872,0.844,0.9,0.876,0.436,0.386,0.286,0.77,0.86,0.898,0.928,0.616,0.746,0.932,0.494,0.92,0.804,0.466,0.61,0.848,0,0.44,0.936,0.286,0.65,0.926,0.376,0.28,0.456,0.802,0.436,0.918,0.93,0.786,0.664,0.274,0.894,0.936,0.822,0.888,0.846,0.87,0.87,0.874,0.284,0.78,0.44,0.898,0.906,0.142,0.878,0.904,0.92,0.38,0.786,0.434,0.948,0.894,0.142,0.284,0,0.854,0.0,0.908,0.0,0.0,0.284,0.834,0.852,0.876,0.824,0.142,0.898,0.904,0.932,0.876,0.0,0.928,0.9,0.632,0.86,0.944,0.72,0.95,0.868,0.368,0.84,0.942,0.286,0.0,0.934,0,0.926,0.0,0.288,0.924,0.894,0.942,0.888,0.894,0.934,0.808,0.662,0.732,0.0,0.9,0.922,0.0,0.9,0.0,0.934,0.9,0.94,0.882,0.72,0.0,0.44,0.934,0.804,0.942,0.922,0.868,0.898,0.89,0.912,0.878,0.844,0.728,0.928,0.94,0.91
44637,0.892,0.894,0.794,0.9,0.0,0.916,0.87,0.92,0.94,0.838,0.432,0.79,0.924,0.874,0.282,0.622,0.798,0.902,0.852,0.88,0.81,0.902,0.874,0.414,0.396,0.286,0.768,0.872,0.908,0.928,0.61,0.684,0.932,0.47,0.928,0.818,0.5,0.58,0.838,0,0.406,0.932,0.286,0.608,0.91,0.344,0.284,0.426,0.792,0.414,0.886,0.924,0.744,0.7,0.226,0.862,0.928,0.824,0.9,0.838,0.856,0.878,0.868,0.284,0.828,0.408,0.904,0.896,0.158,0.898,0.902,0.91,0.374,0.778,0.408,0.928,0.884,0.144,0.282,0,0.872,0.0,0.896,0.0,0.0,0.256,0.806,0.834,0.884,0.79,0.142,0.878,0.892,0.914,0.9,0.0,0.924,0.904,0.568,0.87,0.932,0.74,0.924,0.868,0.316,0.826,0.914,0.286,0.348,0.924,0,0.916,0.0,0.354,0.916,0.91,0.926,0.898,0.884,0.898,0.778,0.664,0.72,0.0,0.89,0.886,0.0,0.908,0.0,0.934,0.904,0.914,0.876,0.718,0.0,0.408,0.942,0.8,0.94,0.904,0.884,0.876,0.85,0.916,0.886,0.862,0.708,0.916,0.924,0.926
44638,0.758,0.804,0.814,0.884,0.83,0.874,0.882,0.886,0.89,0.548,0.518,0.0,0.882,0.0,0.646,0.518,0.882,0.746,0.0,0.84,0.81,0.878,0.842,0.518,0.566,0.646,0.478,0.88,0.826,0.0,0.518,0.648,0.0,0.518,0.814,0.67,0.858,0.518,0.852,0,0.518,0.88,0.626,0.518,0.856,0.868,0.618,0.518,0.69,0.0,0.0,0.874,0.66,0.742,0.494,0.75,0.87,0.636,0.54,0.794,0.742,0.842,0.836,0.646,0.522,0.518,0.818,0.86,0.518,0.844,0.858,0.884,0.582,0.752,0.518,0.874,0.784,0.518,0.646,0,0.778,0.518,0.864,0.0,0.65,0.236,0.88,0.0,0.86,0.754,0.518,0.806,0.818,0.0,0.624,0.578,0.844,0.804,0.518,0.776,0.872,0.714,0.848,0.844,0.534,0.788,0.862,0.626,0.556,0.86,0,0.0,0.65,0.47,0.0,0.81,0.886,0.882,0.824,0.836,0.866,0.8,0.566,0.518,0.802,0.792,0.518,0.882,0.544,0.878,0.786,0.868,0.774,0.662,0.0,0.518,0.874,0.82,0.826,0.896,0.882,0.818,0.518,0.818,0.884,0.61,0.0,0.884,0.89,0.0
44639,0.71,0.796,0.73,0.832,0.686,0.836,0.842,0.85,0.88,0.554,0.518,0.0,0.838,0.0,0.584,0.518,0.85,0.676,0.0,0.812,0.73,0.83,0.798,0.518,0.554,0.584,0.478,0.826,0.774,0.0,0.518,0.64,0.0,0.518,0.748,0.604,0.854,0.518,0.81,0,0.518,0.846,0.588,0.518,0.808,0.846,0.586,0.518,0.664,0.0,0.0,0.864,0.578,0.676,0.516,0.674,0.842,0.626,0.546,0.708,0.616,0.808,0.804,0.584,0.518,0.518,0.712,0.816,0.518,0.808,0.804,0.848,0.58,0.708,0.518,0.868,0.726,0.518,0.584,0,0.684,0.53,0.834,0.0,0.606,0.292,0.842,0.0,0.816,0.6,0.518,0.73,0.722,0.0,0.622,0.56,0.814,0.736,0.518,0.732,0.85,0.718,0.81,0.802,0.56,0.728,0.824,0.588,0.0,0.824,0,0.0,0.606,0.45,0.0,0.718,0.858,0.83,0.734,0.82,0.812,0.8,0.548,0.518,0.778,0.77,0.518,0.85,0.35,0.868,0.702,0.836,0.726,0.582,0.838,0.518,0.848,0.734,0.794,0.85,0.844,0.758,0.518,0.822,0.816,0.626,0.0,0.832,0.858,0.0
44640,0.756,0.842,0.82,0.864,0.8,0.87,0.878,0.912,0.914,0.552,0.518,0.0,0.876,0.0,0.616,0.518,0.886,0.784,0.0,0.832,0.812,0.888,0.816,0.518,0.562,0.616,0.502,0.882,0.83,0.0,0.518,0.642,0.0,0.518,0.838,0.748,0.898,0.518,0.848,0,0.518,0.908,0.656,0.518,0.838,0.894,0.658,0.518,0.75,0.0,0.0,0.912,0.666,0.762,0.516,0.794,0.88,0.676,0.544,0.828,0.762,0.844,0.834,0.616,0.51,0.518,0.814,0.866,0.518,0.822,0.876,0.874,0.572,0.758,0.518,0.908,0.814,0.518,0.616,0,0.74,0.518,0.872,0.0,0.684,0.272,0.88,0.0,0.838,0.726,0.518,0.816,0.796,0.0,0.624,0.586,0.86,0.826,0.518,0.82,0.896,0.756,0.87,0.844,0.55,0.822,0.866,0.656,0.0,0.87,0,0.0,0.684,0.464,0.0,0.806,0.9,0.872,0.8,0.854,0.88,0.808,0.58,0.518,0.844,0.846,0.518,0.884,0.432,0.896,0.804,0.878,0.814,0.648,0.0,0.518,0.894,0.818,0.846,0.902,0.882,0.852,0.518,0.85,0.856,0.586,0.0,0.864,0.906,0.0
44641,0.652,0.738,0.718,0.804,0.694,0.802,0.838,0.818,0.864,0.548,0.518,0.0,0.786,0.0,0.598,0.518,0.838,0.67,0.0,0.778,0.712,0.8,0.772,0.518,0.574,0.598,0.5,0.842,0.766,0.0,0.518,0.644,0.0,0.518,0.744,0.604,0.868,0.518,0.778,0,0.518,0.842,0.59,0.518,0.778,0.842,0.59,0.518,0.674,0.0,0.0,0.856,0.544,0.672,0.506,0.67,0.812,0.63,0.546,0.694,0.592,0.768,0.77,0.598,0.484,0.518,0.724,0.804,0.512,0.774,0.692,0.818,0.582,0.632,0.518,0.842,0.722,0.518,0.598,0,0.598,0.518,0.808,0.0,0.598,0.27,0.816,0.0,0.792,0.564,0.518,0.742,0.7,0.0,0.622,0.556,0.798,0.718,0.518,0.698,0.858,0.744,0.796,0.732,0.596,0.756,0.8,0.59,0.0,0.814,0,0.0,0.598,0.462,0.0,0.702,0.846,0.72,0.714,0.79,0.726,0.772,0.582,0.518,0.74,0.736,0.518,0.768,0.26,0.864,0.714,0.812,0.734,0.614,0.806,0.518,0.808,0.73,0.762,0.79,0.824,0.674,0.518,0.76,0.798,0.596,0.0,0.79,0.844,0.0
44642,0.824,0.788,0.792,0.866,0.78,0.87,0.862,0.878,0.874,0.558,0.518,0.0,0.87,0.0,0.624,0.518,0.862,0.782,0.0,0.83,0.794,0.868,0.826,0.518,0.556,0.624,0.498,0.86,0.812,0.0,0.518,0.646,0.0,0.518,0.836,0.688,0.866,0.518,0.84,0,0.518,0.866,0.608,0.518,0.844,0.878,0.608,0.518,0.732,0.0,0.0,0.882,0.646,0.762,0.508,0.768,0.866,0.622,0.548,0.778,0.762,0.836,0.838,0.624,0.51,0.518,0.802,0.842,0.518,0.834,0.842,0.848,0.572,0.794,0.518,0.876,0.81,0.518,0.624,0,0.782,0.518,0.87,0.0,0.652,0.274,0.866,0.0,0.834,0.772,0.518,0.812,0.814,0.0,0.628,0.57,0.878,0.834,0.518,0.782,0.872,0.722,0.876,0.832,0.584,0.836,0.866,0.608,0.0,0.882,0,0.0,0.652,0.466,0.0,0.82,0.882,0.862,0.788,0.874,0.85,0.726,0.594,0.518,0.822,0.796,0.518,0.868,0.412,0.874,0.79,0.874,0.792,0.666,0.0,0.518,0.878,0.8,0.838,0.858,0.868,0.83,0.518,0.84,0.844,0.578,0.0,0.856,0.864,0.0
44643,0.828,0.972,0.92,0.976,0.768,0.976,0.964,0.99,0.98,0.962,0.544,0.0,0.976,0.98,0.666,0.562,0.97,0.948,0.0,0.968,0.95,0.966,0.966,0.562,0.718,0.666,0.708,0.968,0.966,0.99,0.722,0.938,0.992,0.562,0.97,0.806,0.994,0.544,0.964,0,0.562,0.966,0.732,0.562,0.974,0.992,0.732,0.522,0.802,0.562,0.978,0.982,0.542,0.852,0.794,0.942,0.99,0.92,0.866,0.958,0.846,0.97,0.97,0.666,0.91,0.562,0.946,0.966,0.546,0.97,0.958,0.966,0.774,0.914,0.562,0.976,0.96,0.522,0.666,0,0.916,0.57,0.964,0.826,0.834,0.89,0.942,0.0,0.972,0.852,0.522,0.966,0.962,0.0,0.964,0.838,0.974,0.962,0.646,0.94,0.996,0.64,0.992,0.958,0.748,0.958,0.988,0.732,0.75,0.988,0,0.0,0.834,0.878,0.988,0.932,0.968,0.972,0.962,0.992,0.966,0.59,0.622,0.522,0.988,0.992,0.548,0.974,0.54,0.992,0.942,0.968,0.936,0.594,0.0,0.562,0.986,0.91,0.992,0.976,0.954,0.944,0.778,0.966,0.974,0.958,0.0,0.986,0.968,0.988
44644,0.826,0.954,0.906,0.976,0.8,0.978,0.958,0.98,0.984,0.94,0.558,0.0,0.974,0.974,0.644,0.554,0.962,0.936,0.0,0.97,0.926,0.968,0.97,0.554,0.718,0.644,0.734,0.976,0.974,0.982,0.718,0.904,0.986,0.554,0.95,0.8,0.9,0.558,0.946,0,0.554,0.97,0.748,0.554,0.974,0.984,0.748,0.522,0.788,0.554,0.978,0.978,0.558,0.848,0.736,0.93,0.984,0.944,0.854,0.928,0.848,0.97,0.97,0.644,0.824,0.554,0.92,0.968,0.542,0.97,0.946,0.98,0.734,0.89,0.554,0.972,0.928,0.522,0.644,0,0.89,0.604,0.97,0.786,0.778,0.888,0.932,0.0,0.968,0.872,0.522,0.974,0.974,0.0,0.964,0.828,0.972,0.952,0.608,0.914,0.988,0.67,0.976,0.89,0.714,0.942,0.974,0.748,0.764,0.982,0,0.0,0.778,0.776,0.982,0.92,0.97,0.96,0.962,0.976,0.952,0.588,0.602,0.522,0.978,0.986,0.572,0.962,0.518,0.994,0.9,0.97,0.944,0.564,0.0,0.554,0.984,0.902,0.992,0.966,0.948,0.954,0.756,0.966,0.976,0.946,0.0,0.974,0.966,0.978
44645,0.812,0.968,0.92,0.978,0.722,0.976,0.968,0.98,0.994,0.96,0.55,0.0,0.972,0.982,0.668,0.55,0.984,0.948,0.0,0.972,0.936,0.97,0.972,0.55,0.73,0.668,0.748,0.98,0.972,0.988,0.656,0.926,0.996,0.55,0.958,0.858,0.996,0.536,0.948,0,0.55,0.974,0.7,0.55,0.974,0.81,0.7,0.522,0.796,0.55,0.99,0.976,0.544,0.836,0.754,0.942,0.996,0.922,0.862,0.95,0.878,0.972,0.972,0.668,0.898,0.55,0.932,0.966,0.526,0.972,0.944,0.972,0.78,0.908,0.55,0.972,0.946,0.522,0.668,0,0.912,0.61,0.974,0.796,0.822,0.9,0.94,0.0,0.972,0.84,0.522,0.968,0.972,0.0,0.972,0.832,0.976,0.958,0.62,0.944,0.992,0.672,0.99,0.91,0.734,0.94,0.988,0.7,0.69,0.99,0,0.0,0.82,0.872,0.994,0.922,0.958,0.942,0.968,0.99,0.95,0.594,0.61,0.522,0.996,0.996,0.57,0.968,0.536,0.996,0.928,0.978,0.942,0.56,0.0,0.55,0.992,0.9,0.996,0.974,0.932,0.944,0.78,0.974,0.972,0.942,0.0,0.988,0.978,0.978
44646,0.778,0.97,0.894,0.964,0.808,0.974,0.94,0.952,0.974,0.936,0.532,0.0,0.952,0.966,0.67,0.532,0.958,0.916,0.0,0.956,0.91,0.938,0.954,0.558,0.722,0.67,0.654,0.948,0.952,0.97,0.558,0.896,0.982,0.558,0.946,0.824,0.962,0.532,0.918,0,0.558,0.95,0.7,0.532,0.958,0.972,0.7,0.522,0.756,0.532,0.964,0.962,0.592,0.842,0.71,0.912,0.972,0.926,0.88,0.912,0.854,0.956,0.956,0.67,0.884,0.558,0.922,0.942,0.568,0.958,0.932,0.942,0.774,0.904,0.532,0.96,0.914,0.522,0.67,0,0.898,0.65,0.956,0.776,0.776,0.86,0.928,0.0,0.96,0.876,0.522,0.948,0.952,0.0,0.968,0.788,0.956,0.948,0.666,0.914,0.99,0.658,0.968,0.932,0.706,0.93,0.966,0.7,0.716,0.968,0,0.0,0.778,0.81,0.968,0.922,0.948,0.932,0.942,0.966,0.938,0.552,0.602,0.522,0.988,0.974,0.632,0.942,0.548,0.992,0.916,0.95,0.926,0.544,0.0,0.558,0.984,0.9,0.984,0.94,0.928,0.924,0.734,0.95,0.96,0.932,0.0,0.968,0.942,0.97
44647,0.798,0.964,0.9,0.962,0.714,0.96,0.942,0.972,0.972,0.938,0.554,0.0,0.958,0.968,0.672,0.554,0.956,0.934,0.0,0.956,0.914,0.956,0.94,0.554,0.698,0.672,0.718,0.958,0.956,0.966,0.606,0.884,0.992,0.554,0.956,0.796,0.988,0.522,0.942,0,0.522,0.968,0.698,0.554,0.956,0.988,0.698,0.522,0.802,0.554,0.984,0.972,0.602,0.832,0.726,0.922,0.98,0.908,0.856,0.914,0.828,0.946,0.956,0.672,0.904,0.522,0.922,0.944,0.564,0.956,0.928,0.956,0.784,0.9,0.554,0.966,0.926,0.522,0.672,0,0.904,0.606,0.956,0.836,0.796,0.884,0.92,0.0,0.956,0.83,0.522,0.956,0.958,0.0,0.94,0.808,0.954,0.934,0.638,0.9,0.988,0.61,0.976,0.898,0.742,0.924,0.96,0.698,0.71,0.968,0,0.0,0.796,0.8,0.964,0.92,0.95,0.948,0.956,0.97,0.938,0.576,0.604,0.522,0.992,0.974,0.528,0.954,0.522,0.984,0.918,0.964,0.928,0.578,0.0,0.522,0.978,0.904,0.986,0.958,0.936,0.928,0.738,0.954,0.956,0.902,0.0,0.958,0.962,0.97
44648,0.0,0.896,0.874,0.902,0.14,0.898,0.902,0.916,0.89,0.896,0.86,0.0,0.888,0.0,0.888,0.86,0.916,0.916,0.0,0.888,0.892,0.902,0.888,0.86,0.914,0.888,0.88,0.916,0.888,0.0,0.86,0.916,0.0,0.86,0.916,0.91,0.888,0.86,0.888,0,0.86,0.898,0.89,0.86,0.888,0.886,0.89,0.86,0.914,0.0,0.0,0.888,0.856,0.918,0.892,0.908,0.916,0.914,0.91,0.894,0.912,0.888,0.888,0.888,0.902,0.86,0.914,0.9,0.86,0.888,0.888,0.898,0.916,0.888,0.86,0.888,0.916,0.86,0.888,0,0.86,0.86,0.91,0.91,0.86,0.888,0.918,0.0,0.888,0.86,0.86,0.888,0.888,0.0,0.914,0.86,0.86,0.918,0.86,0.9,0.888,0.7,0.91,0.91,0.912,0.9,0.902,0.89,0.91,0.91,0,0.0,0.86,0.91,0.0,0.914,0.918,0.86,0.916,0.902,0.86,0.88,0.856,0.86,0.918,0.91,0.86,0.898,0.308,0.9,0.914,0.918,0.914,0.856,0.548,0.86,0.916,0.89,0.914,0.91,0.874,0.904,0.86,0.896,0.888,0.908,0.0,0.902,0.918,0.0

0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44729,0.216,0.202,0.174,0.234,0.0,0.0,0.22,0.224,0.0,0.2,0.0,0.0,0.258,0.0,0.082,0.136,0.246,0.178,0.186,0.228,0.178,0.23,0.214,0.158,0.046,0.102,0.146,0.228,0.238,0.0,0.0,0.168,0.26,0.184,0.246,0.152,0.0,0.0,0.198,0,0.15,0.0,0.08,0.0,0.0,0.0,0.088,0.0,0.182,0.188,0.0,0.0,0.108,0.144,0.042,0.182,0.254,0.226,0.214,0.192,0.204,0.218,0.232,0.082,0.152,0.058,0.0,0.218,0.062,0.222,0.0,0.0,0.048,0.168,0.172,0.0,0.19,0.062,0.082,0,0.0,0.0,0.202,0,0.0,0.034,0.2,0.18,0.24,0.0,0.062,0.172,0.18,0.0,0.0,0.0,0.226,0.262,0.148,0.212,0.0,0.158,0.248,0.186,0.046,0.172,0.0,0.08,0.0,0.24,0,0.0,0.0,0.04,0.0,0.254,0.0,0.26,0.19,0.0,0.174,0.168,0.138,0.0,0.184,0.2,0.0,0.266,0.0,0.0,0.252,0.0,0.208,0.124,0,0.188,0.238,0.178,0.242,0.244,0.232,0.194,0.0,0.228,0.22,0.218,0.13,0.234,0.0,0.252
44730,0.232,0.204,0.192,0.244,0.0,0.0,0.23,0.264,0.0,0.224,0.0,0.0,0.262,0.0,0.088,0.136,0.232,0.168,0.198,0.242,0.208,0.248,0.234,0.152,0.032,0.104,0.166,0.234,0.264,0.0,0.0,0.14,0.278,0.162,0.27,0.148,0.0,0.0,0.204,0,0.168,0.0,0.086,0.0,0.0,0.0,0.094,0.0,0.184,0.164,0.0,0.0,0.114,0.128,0.038,0.174,0.266,0.256,0.242,0.204,0.198,0.24,0.246,0.088,0.154,0.066,0.0,0.23,0.062,0.24,0.0,0.0,0.04,0.172,0.162,0.0,0.194,0.062,0.088,0,0.0,0.0,0.226,0,0.0,0.0,0.232,0.198,0.244,0.0,0.062,0.206,0.212,0.0,0.0,0.0,0.232,0.252,0.14,0.236,0.0,0.228,0.256,0.182,0.032,0.192,0.0,0.086,0.0,0.266,0,0.0,0.0,0.03,0.0,0.258,0.0,0.252,0.194,0.0,0.22,0.176,0.144,0.0,0.178,0.162,0.0,0.274,0.0,0.0,0.25,0.0,0.242,0.132,0,0.164,0.252,0.192,0.274,0.268,0.234,0.196,0.0,0.268,0.246,0.228,0.162,0.256,0.0,0.272
44731,0.0,0.192,0.194,0.292,0.0,0.0,0.24,0.286,0.0,0.21,0.0,0.0,0.3,0.0,0.092,0.14,0.272,0.18,0.218,0.258,0.198,0.28,0.242,0.15,0.062,0.096,0.174,0.236,0.292,0.0,0.0,0.2,0.31,0.174,0.28,0.158,0.0,0.0,0.246,0,0.162,0.0,0.098,0.0,0.0,0.0,0.088,0.0,0.204,0.182,0.0,0.0,0.102,0.162,0.036,0.174,0.298,0.238,0.242,0.22,0.156,0.246,0.262,0.092,0.148,0.078,0.0,0.234,0.062,0.254,0.0,0.0,0.056,0.198,0.176,0.0,0.192,0.062,0.092,0,0.0,0.0,0.244,0,0.0,0.028,0.24,0.206,0.28,0.0,0.062,0.23,0.21,0.0,0.244,0.0,0.244,0.288,0.138,0.244,0.0,0.166,0.276,0.2,0.038,0.202,0.0,0.098,0.0,0.286,0,0.0,0.0,0.026,0.0,0.26,0.0,0.258,0.19,0.0,0.228,0.17,0.148,0.0,0.216,0.182,0.0,0.274,0.0,0.0,0.258,0.0,0.254,0.15,0,0.17,0.274,0.19,0.278,0.28,0.232,0.224,0.0,0.266,0.282,0.238,0.158,0.29,0.0,0.29
44732,0.0,0.188,0.2,0.268,0.0,0.0,0.23,0.266,0.0,0.216,0.0,0.0,0.27,0.0,0.076,0.17,0.25,0.158,0.196,0.25,0.21,0.258,0.238,0.152,0.06,0.106,0.182,0.22,0.268,0.0,0.0,0.176,0.3,0.184,0.28,0.158,0.0,0.0,0.242,0,0.168,0.0,0.096,0.0,0.0,0.0,0.084,0.0,0.216,0.17,0.0,0.0,0.084,0.148,0.034,0.168,0.294,0.234,0.256,0.222,0.198,0.242,0.27,0.076,0.14,0.052,0.0,0.252,0.062,0.25,0.0,0.0,0.06,0.184,0.194,0.0,0.17,0.062,0.076,0,0.0,0.0,0.248,0,0.0,0.042,0.23,0.208,0.278,0.0,0.062,0.206,0.204,0.0,0.26,0.0,0.252,0.264,0.15,0.248,0.0,0.194,0.268,0.196,0.046,0.188,0.0,0.096,0.0,0.252,0,0.0,0.0,0.036,0.0,0.266,0.0,0.268,0.172,0.0,0.212,0.192,0.132,0.0,0.2,0.194,0.0,0.272,0.0,0.0,0.0,0.0,0.25,0.108,0,0.164,0.276,0.2,0.282,0.26,0.208,0.19,0.0,0.264,0.268,0.234,0.138,0.272,0.0,0.28
44733,0.398,0.474,0.446,0.526,0.0,0.544,0.47,0.574,0.566,0.386,0.394,0.348,0.548,0.0,0.366,0.346,0.488,0.468,0.256,0.526,0.492,0.53,0.52,0.366,0.488,0.386,0.39,0.5,0.536,0.0,0.362,0.4,0.0,0.394,0.524,0.372,0.0,0.388,0.498,0,0.368,0.0,0.358,0.41,0.548,0.0,0.358,0.334,0.356,0.39,0.0,0.538,0.33,0.444,0.458,0.464,0.556,0.404,0.452,0.508,0.388,0.532,0.536,0.366,0.374,0.292,0.0,0.5,0.258,0.526,0.552,0.516,0.494,0.436,0.392,0.522,0.46,0.22,0.366,0,0.506,0.0,0.526,0,0.0,0.434,0.512,0.322,0.536,0.494,0.22,0.46,0.456,0.332,0.432,0.0,0.448,0.538,0.352,0.52,0.562,0.176,0.552,0.504,0.466,0.432,0.548,0.358,0.0,0.536,0,0.0,0.0,0.518,0.0,0.524,0.544,0.528,0.446,0.534,0.504,0.424,0.378,0.0,0.446,0.444,0.0,0.55,0.0,0.0,0.52,0.558,0.51,0.34,0,0.346,0.568,0.446,0.562,0.536,0.44,0.466,0.38,0.53,0.538,0.418,0.358,0.552,0.552,0.0
44734,0.4,0.43,0.418,0.538,0.0,0.564,0.472,0.548,0.574,0.4,0.38,0.352,0.546,0.0,0.382,0.316,0.498,0.468,0.306,0.532,0.432,0.544,0.526,0.354,0.456,0.388,0.258,0.504,0.55,0.0,0.358,0.422,0.0,0.392,0.506,0.402,0.0,0.378,0.482,0,0.38,0.0,0.358,0.42,0.536,0.0,0.36,0.346,0.334,0.374,0.0,0.522,0.318,0.426,0.404,0.432,0.546,0.392,0.458,0.516,0.396,0.512,0.53,0.382,0.354,0.284,0.0,0.49,0.334,0.532,0.51,0.058,0.462,0.424,0.398,0.564,0.46,0.22,0.382,0,0.508,0.0,0.54,0,0.0,0.36,0.534,0.336,0.542,0.496,0.22,0.486,0.454,0.35,0.448,0.0,0.442,0.506,0.358,0.512,0.538,0.208,0.55,0.47,0.418,0.432,0.536,0.358,0.0,0.558,0,0.0,0.0,0.498,0.0,0.504,0.52,0.528,0.446,0.492,0.488,0.444,0.368,0.0,0.432,0.432,0.0,0.538,0.0,0.0,0.506,0.54,0.508,0.326,0,0.318,0.526,0.42,0.554,0.536,0.44,0.478,0.37,0.538,0.534,0.45,0.346,0.538,0.524,0.0
44735,0.396,0.482,0.478,0.556,0.0,0.574,0.514,0.586,0.578,0.444,0.436,0.366,0.558,0.0,0.368,0.408,0.522,0.514,0.296,0.562,0.496,0.548,0.548,0.426,0.484,0.402,0.212,0.53,0.564,0.0,0.378,0.466,0.0,0.418,0.548,0.424,0.0,0.376,0.524,0,0.418,0.0,0.374,0.444,0.566,0.0,0.368,0.372,0.386,0.436,0.0,0.568,0.346,0.494,0.478,0.484,0.582,0.412,0.476,0.526,0.43,0.548,0.56,0.368,0.416,0.274,0.0,0.524,0.33,0.556,0.56,0.53,0.502,0.462,0.424,0.582,0.494,0.22,0.368,0,0.522,0.0,0.568,0,0.0,0.416,0.54,0.3,0.568,0.506,0.22,0.452,0.506,0.328,0.452,0.0,0.468,0.544,0.378,0.532,0.574,0.186,0.576,0.504,0.482,0.466,0.56,0.374,0.0,0.574,0,0.0,0.0,0.53,0.0,0.562,0.588,0.546,0.496,0.568,0.518,0.442,0.346,0.0,0.474,0.486,0.0,0.564,0.0,0.0,0.554,0.564,0.54,0.378,0,0.384,0.572,0.48,0.574,0.56,0.484,0.478,0.372,0.56,0.544,0.456,0.368,0.566,0.578,0.0
44736,0.32,0.458,0.446,0.52,0.0,0.548,0.484,0.558,0.54,0.42,0.426,0.328,0.53,0.0,0.368,0.37,0.468,0.484,0.0,0.508,0.476,0.54,0.496,0.398,0.46,0.376,0.182,0.508,0.518,0.0,0.366,0.378,0.0,0.428,0.516,0.394,0.0,0.368,0.488,0,0.402,0.0,0.342,0.418,0.546,0.0,0.344,0.358,0.344,0.404,0.0,0.504,0.32,0.492,0.448,0.466,0.526,0.424,0.448,0.526,0.408,0.504,0.506,0.368,0.368,0.322,0.496,0.502,0.304,0.514,0.536,0.476,0.478,0.434,0.428,0.5,0.482,0.22,0.368,0,0.512,0.0,0.508,0,0.0,0.418,0.53,0.272,0.502,0.492,0.22,0.416,0.452,0.308,0.442,0.0,0.448,0.49,0.364,0.528,0.54,0.348,0.526,0.446,0.45,0.46,0.56,0.342,0.0,0.544,0,0.0,0.0,0.48,0.0,0.51,0.536,0.528,0.494,0.534,0.496,0.454,0.296,0.0,0.47,0.448,0.0,0.526,0.0,0.0,0.496,0.534,0.518,0.364,0,0.39,0.556,0.448,0.546,0.544,0.45,0.446,0.354,0.526,0.52,0.458,0.334,0.532,0.564,0.0
44737,0.43,0.46,0.448,0.572,0.0,0.57,0.502,0.608,0.592,0.446,0.416,0.37,0.55,0.0,0.384,0.384,0.538,0.514,0.0,0.562,0.468,0.568,0.57,0.41,0.482,0.39,0.222,0.518,0.568,0.0,0.386,0.422,0.0,0.396,0.566,0.396,0.0,0.398,0.53,0,0.41,0.0,0.344,0.426,0.566,0.0,0.344,0.344,0.364,0.436,0.0,0.58,0.364,0.468,0.448,0.496,0.604,0.408,0.474,0.522,0.44,0.548,0.57,0.384,0.404,0.27,0.0,0.554,0.326,0.564,0.558,0.532,0.506,0.478,0.422,0.6,0.494,0.22,0.384,0,0.542,0.0,0.558,0,0.0,0.408,0.552,0.274,0.562,0.51,0.22,0.484,0.462,0.38,0.478,0.0,0.458,0.548,0.37,0.546,0.554,0.234,0.574,0.52,0.484,0.474,0.578,0.344,0.0,0.582,0,0.0,0.0,0.496,0.0,0.536,0.584,0.55,0.474,0.532,0.518,0.472,0.352,0.0,0.464,0.46,0.0,0.574,0.0,0.0,0.538,0.566,0.57,0.386,0,0.366,0.592,0.448,0.594,0.572,0.47,0.472,0.362,0.566,0.574,0.44,0.326,0.582,0.57,0.0
44738,0.344,0.206,0.262,0.352,0.312,0.352,0.318,0.358,0.358,0.3,0.13,0.27,0.362,0.0,0.148,0.098,0.322,0.328,0.328,0.338,0.312,0.37,0.338,0.112,0.094,0.148,0.102,0.302,0.366,0.0,0.104,0.19,0.0,0.118,0.296,0.19,0.0,0.118,0.338,0,0.122,0.0,0.164,0.12,0.37,0.0,0.166,0.14,0.26,0.116,0.0,0.342,0.162,0.246,0.104,0.284,0.358,0.158,0.1,0.274,0.188,0.356,0.332,0.148,0.148,0.112,0.0,0.336,0.098,0.342,0.0,0.33,0.104,0.21,0.13,0.382,0.28,0.104,0.148,0,0.316,0.152,0.338,0,0.312,0.096,0.334,0.276,0.374,0.314,0.104,0.242,0.22,0.0,0.246,0.312,0.372,0.326,0.206,0.326,0.37,0.294,0.368,0.322,0.09,0.274,0.0,0.164,0.0,0.364,0,0.336,0.312,0.106,0.0,0.298,0.36,0.352,0.264,0.0,0.35,0.286,0.17,0.104,0.21,0.196,0.144,0.378,0.194,0.0,0.3,0.344,0.332,0.148,0,0.11,0.32,0.258,0.38,0.362,0.296,0.222,0.262,0.342,0.358,0.24,0.354,0.35,0.354,0.0
44739,0.338,0.204,0.268,0.334,0.318,0.346,0.302,0.366,0.334,0.25,0.118,0.25,0.368,0.0,0.158,0.096,0.296,0.276,0.308,0.362,0.306,0.318,0.332,0.09,0.096,0.158,0.068,0.292,0.354,0.0,0.104,0.198,0.0,0.104,0.28,0.2,0.0,0.108,0.334,0,0.114,0.0,0.168,0.128,0.326,0.0,0.168,0.124,0.226,0.104,0.0,0.324,0.15,0.234,0.106,0.246,0.332,0.118,0.114,0.276,0.21,0.322,0.342,0.158,0.146,0.128,0.0,0.34,0.098,0.304,0.0,0.31,0.1,0.214,0.116,0.292,0.274,0.104,0.158,0,0.304,0.15,0.348,0,0.318,0.096,0.362,0.262,0.348,0.32,0.104,0.206,0.218,0.0,0.238,0.304,0.324,0.274,0.204,0.292,0.34,0.258,0.356,0.284,0.116,0.262,0.0,0.168,0.0,0.334,0,0.296,0.318,0.106,0.0,0.294,0.328,0.34,0.258,0.0,0.318,0.282,0.182,0.104,0.204,0.204,0.12,0.346,0.18,0.0,0.276,0.35,0.314,0.162,0,0.122,0.326,0.268,0.338,0.322,0.298,0.212,0.266,0.348,0.34,0.228,0.34,0.348,0.328,0.0
44740,0.33,0.226,0.248,0.322,0.256,0.314,0.286,0.354,0.376,0.24,0.132,0.256,0.322,0.0,0.15,0.116,0.284,0.264,0.266,0.322,0.28,0.32,0.298,0.116,0.122,0.15,0.114,0.298,0.312,0.0,0.104,0.196,0.0,0.116,0.278,0.164,0.0,0.122,0.3,0,0.128,0.0,0.156,0.138,0.312,0.0,0.162,0.144,0.238,0.132,0.0,0.304,0.148,0.238,0.094,0.238,0.326,0.204,0.104,0.238,0.186,0.298,0.308,0.15,0.134,0.14,0.0,0.286,0.098,0.298,0.0,0.322,0.096,0.204,0.138,0.308,0.242,0.104,0.15,0,0.316,0.15,0.31,0,0.256,0.094,0.302,0.246,0.294,0.304,0.104,0.232,0.21,0.0,0.202,0.268,0.318,0.278,0.208,0.28,0.326,0.25,0.32,0.29,0.114,0.266,0.0,0.156,0.0,0.326,0,0.328,0.256,0.12,0.0,0.278,0.348,0.314,0.252,0.0,0.288,0.278,0.182,0.104,0.202,0.222,0.152,0.332,0.174,0.0,0.228,0.356,0.266,0.158,0,0.136,0.336,0.238,0.336,0.332,0.292,0.2,0.268,0.29,0.304,0.238,0.28,0.314,0.35,0.0
44741,0.356,0.226,0.228,0.378,0.306,0.35,0.294,0.332,0.346,0.206,0.12,0.284,0.35,0.0,0.16,0.108,0.3,0.272,0.292,0.362,0.276,0.374,0.324,0.108,0.136,0.16,0.092,0.276,0.344,0.0,0.104,0.196,0.0,0.11,0.284,0.222,0.0,0.128,0.32,0,0.12,0.0,0.172,0.122,0.34,0.0,0.172,0.13,0.228,0.112,0.0,0.338,0.114,0.224,0.104,0.23,0.366,0.152,0.09,0.228,0.198,0.34,0.344,0.16,0.14,0.134,0.0,0.364,0.098,0.348,0.0,0.284,0.112,0.2,0.124,0.306,0.248,0.104,0.16,0,0.328,0.16,0.336,0,0.306,0.104,0.304,0.24,0.35,0.338,0.104,0.242,0.234,0.0,0.22,0.328,0.34,0.314,0.224,0.264,0.0,0.26,0.36,0.29,0.124,0.292,0.0,0.172,0.0,0.358,0,0.318,0.306,0.11,0.0,0.268,0.326,0.344,0.276,0.0,0.348,0.274,0.12,0.104,0.194,0.234,0.146,0.366,0.178,0.0,0.282,0.342,0.282,0.136,0,0.134,0.364,0.222,0.36,0.364,0.276,0.236,0.266,0.338,0.346,0.228,0.332,0.348,0.364,0.0
44742,0.342,0.178,0.26,0.33,0.276,0.344,0.292,0.326,0.336,0.226,0.118,0.28,0.316,0.0,0.172,0.096,0.284,0.266,0.258,0.326,0.266,0.33,0.306,0.086,0.088,0.17,0.094,0.286,0.31,0.0,0.104,0.19,0.0,0.098,0.274,0.182,0.0,0.108,0.292,0,0.112,0.0,0.156,0.12,0.356,0.0,0.156,0.122,0.228,0.104,0.0,0.38,0.126,0.226,0.098,0.24,0.342,0.156,0.108,0.262,0.192,0.326,0.296,0.172,0.124,0.108,0.0,0.334,0.098,0.322,0.0,0.31,0.112,0.192,0.114,0.3,0.254,0.104,0.172,0,0.316,0.148,0.298,0,0.276,0.076,0.316,0.246,0.326,0.302,0.104,0.228,0.174,0.0,0.206,0.282,0.316,0.29,0.182,0.266,0.344,0.306,0.344,0.258,0.104,0.256,0.0,0.156,0.0,0.356,0,0.318,0.276,0.066,0.0,0.274,0.348,0.33,0.256,0.0,0.308,0.3,0.156,0.104,0.228,0.184,0.122,0.322,0.174,0.0,0.286,0.322,0.292,0.13,0,0.108,0.332,0.252,0.34,0.332,0.284,0.214,0.258,0.328,0.324,0.234,0.33,0.328,0.358,0.0
44743,0.996,0.996,0.964,0.996,0.0,0.996,0.936,0.996,0.996,0.786,0.812,0.808,0.996,0.996,0.848,0.816,0.956,0.996,0.988,0.996,0.982,0.842,0.996,0.818,0.786,0.848,0.918,0.918,0.996,0.786,0.786,0.958,0.996,0.812,0.996,0.92,0.78,0.786,0.996,0,0.744,0.994,0.828,0.82,0.996,0.114,0.826,0.786,0.894,0.818,0.996,0.996,0.886,0.886,0.786,0.988,0.996,0.952,0.994,0.99,0.98,0.996,0.996,0.848,0.978,0.462,0.988,0.996,0.786,0.996,0.996,0.994,0.786,0.986,0.818,0.996,0.986,0.786,0.848,0,0.922,0.0,0.996,0,0.0,0.786,0.91,0.974,0.996,0.906,0.786,0.996,0.99,0.994,0.96,0.0,0.996,0.992,0.786,0.99,0.718,0.85,0.996,0.998,0.786,0.996,0.996,0.828,0.784,0.996,0,0.218,0.0,0.78,0.996,0.992,0.996,0.996,0.998,0.996,0.786,0.72,0.786,0.0,0.992,0.996,0.0,0.996,0.0,0.996,0.992,1.0,0.996,0.856,0,0.82,0.996,0.97,0.996,0.996,0.922,0.996,0.786,0.996,0.992,0.948,0.914,0.996,0.998,0.996
44744,0.996,0.996,0.982,0.996,0.0,0.996,0.95,0.996,0.996,0.792,0.808,0.808,0.996,0.996,0.872,0.812,0.95,0.994,0.992,0.994,0.988,0.96,0.996,0.802,0.786,0.872,0.91,0.908,0.996,0.786,0.786,0.786,0.996,0.776,0.996,0.878,0.758,0.786,0.996,0,0.586,0.994,0.82,0.822,0.996,0.782,0.83,0.786,0.906,0.822,0.996,0.788,0.884,0.938,0.786,0.99,0.996,0.928,0.986,0.986,0.96,0.994,0.994,0.872,0.97,0.552,0.992,0.996,0.786,0.996,0.996,0.16,0.786,0.992,0.786,0.996,0.988,0.786,0.872,0,0.922,0.0,0.994,0,0.0,0.786,0.916,0.988,0.994,0.908,0.786,0.996,0.992,0.994,0.978,0.0,0.996,0.992,0.786,0.988,0.994,0.884,0.996,0.996,0.786,0.996,0.996,0.82,0.786,0.994,0,0.996,0.0,0.814,0.996,0.992,0.996,0.996,0.988,0.996,0.786,0.73,0.786,0.0,0.998,0.994,0.0,0.996,0.0,0.294,0.994,0.998,0.99,0.864,0,0.822,0.998,0.982,0.996,0.996,0.914,0.994,0.786,0.996,0.994,0.956,0.954,0.996,1.0,0.996
44745,0.994,0.994,0.97,0.996,0.0,0.994,0.898,0.994,0.996,0.888,0.83,0.808,0.994,0.994,0.874,0.83,0.97,0.992,0.984,0.99,0.982,0.838,0.992,0.83,0.786,0.87,0.934,0.928,0.992,0.786,0.786,0.802,0.996,0.824,0.992,0.904,0.854,0.786,0.96,0,0.544,0.998,0.842,0.83,0.994,0.228,0.85,0.786,0.874,0.83,0.994,0.628,0.884,0.95,0.786,0.984,0.996,0.95,0.99,0.982,0.968,0.99,0.992,0.874,0.972,0.484,0.99,0.994,0.786,0.996,0.994,0.39,0.786,0.99,0.83,0.996,0.984,0.786,0.874,0,0.926,0.0,0.992,0,0.0,0.786,0.926,0.976,0.992,0.926,0.786,0.994,0.99,0.996,0.97,0.0,0.992,0.99,0.786,0.986,0.556,0.91,0.996,0.952,0.786,0.994,0.994,0.842,0.784,0.986,0,0.414,0.0,0.776,0.994,0.99,0.604,0.994,0.99,0.994,0.786,0.704,0.786,0.0,0.994,0.996,0.0,0.994,0.0,0.998,0.994,0.994,0.994,0.854,0,0.826,0.994,0.97,0.996,0.994,0.934,0.996,0.786,0.996,0.992,0.964,0.9,0.996,0.994,0.996
44746,0.996,0.996,0.972,0.992,0.0,0.996,0.946,0.996,0.996,0.794,0.822,0.806,0.996,0.996,0.876,0.824,0.96,0.996,0.982,0.992,0.982,0.8,0.992,0.814,0.786,0.876,0.914,0.924,0.994,0.786,0.786,0.786,0.996,0.81,0.992,0.972,0.796,0.786,0.996,0,0.55,0.996,0.846,0.826,0.996,0.678,0.83,0.786,0.882,0.822,0.996,0.996,0.878,0.936,0.786,0.984,0.996,0.936,0.988,0.98,0.978,0.99,0.992,0.876,0.968,0.404,0.982,0.996,0.786,0.996,0.996,0.174,0.786,0.99,0.822,0.996,0.982,0.786,0.876,0,0.906,0.0,0.996,0,0.0,0.786,0.918,0.974,0.992,0.886,0.786,0.996,0.99,0.996,0.976,0.0,0.996,0.978,0.786,0.986,0.996,0.882,0.996,0.996,0.786,0.992,0.996,0.846,0.786,0.992,0,0.426,0.0,0.756,0.996,0.984,0.996,0.996,0.996,0.996,0.786,0.7,0.786,0.0,0.996,0.996,0.0,0.996,0.0,0.84,0.984,0.996,0.996,0.85,0,0.824,0.996,0.972,0.996,0.996,0.924,0.996,0.786,0.996,0.992,0.98,0.94,0.996,0.996,0.996
44747,0.996,0.996,0.974,0.996,0.0,0.996,0.966,0.996,0.996,0.786,0.824,0.814,0.996,0.996,0.868,0.838,0.972,0.988,0.984,0.996,0.98,0.862,0.996,0.822,0.786,0.862,0.914,0.928,0.996,0.786,0.786,0.786,0.996,0.818,0.996,0.888,0.966,0.786,0.996,0,0.462,0.996,0.83,0.84,0.996,0.442,0.83,0.786,0.912,0.824,0.996,0.994,0.858,0.914,0.786,0.976,0.996,0.942,0.996,0.986,0.974,0.996,0.996,0.868,0.956,0.372,0.984,0.996,0.786,0.996,0.996,0.092,0.786,0.992,0.828,0.696,0.978,0.786,0.868,0,0.92,0.0,0.996,0,0.0,0.786,0.916,0.978,0.996,0.912,0.786,0.996,0.994,0.994,0.974,0.0,0.996,0.992,0.786,0.99,0.868,0.912,0.996,0.996,0.786,0.994,0.996,0.83,0.786,0.996,0,0.602,0.0,0.79,0.996,0.988,0.488,0.996,0.996,0.996,0.786,0.772,0.786,0.0,0.996,0.996,0.0,0.996,0.0,0.992,0.992,0.996,0.982,0.866,0,0.828,0.996,0.972,0.996,0.996,0.93,0.996,0.786,0.996,0.996,0.94,0.93,0.996,0.996,0.996
44748,0.516,0.552,0.592,0.56,0.51,0.592,0.578,0.548,0.584,0.594,0.6,0.6,0.548,0.0,0.6,0.518,0.59,0.496,0.51,0.598,0.584,0.0,0.598,0.6,0.562,0.6,0.546,0.576,0.59,0.0,0.6,0.544,0.0,0.574,0.532,0.598,0.596,0.6,0.594,0,0.526,0.0,0.598,0.492,0.574,0.538,0.598,0.6,0.526,0.0,0.0,0.516,0.492,0.54,0.59,0.548,0.548,0.584,0.598,0.59,0.504,0.598,0.598,0.6,0.57,0.524,0.522,0.59,0.6,0.594,0.6,0.546,0.574,0.558,0.576,0.532,0.526,0.6,0.6,0,0.598,0.0,0.544,0,0.0,0.556,0.58,0.522,0.592,0.6,0.6,0.616,0.586,0.55,0.548,0.0,0.516,0.538,0.6,0.586,0.562,0.532,0.558,0.504,0.586,0.0,0.592,0.598,0.0,0.542,0,0.498,0.0,0.526,0.0,0.532,0.574,0.6,0.0,0.648,0.602,0.52,0.592,0.0,0.544,0.562,0.0,0.546,0.0,0.546,0.524,0.0,0.514,0.522,0,0.552,0.514,0.594,0.548,0.548,0.586,0.616,0.6,0.588,0.588,0.59,0.546,0.564,0.0,0.0

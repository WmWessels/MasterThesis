0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44539,0.658,0.602,0.576,0.616,0.0,0.646,0.584,0.648,0.628,0.592,0.582,0.62,0.646,0.0,0.594,0.546,0.6,0.538,0.602,0.612,0.594,0.608,0.618,0.578,0.504,0.594,0.526,0.582,0.632,0.0,0.5,0.582,0.0,0.584,0.618,0.598,0.594,0.588,0.61,0,0.59,0.628,0.594,0.556,0.638,0.58,0.594,0.562,0.598,0.588,0.0,0.616,0.526,0.57,0.484,0.528,0.646,0.584,0.49,0.542,0.578,0.61,0.608,0.594,0.562,0.576,0.66,0.646,0.5,0.618,0.646,0.586,0.524,0.576,0.576,0.634,0.58,0.544,0.594,0,0.652,0.0,0.642,0.0,0.0,0.53,0.612,0.584,0.626,0.648,0.5,0.622,0.582,0.62,0.614,0.582,0.628,0.612,0.5,0.548,0.592,0.544,0.622,0.622,0.52,0.628,0.642,0.594,0.0,0.626,0,0.576,0.0,0.51,0.0,0.646,0.594,0.656,0.552,0.614,0.602,0.608,0.576,0.0,0.586,0.572,0.0,0.636,0.0,0.614,0.634,0.632,0.582,0.536,0,0.576,0.618,0.588,0.624,0.648,0.584,0.612,0.502,0.624,0.616,0.614,0.548,0.636,0.59,0.0
44540,0.624,0.578,0.608,0.644,0.0,0.61,0.612,0.642,0.636,0.654,0.634,0.644,0.63,0.0,0.618,0.61,0.644,0.612,0.612,0.652,0.62,0.652,0.636,0.6,0.524,0.618,0.53,0.612,0.65,0.0,0.5,0.636,0.0,0.594,0.656,0.634,0.636,0.622,0.648,0,0.638,0.642,0.636,0.614,0.634,0.576,0.636,0.618,0.578,0.598,0.0,0.616,0.58,0.54,0.456,0.588,0.648,0.57,0.474,0.58,0.556,0.64,0.64,0.618,0.572,0.64,0.646,0.63,0.5,0.656,0.62,0.606,0.538,0.604,0.636,0.614,0.582,0.542,0.618,0,0.626,0.0,0.638,0.0,0.0,0.5,0.64,0.606,0.638,0.626,0.5,0.57,0.568,0.636,0.616,0.59,0.634,0.646,0.5,0.564,0.602,0.592,0.636,0.666,0.466,0.61,0.622,0.636,0.0,0.628,0,0.606,0.0,0.53,0.0,0.634,0.618,0.646,0.614,0.636,0.636,0.674,0.606,0.0,0.536,0.582,0.0,0.624,0.0,0.642,0.664,0.648,0.594,0.574,0,0.64,0.65,0.61,0.624,0.64,0.6,0.578,0.498,0.66,0.644,0.63,0.568,0.66,0.64,0.0
44541,0.648,0.546,0.6,0.616,0.0,0.636,0.57,0.638,0.672,0.584,0.596,0.644,0.646,0.0,0.64,0.56,0.622,0.546,0.608,0.64,0.602,0.612,0.644,0.552,0.492,0.64,0.48,0.568,0.648,0.0,0.5,0.598,0.0,0.572,0.592,0.576,0.644,0.588,0.648,0,0.616,0.614,0.596,0.582,0.628,0.61,0.61,0.59,0.572,0.564,0.0,0.612,0.568,0.544,0.51,0.554,0.634,0.552,0.478,0.536,0.554,0.644,0.64,0.64,0.544,0.626,0.626,0.614,0.5,0.642,0.63,0.634,0.494,0.622,0.608,0.626,0.574,0.538,0.64,0,0.638,0.0,0.656,0.0,0.0,0.496,0.622,0.598,0.642,0.638,0.5,0.584,0.574,0.648,0.618,0.576,0.656,0.568,0.5,0.558,0.61,0.544,0.654,0.636,0.512,0.598,0.632,0.596,0.0,0.636,0,0.632,0.0,0.486,0.0,0.636,0.654,0.64,0.59,0.59,0.62,0.634,0.594,0.0,0.534,0.576,0.0,0.646,0.0,0.638,0.628,0.614,0.554,0.588,0,0.626,0.632,0.598,0.634,0.634,0.586,0.604,0.51,0.65,0.63,0.608,0.556,0.644,0.622,0.0
44542,0.636,0.61,0.582,0.656,0.0,0.61,0.572,0.618,0.614,0.65,0.638,0.626,0.638,0.0,0.618,0.564,0.616,0.58,0.606,0.66,0.602,0.618,0.654,0.57,0.542,0.618,0.508,0.57,0.65,0.0,0.5,0.61,0.0,0.564,0.636,0.588,0.602,0.59,0.648,0,0.626,0.614,0.588,0.6,0.616,0.56,0.588,0.618,0.554,0.606,0.0,0.586,0.568,0.546,0.502,0.56,0.64,0.58,0.53,0.56,0.548,0.652,0.646,0.618,0.52,0.628,0.606,0.616,0.5,0.652,0.638,0.62,0.516,0.636,0.636,0.588,0.588,0.54,0.618,0,0.618,0.0,0.638,0.0,0.0,0.498,0.614,0.594,0.64,0.626,0.5,0.574,0.604,0.612,0.582,0.51,0.648,0.636,0.5,0.574,0.552,0.556,0.65,0.654,0.548,0.576,0.62,0.588,0.494,0.634,0,0.574,0.0,0.532,0.0,0.61,0.616,0.636,0.586,0.606,0.65,0.64,0.586,0.0,0.576,0.594,0.0,0.638,0.0,0.594,0.602,0.626,0.608,0.574,0,0.628,0.63,0.572,0.642,0.618,0.58,0.614,0.5,0.652,0.654,0.592,0.566,0.636,0.648,0.0
44543,0.86,0.806,0.778,0.858,0.792,0.87,0.814,0.89,0.888,0.808,0.83,0.794,0.868,0.0,0.71,0.802,0.804,0.79,0.766,0.842,0.782,0.858,0.842,0.806,0.51,0.71,0.496,0.82,0.846,0.0,0.508,0.802,0.0,0.806,0.814,0.698,0.878,0.772,0.852,0,0.772,0.856,0.6,0.86,0.858,0.852,0.6,0.824,0.772,0.834,0.0,0.852,0.556,0.782,0.498,0.788,0.86,0.574,0.466,0.776,0.726,0.84,0.85,0.71,0.744,0.772,0.79,0.868,0.492,0.846,0.836,0.838,0.484,0.81,0.832,0.856,0.792,0.508,0.71,0,0.832,0.568,0.87,0.0,0.792,0.498,0.822,0.786,0.852,0.804,0.508,0.798,0.814,0.858,0.796,0.806,0.866,0.808,0.626,0.77,0.878,0.742,0.866,0.832,0.51,0.832,0.862,0.6,0.474,0.87,0,0.848,0.792,0.508,0.0,0.788,0.874,0.852,0.848,0.852,0.838,0.784,0.55,0.508,0.8,0.82,0.544,0.872,0.632,0.87,0.788,0.864,0.762,0.612,0,0.774,0.854,0.78,0.864,0.872,0.818,0.816,0.768,0.854,0.852,0.762,0.718,0.86,0.88,0.0
44544,0.872,0.812,0.818,0.856,0.816,0.896,0.812,0.902,0.886,0.824,0.848,0.822,0.876,0.0,0.736,0.846,0.806,0.774,0.82,0.85,0.81,0.87,0.836,0.83,0.516,0.736,0.528,0.806,0.85,0.0,0.508,0.852,0.0,0.85,0.816,0.712,0.904,0.784,0.856,0,0.846,0.894,0.638,0.904,0.864,0.864,0.638,0.854,0.738,0.882,0.0,0.878,0.514,0.752,0.486,0.798,0.876,0.732,0.498,0.804,0.656,0.85,0.854,0.736,0.69,0.844,0.796,0.868,0.492,0.846,0.846,0.824,0.482,0.808,0.882,0.874,0.796,0.508,0.736,0,0.82,0.608,0.872,0.0,0.816,0.526,0.82,0.814,0.85,0.79,0.508,0.846,0.83,0.868,0.828,0.824,0.88,0.832,0.582,0.8,0.888,0.75,0.876,0.86,0.498,0.816,0.866,0.638,0.0,0.89,0,0.838,0.816,0.538,0.0,0.816,0.872,0.87,0.868,0.89,0.852,0.84,0.554,0.508,0.802,0.836,0.622,0.896,0.542,0.872,0.788,0.888,0.802,0.482,0,0.852,0.884,0.812,0.882,0.894,0.81,0.848,0.77,0.862,0.846,0.788,0.602,0.864,0.904,0.0
44545,0.836,0.77,0.786,0.826,0.748,0.844,0.754,0.836,0.84,0.78,0.762,0.694,0.818,0.0,0.68,0.82,0.746,0.798,0.776,0.818,0.778,0.832,0.816,0.794,0.486,0.678,0.486,0.754,0.828,0.0,0.508,0.766,0.0,0.798,0.804,0.702,0.874,0.704,0.782,0,0.746,0.854,0.622,0.84,0.836,0.838,0.652,0.764,0.79,0.802,0.0,0.814,0.594,0.764,0.48,0.814,0.836,0.6,0.504,0.794,0.706,0.82,0.826,0.678,0.63,0.75,0.8,0.832,0.492,0.832,0.758,0.782,0.484,0.71,0.798,0.814,0.812,0.508,0.678,0,0.728,0.71,0.85,0.0,0.748,0.498,0.748,0.79,0.83,0.726,0.508,0.79,0.782,0.802,0.788,0.758,0.856,0.806,0.582,0.788,0.86,0.742,0.854,0.75,0.49,0.73,0.85,0.622,0.0,0.848,0,0.818,0.748,0.506,0.0,0.794,0.818,0.806,0.83,0.838,0.794,0.754,0.614,0.508,0.788,0.794,0.632,0.824,0.616,0.846,0.798,0.848,0.788,0.608,0,0.75,0.842,0.786,0.87,0.804,0.752,0.824,0.708,0.846,0.818,0.782,0.588,0.846,0.84,0.0
44546,0.872,0.802,0.796,0.848,0.724,0.874,0.77,0.882,0.87,0.824,0.814,0.738,0.864,0.0,0.65,0.812,0.738,0.798,0.786,0.844,0.788,0.85,0.84,0.812,0.488,0.65,0.516,0.77,0.852,0.0,0.508,0.776,0.0,0.824,0.792,0.614,0.884,0.764,0.838,0,0.748,0.876,0.59,0.872,0.848,0.832,0.59,0.81,0.718,0.834,0.0,0.854,0.556,0.756,0.506,0.796,0.874,0.614,0.506,0.786,0.684,0.832,0.846,0.65,0.65,0.75,0.774,0.858,0.508,0.84,0.82,0.804,0.512,0.748,0.848,0.846,0.814,0.508,0.65,0,0.802,0.65,0.872,0.0,0.724,0.498,0.792,0.802,0.846,0.794,0.508,0.828,0.81,0.83,0.776,0.77,0.866,0.804,0.556,0.778,0.862,0.706,0.866,0.842,0.482,0.794,0.86,0.59,0.528,0.886,0,0.838,0.724,0.502,0.0,0.782,0.844,0.84,0.85,0.862,0.82,0.742,0.596,0.508,0.784,0.79,0.62,0.864,0.56,0.87,0.76,0.862,0.782,0.596,0,0.754,0.872,0.794,0.882,0.862,0.772,0.818,0.74,0.85,0.85,0.756,0.67,0.862,0.866,0.0
44547,0.854,0.81,0.774,0.866,0.776,0.882,0.818,0.872,0.852,0.838,0.812,0.79,0.866,0.0,0.72,0.776,0.764,0.752,0.738,0.85,0.738,0.872,0.848,0.766,0.498,0.72,0.504,0.814,0.848,0.0,0.508,0.82,0.0,0.772,0.776,0.726,0.848,0.766,0.858,0,0.77,0.882,0.712,0.866,0.858,0.834,0.712,0.822,0.746,0.834,0.0,0.848,0.616,0.702,0.514,0.766,0.866,0.604,0.508,0.77,0.706,0.854,0.848,0.72,0.708,0.77,0.794,0.86,0.492,0.852,0.818,0.802,0.504,0.81,0.842,0.854,0.756,0.508,0.72,0,0.808,0.63,0.878,0.0,0.776,0.508,0.818,0.76,0.854,0.812,0.508,0.824,0.826,0.828,0.806,0.79,0.87,0.79,0.654,0.732,0.842,0.748,0.866,0.846,0.492,0.824,0.864,0.712,0.492,0.88,0,0.828,0.776,0.502,0.0,0.79,0.848,0.846,0.842,0.852,0.85,0.768,0.614,0.508,0.816,0.812,0.628,0.862,0.506,0.862,0.792,0.864,0.744,0.582,0,0.77,0.87,0.768,0.87,0.86,0.816,0.83,0.766,0.862,0.86,0.77,0.748,0.86,0.866,0.0
44548,0.938,0.922,0.938,0.938,0.0,0.938,0.94,0.94,0.938,0.938,0.938,0.938,0.938,0.0,0.938,0.936,0.928,0.94,0.938,0.938,0.936,0.938,0.938,0.938,0.938,0.938,0.938,0.946,0.936,0.0,0.938,0.938,0.0,0.938,0.938,0.938,0.942,0.938,0.938,0,0.914,0.936,0.938,0.928,0.932,0.356,0.938,0.938,0.938,0.938,0.0,0.944,0.918,0.924,0.938,0.94,0.944,0.938,0.938,0.936,0.93,0.938,0.938,0.938,0.936,0.704,0.938,0.932,0.938,0.938,0.938,0.932,0.938,0.938,0.938,0.932,0.938,0.938,0.938,0,0.938,0.0,0.936,0.924,0.0,0.938,0.938,0.938,0.938,0.938,0.938,0.924,0.934,0.942,0.938,0.0,0.938,0.938,0.938,0.936,0.938,0.748,0.94,0.938,0.938,0.938,0.938,0.938,0.938,0.94,0,0.936,0.0,0.938,0.0,0.938,0.934,0.938,0.938,0.93,0.938,0.62,0.938,0.0,0.934,0.908,0.0,0.938,0.0,0.936,0.94,0.94,0.94,0.938,0,0.876,0.946,0.938,0.946,0.938,0.936,0.93,0.938,0.936,0.938,0.938,0.672,0.938,0.94,0.0
44549,0.932,0.916,0.938,0.938,0.0,0.934,0.928,0.934,0.926,0.938,0.938,0.938,0.938,0.0,0.938,0.932,0.93,0.93,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.932,0.938,0.0,0.938,0.938,0.0,0.938,0.938,0.938,0.354,0.938,0.938,0,0.93,0.93,0.938,0.924,0.934,0.616,0.938,0.938,0.938,0.938,0.0,0.934,0.922,0.93,0.938,0.938,0.938,0.938,0.938,0.936,0.902,0.938,0.938,0.938,0.94,0.718,0.936,0.938,0.938,0.936,0.938,0.942,0.938,0.914,0.938,0.934,0.938,0.938,0.938,0,0.938,0.0,0.936,0.0,0.0,0.938,0.936,0.938,0.938,0.938,0.938,0.92,0.93,0.922,0.938,0.0,0.938,0.938,0.938,0.936,0.932,0.866,0.936,0.936,0.938,0.938,0.932,0.938,0.938,0.938,0,0.93,0.0,0.936,0.0,0.938,0.934,0.936,0.938,0.932,0.938,0.594,0.938,0.0,0.928,0.91,0.0,0.938,0.0,0.932,0.938,0.936,0.934,0.938,0,0.9,0.938,0.938,0.938,0.938,0.932,0.934,0.938,0.938,0.938,0.938,0.676,0.936,0.934,0.0
44550,0.938,0.926,0.938,0.94,0.0,0.94,0.94,0.942,0.94,0.938,0.938,0.938,0.94,0.0,0.938,0.938,0.936,0.944,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.944,0.938,0.0,0.938,0.938,0.0,0.938,0.938,0.938,0.942,0.938,0.938,0,0.932,0.94,0.938,0.938,0.94,0.436,0.938,0.938,0.938,0.938,0.0,0.944,0.92,0.936,0.938,0.938,0.944,0.938,0.938,0.938,0.924,0.938,0.938,0.938,0.922,0.732,0.938,0.94,0.938,0.938,0.938,0.94,0.938,0.92,0.938,0.938,0.938,0.938,0.938,0,0.938,0.0,0.94,0.0,0.0,0.938,0.94,0.938,0.938,0.938,0.938,0.93,0.938,0.946,0.938,0.0,0.94,0.938,0.938,0.938,0.936,0.754,0.94,0.94,0.938,0.938,0.944,0.938,0.936,0.94,0,0.936,0.0,0.938,0.0,0.938,0.942,0.938,0.938,0.934,0.938,0.64,0.938,0.0,0.92,0.916,0.0,0.94,0.0,0.936,0.938,0.946,0.936,0.938,0,0.91,0.944,0.938,0.942,0.94,0.95,0.932,0.938,0.938,0.938,0.938,0.68,0.94,0.944,0.94
44551,0.936,0.934,0.938,0.938,0.0,0.932,0.938,0.938,0.942,0.938,0.938,0.938,0.938,0.0,0.938,0.936,0.94,0.936,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.938,0.94,0.938,0.0,0.938,0.938,0.0,0.938,0.938,0.938,0.944,0.938,0.938,0,0.92,0.938,0.938,0.93,0.936,0.892,0.938,0.938,0.936,0.938,0.0,0.946,0.932,0.928,0.938,0.938,0.936,0.938,0.938,0.938,0.928,0.938,0.938,0.938,0.924,0.774,0.938,0.938,0.938,0.938,0.938,0.94,0.938,0.926,0.938,0.938,0.938,0.938,0.938,0,0.938,0.0,0.936,0.0,0.0,0.938,0.94,0.938,0.938,0.938,0.938,0.932,0.926,0.94,0.938,0.0,0.936,0.938,0.938,0.936,0.946,0.782,0.936,0.94,0.938,0.938,0.938,0.938,0.936,0.936,0,0.934,0.0,0.936,0.0,0.938,0.938,0.938,0.938,0.936,0.938,0.688,0.938,0.0,0.916,0.914,0.0,0.94,0.0,0.938,0.94,0.932,0.932,0.938,0,0.9,0.936,0.938,0.934,0.938,0.94,0.928,0.938,0.936,0.938,0.938,0.706,0.936,0.928,0.0
44552,0.942,0.926,0.938,0.938,0.0,0.934,0.914,0.942,0.944,0.938,0.938,0.938,0.94,0.0,0.938,0.928,0.918,0.942,0.938,0.938,0.938,0.94,0.938,0.938,0.938,0.938,0.938,0.928,0.938,0.0,0.938,0.938,0.0,0.938,0.938,0.938,0.93,0.938,0.938,0,0.93,0.932,0.938,0.926,0.942,0.346,0.938,0.938,0.938,0.938,0.0,0.926,0.916,0.924,0.938,0.938,0.938,0.938,0.938,0.938,0.928,0.938,0.938,0.938,0.916,0.7,0.938,0.946,0.938,0.938,0.938,0.93,0.938,0.938,0.938,0.934,0.938,0.938,0.938,0,0.938,0.0,0.938,0.0,0.0,0.938,0.94,0.938,0.938,0.938,0.938,0.934,0.936,0.934,0.938,0.0,0.94,0.938,0.938,0.936,0.934,0.752,0.942,0.934,0.938,0.938,0.94,0.938,0.936,0.948,0,0.934,0.0,0.938,0.0,0.938,0.93,0.938,0.938,0.928,0.938,0.648,0.938,0.0,0.914,0.916,0.0,0.938,0.0,0.938,0.94,0.936,0.94,0.938,0,0.884,0.944,0.938,0.944,0.944,0.926,0.926,0.938,0.942,0.938,0.938,0.71,0.944,0.932,0.0
44553,0.6698113207547169,0.6698113207547169,0.5566037735849056,0.7358490566037735,0.41037735849056606,0.7216981132075472,0.7924528301886793,0.7405660377358491,0.7547169811320755,0.75,0.25471698113207547,0.5330188679245284,0.6886792452830188,0.6509433962264151,0.3867924528301887,0.2688679245283019,0.8443396226415094,0.6886792452830188,0.6415094339622641,0.6792452830188679,0.6698113207547169,0.6933962264150944,0.6886792452830188,0.27358490566037735,0.24528301886792453,0.3867924528301887,0.6698113207547169,0.7075471698113207,0.6839622641509434,0.7452830188679245,0.330188679245283,0.6084905660377359,0.7311320754716981,0.27358490566037735,0.8113207547169812,0.6037735849056604,0.7830188679245284,0.25471698113207547,0.6273584905660378,0,0.25943396226415094,0.7405660377358491,0.3867924528301887,0.25943396226415094,0.6745283018867925,0.4528301886792453,0.37735849056603776,0.25,0.6981132075471698,0.0,0.7216981132075472,0.7641509433962265,0.5613207547169812,0.5801886792452831,0.28773584905660377,0.6698113207547169,0.75,0.7169811320754716,0.6084905660377359,0.6556603773584906,0.7358490566037735,0.6886792452830188,0.6698113207547169,0.3867924528301887,0.5377358490566038,0.25943396226415094,0.7452830188679245,0.660377358490566,0.25,0.6839622641509434,0.6745283018867925,0.75,0.27358490566037735,0.6462264150943396,0.25943396226415094,0.7452830188679245,0.6415094339622641,0.25471698113207547,0.3867924528301887,0,0.6132075471698113,0.4056603773584906,0.6698113207547169,0.2830188679245283,0.41037735849056606,0.2358490566037736,0.6556603773584906,0.5943396226415094,0.7028301886792453,0.25,0.25943396226415094,0.6320754716981132,0.7122641509433962,0.7641509433962265,0.8018867924528302,0.3867924528301887,0.75,0.75,0.4716981132075472,0.660377358490566,0.7735849056603774,0.7169811320754716,0.7594339622641509,0.5990566037735849,0.2688679245283019,0.5849056603773585,0.7122641509433962,0.3867924528301887,0.3113207547169811,0.7405660377358491,0,0.8018867924528302,0.41037735849056606,0.21226415094339623,0.7264150943396226,0.7547169811320755,0.7688679245283019,0.6792452830188679,0.6415094339622641,0.6792452830188679,0.6273584905660378,0.4386792452830189,0.5377358490566038,0.25943396226415094,0.7075471698113207,0.6886792452830188,0.4056603773584906,0.6839622641509434,0.2169811320754717,0.7735849056603774,0.7264150943396226,0.6933962264150944,0.7594339622641509,0.5424528301886793,0,0.25943396226415094,0.75,0.5801886792452831,0.7641509433962265,0.7075471698113207,0.7028301886792453,0.6273584905660378,0.7028301886792453,0.6981132075471698,0.7028301886792453,0.7311320754716981,0.41509433962264153,0.7358490566037735,0.7311320754716981,0.7216981132075472
44554,0.6698113207547169,0.6698113207547169,0.5566037735849056,0.7122641509433962,0.41037735849056606,0.7075471698113207,0.7924528301886793,0.7358490566037735,0.7641509433962265,0.7641509433962265,0.25471698113207547,0.5613207547169812,0.7122641509433962,0.6509433962264151,0.3867924528301887,0.2688679245283019,0.8443396226415094,0.6886792452830188,0.6415094339622641,0.6745283018867925,0.6698113207547169,0.6745283018867925,0.6839622641509434,0.27358490566037735,0.23113207547169812,0.3867924528301887,0.6933962264150944,0.7075471698113207,0.6839622641509434,0.75,0.25943396226415094,0.5471698113207547,0.7358490566037735,0.27358490566037735,0.7971698113207547,0.6037735849056604,0.7594339622641509,0.25471698113207547,0.6320754716981132,0,0.25943396226415094,0.7547169811320755,0.3867924528301887,0.2688679245283019,0.6792452830188679,0.7924528301886793,0.37735849056603776,0.25,0.6839622641509434,0.0,0.6981132075471698,0.7594339622641509,0.5613207547169812,0.5801886792452831,0.24528301886792453,0.6698113207547169,0.7688679245283019,0.7169811320754716,0.6367924528301887,0.6556603773584906,0.7358490566037735,0.6933962264150944,0.6886792452830188,0.3867924528301887,0.6839622641509434,0.25943396226415094,0.7452830188679245,0.660377358490566,0.25,0.6886792452830188,0.6933962264150944,0.7405660377358491,0.23113207547169812,0.6462264150943396,0.25943396226415094,0.7452830188679245,0.6415094339622641,0.25471698113207547,0.3867924528301887,0,0.6179245283018868,0.37735849056603776,0.7028301886792453,0.24528301886792453,0.41037735849056606,0.25,0.6556603773584906,0.5943396226415094,0.6981132075471698,0.25,0.25943396226415094,0.6367924528301887,0.7122641509433962,0.7641509433962265,0.8254716981132075,0.3867924528301887,0.7405660377358491,0.7452830188679245,0.5235849056603774,0.660377358490566,0.7830188679245284,0.6650943396226415,0.75,0.6037735849056604,0.23113207547169812,0.5849056603773585,0.6981132075471698,0.3867924528301887,0.22641509433962265,0.7594339622641509,0,0.7641509433962265,0.41037735849056606,0.23113207547169812,0.7452830188679245,0.7688679245283019,0.7924528301886793,0.6792452830188679,0.6415094339622641,0.6745283018867925,0.6226415094339622,0.4386792452830189,0.5235849056603774,0.25943396226415094,0.7028301886792453,0.6933962264150944,0.3867924528301887,0.7028301886792453,0.2169811320754717,0.7971698113207547,0.7452830188679245,0.7028301886792453,0.7594339622641509,0.5518867924528302,0,0.25943396226415094,0.7405660377358491,0.5801886792452831,0.7594339622641509,0.7311320754716981,0.7028301886792453,0.6273584905660378,0.7028301886792453,0.7028301886792453,0.7075471698113207,0.75,0.41509433962264153,0.7405660377358491,0.7405660377358491,0.7028301886792453
44555,0.6792452830188679,0.6698113207547169,0.5566037735849056,0.6981132075471698,0.41037735849056606,0.7122641509433962,0.7924528301886793,0.7452830188679245,0.7830188679245284,0.7641509433962265,0.25471698113207547,0.5424528301886793,0.7122641509433962,0.6556603773584906,0.3867924528301887,0.2688679245283019,0.8443396226415094,0.6886792452830188,0.6415094339622641,0.6792452830188679,0.6698113207547169,0.6839622641509434,0.6981132075471698,0.27358490566037735,0.23113207547169812,0.3867924528301887,0.7311320754716981,0.7075471698113207,0.7028301886792453,0.7594339622641509,0.4056603773584906,0.49528301886792453,0.7358490566037735,0.27358490566037735,0.7783018867924528,0.6037735849056604,0.7877358490566038,0.25943396226415094,0.6273584905660378,0,0.25943396226415094,0.7264150943396226,0.3867924528301887,0.2688679245283019,0.660377358490566,0.7547169811320755,0.37735849056603776,0.25943396226415094,0.6933962264150944,0.0,0.7075471698113207,0.8066037735849056,0.5613207547169812,0.5801886792452831,0.2358490566037736,0.6698113207547169,0.75,0.7169811320754716,0.6132075471698113,0.6556603773584906,0.7358490566037735,0.6650943396226415,0.6839622641509434,0.3867924528301887,0.6886792452830188,0.25943396226415094,0.7688679245283019,0.6462264150943396,0.25,0.6792452830188679,0.6886792452830188,0.7075471698113207,0.2830188679245283,0.6462264150943396,0.25943396226415094,0.7358490566037735,0.6415094339622641,0.25471698113207547,0.3867924528301887,0,0.6179245283018868,0.37735849056603776,0.6886792452830188,0.2641509433962264,0.41037735849056606,0.27358490566037735,0.6556603773584906,0.5943396226415094,0.7028301886792453,0.25471698113207547,0.25943396226415094,0.6367924528301887,0.7122641509433962,0.7641509433962265,0.7877358490566038,0.3867924528301887,0.75,0.7594339622641509,0.47641509433962265,0.660377358490566,0.7594339622641509,0.7688679245283019,0.7452830188679245,0.6037735849056604,0.24056603773584906,0.5849056603773585,0.6933962264150944,0.3867924528301887,0.25471698113207547,0.7452830188679245,0,0.7688679245283019,0.41037735849056606,0.3113207547169811,0.7028301886792453,0.7452830188679245,0.7783018867924528,0.6792452830188679,0.6415094339622641,0.6698113207547169,0.6132075471698113,0.4386792452830189,0.5471698113207547,0.25943396226415094,0.6981132075471698,0.6886792452830188,0.30660377358490565,0.6981132075471698,0.2169811320754717,0.75,0.7405660377358491,0.6886792452830188,0.7594339622641509,0.5424528301886793,0,0.25943396226415094,0.7547169811320755,0.5801886792452831,0.75,0.7264150943396226,0.7028301886792453,0.6273584905660378,0.7641509433962265,0.7028301886792453,0.6933962264150944,0.7452830188679245,0.41509433962264153,0.7358490566037735,0.7688679245283019,0.7075471698113207
44556,0.6933962264150944,0.6698113207547169,0.5566037735849056,0.7405660377358491,0.41037735849056606,0.7122641509433962,0.7924528301886793,0.7452830188679245,0.7783018867924528,0.7641509433962265,0.25471698113207547,0.5566037735849056,0.7028301886792453,0.6509433962264151,0.3867924528301887,0.2688679245283019,0.8443396226415094,0.6886792452830188,0.6415094339622641,0.6886792452830188,0.6698113207547169,0.6886792452830188,0.6839622641509434,0.27358490566037735,0.25943396226415094,0.3867924528301887,0.7122641509433962,0.7075471698113207,0.6981132075471698,0.7594339622641509,0.28773584905660377,0.5990566037735849,0.7358490566037735,0.27358490566037735,0.7830188679245284,0.6037735849056604,0.7735849056603774,0.25943396226415094,0.6132075471698113,0,0.25943396226415094,0.7405660377358491,0.3867924528301887,0.25943396226415094,0.6839622641509434,0.44339622641509435,0.37735849056603776,0.25,0.6981132075471698,0.0,0.7169811320754716,0.7594339622641509,0.5613207547169812,0.5801886792452831,0.24528301886792453,0.6698113207547169,0.7641509433962265,0.7169811320754716,0.6179245283018868,0.6556603773584906,0.7358490566037735,0.6933962264150944,0.6886792452830188,0.3867924528301887,0.5471698113207547,0.25943396226415094,0.7547169811320755,0.6650943396226415,0.25,0.6839622641509434,0.7075471698113207,0.7264150943396226,0.25943396226415094,0.6462264150943396,0.25943396226415094,0.7971698113207547,0.6415094339622641,0.25471698113207547,0.3867924528301887,0,0.6415094339622641,0.36792452830188677,0.6933962264150944,0.25471698113207547,0.41037735849056606,0.2358490566037736,0.6556603773584906,0.5943396226415094,0.6792452830188679,0.25471698113207547,0.25943396226415094,0.6415094339622641,0.7122641509433962,0.7688679245283019,0.8113207547169812,0.3867924528301887,0.7358490566037735,0.7641509433962265,0.4716981132075472,0.660377358490566,0.7641509433962265,0.7028301886792453,0.7547169811320755,0.6037735849056604,0.24056603773584906,0.5849056603773585,0.7028301886792453,0.3867924528301887,0.2688679245283019,0.7547169811320755,0,0.7641509433962265,0.41037735849056606,0.22641509433962265,0.7122641509433962,0.7641509433962265,0.7452830188679245,0.6745283018867925,0.6415094339622641,0.6839622641509434,0.6226415094339622,0.4386792452830189,0.5283018867924528,0.25943396226415094,0.6933962264150944,0.6933962264150944,0.4056603773584906,0.7264150943396226,0.2169811320754717,0.8018867924528302,0.7264150943396226,0.7028301886792453,0.7594339622641509,0.5518867924528302,0,0.25943396226415094,0.7688679245283019,0.5801886792452831,0.7641509433962265,0.7216981132075472,0.7028301886792453,0.6273584905660378,0.7169811320754716,0.7075471698113207,0.6839622641509434,0.6981132075471698,0.41509433962264153,0.7452830188679245,0.7452830188679245,0.6933962264150944
44557,0.6839622641509434,0.6698113207547169,0.5566037735849056,0.6886792452830188,0.41037735849056606,0.7075471698113207,0.7924528301886793,0.75,0.7971698113207547,0.7358490566037735,0.27358490566037735,0.5613207547169812,0.6886792452830188,0.6509433962264151,0.3867924528301887,0.2688679245283019,0.8443396226415094,0.6886792452830188,0.6415094339622641,0.6792452830188679,0.6698113207547169,0.6981132075471698,0.6981132075471698,0.27358490566037735,0.25471698113207547,0.3867924528301887,0.7028301886792453,0.7075471698113207,0.6933962264150944,0.7547169811320755,0.37735849056603776,0.5660377358490566,0.7216981132075472,0.27358490566037735,0.7735849056603774,0.6037735849056604,0.7830188679245284,0.25471698113207547,0.6226415094339622,0,0.25943396226415094,0.7264150943396226,0.3867924528301887,0.25943396226415094,0.6745283018867925,0.8113207547169812,0.37735849056603776,0.25,0.7075471698113207,0.0,0.7169811320754716,0.7594339622641509,0.5613207547169812,0.5801886792452831,0.25943396226415094,0.6698113207547169,0.7594339622641509,0.7169811320754716,0.6273584905660378,0.6556603773584906,0.7358490566037735,0.6886792452830188,0.6745283018867925,0.3867924528301887,0.6509433962264151,0.25943396226415094,0.7877358490566038,0.6698113207547169,0.25,0.6839622641509434,0.6839622641509434,0.7169811320754716,0.22169811320754718,0.6462264150943396,0.25943396226415094,0.7735849056603774,0.6415094339622641,0.25943396226415094,0.3867924528301887,0,0.6320754716981132,0.37264150943396224,0.6839622641509434,0.3113207547169811,0.41037735849056606,0.2830188679245283,0.6556603773584906,0.5943396226415094,0.7122641509433962,0.25943396226415094,0.25943396226415094,0.6415094339622641,0.7122641509433962,0.7452830188679245,0.7830188679245284,0.3867924528301887,0.75,0.7735849056603774,0.5377358490566038,0.660377358490566,0.7594339622641509,0.7547169811320755,0.7405660377358491,0.5990566037735849,0.2169811320754717,0.5849056603773585,0.7028301886792453,0.3867924528301887,0.2688679245283019,0.7405660377358491,0,0.7877358490566038,0.41037735849056606,0.25,0.7169811320754716,0.7783018867924528,0.7547169811320755,0.6933962264150944,0.6415094339622641,0.6792452830188679,0.6462264150943396,0.4386792452830189,0.5471698113207547,0.25943396226415094,0.7028301886792453,0.6886792452830188,0.41509433962264153,0.7028301886792453,0.2169811320754717,0.7924528301886793,0.7216981132075472,0.7075471698113207,0.7594339622641509,0.5471698113207547,0,0.25943396226415094,0.7641509433962265,0.5801886792452831,0.7547169811320755,0.7311320754716981,0.7028301886792453,0.6273584905660378,0.7358490566037735,0.6933962264150944,0.6886792452830188,0.7594339622641509,0.41509433962264153,0.7452830188679245,0.7452830188679245,0.6933962264150944
44558,0.66,0.57,0.606,0.6,0.602,0.612,0.55,0.588,0.582,0.486,0.502,0.582,0.602,0.0,0.594,0.502,0.554,0.58,0.59,0.606,0.558,0.646,0.606,0.498,0.478,0.594,0.514,0.544,0.638,0.0,0.502,0.538,0.0,0.502,0.578,0.596,0.6,0.502,0.596,0,0.502,0.626,0.582,0.498,0.638,0.568,0.582,0.502,0.522,0.0,0.0,0.55,0.526,0.498,0.456,0.572,0.594,0.51,0.512,0.502,0.566,0.598,0.608,0.594,0.528,0.502,0.574,0.606,0.502,0.622,0.634,0.588,0.506,0.602,0.502,0.55,0.6,0.502,0.594,0,0.558,0.568,0.61,0.0,0.602,0.482,0.552,0.6,0.594,0.584,0.502,0.61,0.562,0.622,0.488,0.606,0.632,0.6,0.528,0.536,0.594,0.528,0.64,0.622,0.474,0.544,0.64,0.582,0.0,0.604,0,0.608,0.602,0.464,0.0,0.584,0.568,0.604,0.62,0.628,0.566,0.554,0.542,0.502,0.55,0.57,0.53,0.61,0.492,0.568,0.604,0.608,0.486,0.49,0,0.502,0.594,0.632,0.646,0.592,0.536,0.594,0.592,0.648,0.602,0.508,0.548,0.572,0.59,0.0

0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44769,0.736,0.714,0.716,0.716,0.468,0.732,0.716,0.724,0.728,0.716,0.716,0.716,0.722,0.698,0.716,0.706,0.716,0.7,0.716,0.716,0.712,0.716,0.72,0.716,0.716,0.716,0.714,0.722,0.728,0.716,0.716,0.72,0.734,0.716,0.716,0.714,0.73,0.716,0.72,0,0.624,0.722,0.716,0.71,0.74,0.724,0.716,0.716,0.716,0.716,0.706,0.728,0.692,0.682,0.716,0.698,0.726,0.714,0.716,0.714,0.638,0.718,0.72,0.716,0.706,0.258,0.704,0.72,0.716,0.72,0.72,0.712,0.716,0.716,0.716,0.726,0.71,0.716,0.716,0,0.716,0.716,0.72,0.0,0.496,0.716,0.724,0.716,0.714,0.716,0.716,0.702,0.692,0.758,0.72,0.588,0.728,0.716,0.716,0.714,0.712,0.53,0.726,0.728,0.716,0.728,0.732,0.716,0.712,0.716,0,0.734,0.496,0.714,0.736,0.712,0.74,0.716,0.718,0.712,0.716,0.606,0.716,0.716,0.688,0.69,0.716,0.716,0.716,0.724,0.716,0.716,0.704,0.71,0,0.698,0.728,0.716,0.732,0.716,0.718,0.714,0.716,0.738,0.716,0.716,0.674,0.732,0.728,0.73
44770,0.718,0.714,0.716,0.714,0.25,0.73,0.708,0.714,0.712,0.716,0.716,0.716,0.71,0.68,0.716,0.71,0.712,0.692,0.716,0.71,0.718,0.716,0.71,0.716,0.716,0.716,0.718,0.722,0.708,0.716,0.716,0.716,0.718,0.716,0.724,0.708,0.69,0.716,0.716,0,0.61,0.736,0.716,0.716,0.728,0.692,0.716,0.716,0.684,0.0,0.69,0.712,0.688,0.676,0.716,0.702,0.71,0.716,0.716,0.706,0.678,0.712,0.71,0.716,0.68,0.306,0.71,0.74,0.716,0.706,0.718,0.724,0.716,0.706,0.716,0.73,0.706,0.716,0.716,0,0.716,0.716,0.71,0.0,0.3,0.714,0.72,0.716,0.718,0.716,0.716,0.718,0.686,0.74,0.716,0.54,0.702,0.718,0.716,0.714,0.708,0.326,0.716,0.726,0.716,0.714,0.726,0.716,0.712,0.716,0,0.724,0.294,0.692,0.718,0.718,0.708,0.716,0.72,0.728,0.716,0.554,0.716,0.716,0.666,0.688,0.716,0.716,0.408,0.736,0.718,0.722,0.716,0.716,0,0.71,0.716,0.716,0.718,0.716,0.718,0.702,0.716,0.704,0.708,0.716,0.684,0.714,0.724,0.72
44771,0.722,0.694,0.716,0.72,0.5,0.722,0.71,0.722,0.734,0.716,0.716,0.716,0.726,0.694,0.716,0.706,0.706,0.674,0.714,0.716,0.714,0.716,0.724,0.716,0.716,0.716,0.716,0.714,0.72,0.716,0.716,0.714,0.716,0.716,0.726,0.7,0.7,0.716,0.728,0,0.636,0.688,0.716,0.702,0.718,0.674,0.716,0.716,0.698,0.716,0.702,0.712,0.658,0.648,0.716,0.69,0.728,0.716,0.716,0.704,0.688,0.718,0.722,0.716,0.694,0.266,0.718,0.72,0.716,0.722,0.722,0.698,0.716,0.71,0.716,0.716,0.696,0.716,0.716,0,0.716,0.716,0.72,0.0,0.504,0.714,0.714,0.716,0.716,0.716,0.716,0.682,0.668,0.726,0.718,0.65,0.716,0.718,0.716,0.718,0.71,0.44,0.716,0.71,0.716,0.704,0.72,0.716,0.716,0.718,0,0.724,0.502,0.694,0.722,0.72,0.734,0.716,0.682,0.712,0.716,0.572,0.716,0.716,0.682,0.674,0.716,0.716,0.192,0.728,0.722,0.714,0.694,0.716,0,0.702,0.722,0.716,0.702,0.716,0.716,0.686,0.716,0.726,0.716,0.716,0.698,0.73,0.712,0.718
44772,0.736,0.662,0.716,0.724,0.438,0.728,0.706,0.722,0.71,0.716,0.716,0.716,0.732,0.676,0.716,0.71,0.698,0.69,0.716,0.718,0.716,0.716,0.72,0.716,0.716,0.716,0.714,0.72,0.732,0.716,0.716,0.716,0.722,0.716,0.718,0.714,0.71,0.716,0.724,0,0.644,0.692,0.716,0.71,0.74,0.674,0.716,0.716,0.702,0.716,0.704,0.724,0.662,0.696,0.716,0.72,0.734,0.714,0.716,0.722,0.67,0.72,0.722,0.716,0.668,0.236,0.714,0.746,0.716,0.726,0.73,0.704,0.716,0.728,0.716,0.698,0.716,0.716,0.716,0,0.716,0.716,0.716,0.0,0.494,0.72,0.722,0.716,0.722,0.716,0.716,0.716,0.686,0.72,0.716,0.582,0.732,0.714,0.716,0.718,0.704,0.352,0.728,0.728,0.716,0.736,0.736,0.716,0.716,0.732,0,0.72,0.492,0.694,0.718,0.724,0.724,0.716,0.718,0.726,0.716,0.576,0.716,0.716,0.674,0.702,0.716,0.716,0.716,0.712,0.708,0.718,0.706,0.708,0,0.712,0.712,0.714,0.712,0.716,0.72,0.72,0.716,0.736,0.72,0.716,0.67,0.732,0.706,0.72
44773,0.878,0.86,0.878,0.878,0.548,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.868,0.878,0.866,0.878,0.866,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.876,0.878,0.878,0.878,0.878,0.878,0.876,0.878,0.878,0.878,0.848,0.878,0.878,0,0.746,0.0,0.878,0.878,0.878,0.816,0.878,0.878,0.878,0.0,0.866,0.872,0.868,0.832,0.878,0.876,0.878,0.878,0.878,0.878,0.85,0.878,0.878,0.878,0.874,0.518,0.878,0.878,0.878,0.878,0.878,0.876,0.878,0.878,0.878,0.88,0.878,0.878,0.878,0,0.878,0.0,0.878,0.85,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.876,0.878,0.876,0.0,0.878,0.878,0.878,0.878,0.864,0.594,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0,0.874,0.0,0.872,0.878,0.878,0.876,0.878,0.0,0.872,0.878,0.584,0.878,0.0,0.862,0.862,0.0,0.878,0.0,0.868,0.878,0.0,0.878,0.878,0,0.878,0.872,0.878,0.872,0.878,0.878,0.858,0.878,0.878,0.878,0.878,0.878,0.878,0.0,0.878
44774,0.878,0.856,0.878,0.878,0.476,0.878,0.878,0.878,0.872,0.878,0.878,0.878,0.878,0.874,0.878,0.876,0.878,0.878,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.87,0.856,0.878,0.878,0,0.764,0.0,0.878,0.878,0.878,0.818,0.878,0.878,0.878,0.0,0.864,0.874,0.872,0.84,0.878,0.878,0.878,0.878,0.878,0.878,0.868,0.878,0.878,0.878,0.864,0.528,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.876,0.878,0.878,0.878,0,0.878,0.0,0.878,0.0,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.856,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.852,0.878,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0,0.876,0.0,0.872,0.878,0.878,0.874,0.878,0.0,0.872,0.878,0.602,0.878,0.0,0.854,0.866,0.0,0.878,0.0,0.86,0.878,0.0,0.878,0.878,0,0.878,0.874,0.878,0.876,0.878,0.878,0.868,0.878,0.878,0.878,0.878,0.878,0.878,0.0,0.878
44775,0.878,0.866,0.878,0.878,0.468,0.878,0.878,0.876,0.874,0.878,0.878,0.878,0.878,0.866,0.878,0.878,0.878,0.866,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.874,0.878,0.878,0.868,0.85,0.878,0.878,0,0.776,0.0,0.878,0.87,0.878,0.826,0.878,0.878,0.876,0.0,0.858,0.87,0.874,0.852,0.878,0.876,0.876,0.878,0.878,0.878,0.856,0.878,0.878,0.878,0.878,0.488,0.878,0.876,0.878,0.878,0.878,0.874,0.878,0.878,0.878,0.87,0.878,0.878,0.878,0,0.878,0.0,0.878,0.862,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.874,0.878,0.0,0.878,0.878,0.878,0.878,0.852,0.814,0.876,0.878,0.878,0.0,0.876,0.878,0.878,0.878,0,0.876,0.0,0.876,0.878,0.878,0.876,0.878,0.0,0.866,0.878,0.592,0.878,0.0,0.85,0.854,0.0,0.878,0.0,0.86,0.878,0.0,0.878,0.878,0,0.878,0.876,0.878,0.872,0.878,0.878,0.858,0.878,0.878,0.878,0.878,0.878,0.878,0.0,0.878
44776,0.878,0.874,0.878,0.878,0.506,0.878,0.878,0.878,0.872,0.878,0.878,0.878,0.878,0.852,0.878,0.878,0.878,0.868,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.874,0.83,0.878,0.878,0,0.812,0.0,0.878,0.878,0.878,0.808,0.878,0.878,0.878,0.0,0.852,0.874,0.872,0.84,0.878,0.878,0.878,0.878,0.878,0.878,0.862,0.878,0.878,0.878,0.878,0.458,0.878,0.878,0.878,0.878,0.878,0.874,0.878,0.878,0.878,0.866,0.878,0.878,0.878,0,0.878,0.0,0.878,0.862,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.876,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.848,0.696,0.878,0.878,0.878,0.0,0.878,0.878,0.862,0.878,0,0.868,0.0,0.878,0.878,0.878,0.876,0.878,0.0,0.86,0.878,0.636,0.878,0.0,0.844,0.854,0.0,0.878,0.0,0.852,0.878,0.0,0.878,0.878,0,0.878,0.86,0.878,0.872,0.878,0.878,0.868,0.878,0.878,0.878,0.878,0.878,0.878,0.0,0.878
44777,0.878,0.878,0.878,0.878,0.546,0.878,0.878,0.878,0.88,0.878,0.878,0.878,0.878,0.858,0.878,0.874,0.878,0.872,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.866,0.844,0.878,0.878,0,0.738,0.0,0.878,0.878,0.878,0.824,0.878,0.878,0.878,0.0,0.866,0.872,0.86,0.85,0.878,0.874,0.878,0.878,0.878,0.878,0.874,0.878,0.878,0.878,0.842,0.53,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.874,0.876,0.878,0.878,0,0.878,0.0,0.878,0.0,0.0,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.878,0.876,0.0,0.878,0.878,0.878,0.878,0.866,0.848,0.878,0.878,0.878,0.0,0.878,0.878,0.878,0.878,0,0.874,0.0,0.878,0.878,0.878,0.872,0.878,0.0,0.868,0.878,0.604,0.878,0.0,0.828,0.84,0.0,0.878,0.0,0.874,0.878,0.0,0.878,0.878,0,0.878,0.864,0.878,0.88,0.878,0.878,0.864,0.878,0.878,0.878,0.878,0.878,0.878,0.0,0.878
44778,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
44779,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
44780,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
44781,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
44782,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
44783,0.964,0.964,0.964,0.964,0.606,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.964,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.96,0.882,0.964,0.964,0,0.964,0.0,0.964,0.962,0.964,0.954,0.964,0.964,0.964,0.0,0.0,0.964,0.952,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.936,0.964,0.964,0.964,0.964,0.658,0.964,0.964,0.964,0.964,0.964,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.96,0,0.964,0.964,0.964,0.964,0.91,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.964,0.0,0.964,0.964,0.964,0.964,0.962,0.094,0.964,0.964,0.964,0.0,0.964,0.964,0.962,0.964,0,0.962,0.904,0.958,0.0,0.964,0.962,0.964,0.0,0.964,0.964,0.958,0.964,0.964,0.944,0.956,0.964,0.964,0.0,0.964,0.964,0.0,0.964,0.964,0,0.964,0.964,0.964,0.964,0.964,0.964,0.96,0.964,0.964,0.964,0.964,0.948,0.964,0.0,0.0
44784,0.964,0.95,0.964,0.964,0.626,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.0,0.964,0.964,0.962,0.858,0.964,0.964,0,0.962,0.964,0.964,0.962,0.964,0.816,0.964,0.964,0.964,0.964,0.0,0.962,0.952,0.966,0.964,0.964,0.964,0.964,0.964,0.964,0.944,0.964,0.964,0.964,0.956,0.704,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.964,0.964,0.964,0,0.964,0.964,0.964,0.958,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.12,0.964,0.964,0.964,0.964,0.964,0.964,0.954,0.964,0,0.964,0.958,0.964,0.0,0.964,0.958,0.964,0.964,0.96,0.964,0.94,0.964,0.964,0.96,0.954,0.964,0.964,0.0,0.964,0.964,0.964,0.964,0.964,0,0.948,0.962,0.964,0.964,0.964,0.964,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0
44785,0.964,0.964,0.964,0.964,0.606,0.964,0.964,0.964,0.962,0.964,0.964,0.964,0.964,0.0,0.964,0.954,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.0,0.964,0.964,0.964,0.962,0.964,0.964,0,0.964,0.0,0.964,0.96,0.964,0.828,0.964,0.964,0.964,0.0,0.0,0.962,0.956,0.962,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.656,0.964,0.964,0.964,0.964,0.964,0.954,0.964,0.964,0.964,0.958,0.964,0.964,0.964,0,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.964,0.0,0.964,0.964,0.964,0.964,0.962,0.854,0.964,0.96,0.964,0.0,0.964,0.964,0.964,0.964,0,0.962,0.958,0.964,0.0,0.964,0.962,0.964,0.964,0.964,0.964,0.95,0.964,0.964,0.952,0.954,0.964,0.964,0.586,0.962,0.964,0.964,0.964,0.964,0,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.0
44786,0.964,0.964,0.964,0.964,0.538,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.956,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0,0.964,0.964,0.0,0.964,0.964,0.964,0.688,0.964,0.964,0,0.964,0.964,0.964,0.962,0.964,0.82,0.964,0.964,0.964,0.0,0.0,0.964,0.954,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.666,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0,0.964,0.964,0.964,0.964,0.884,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.432,0.964,0.96,0.964,0.0,0.964,0.964,0.964,0.964,0,0.962,0.872,0.964,0.0,0.964,0.96,0.964,0.964,0.964,0.964,0.95,0.964,0.964,0.956,0.94,0.964,0.964,0.0,0.964,0.964,0.964,0.964,0.964,0,0.96,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.0
44787,0.964,0.946,0.964,0.964,0.616,0.964,0.962,0.964,0.962,0.964,0.964,0.964,0.964,0.0,0.964,0.958,0.956,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.962,0.964,0.0,0.964,0.964,0.0,0.964,0.964,0.964,0.506,0.964,0.964,0,0.962,0.964,0.964,0.958,0.964,0.692,0.964,0.964,0.964,0.964,0.0,0.964,0.948,0.958,0.964,0.964,0.964,0.964,0.964,0.964,0.952,0.964,0.964,0.964,0.956,0.742,0.964,0.964,0.964,0.964,0.964,0.96,0.964,0.964,0.964,0.962,0.964,0.964,0.964,0,0.964,0.964,0.964,0.0,0.904,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.964,0.956,0.156,0.964,0.964,0.964,0.958,0.964,0.964,0.964,0.964,0,0.958,0.89,0.956,0.0,0.964,0.958,0.964,0.958,0.962,0.964,0.944,0.964,0.964,0.944,0.954,0.964,0.964,0.684,0.96,0.964,0.954,0.964,0.964,0,0.95,0.964,0.964,0.964,0.964,0.964,0.946,0.964,0.964,0.964,0.964,0.964,0.964,0.96,0.0
44788,0.926,0.924,0.926,0.926,0.27,0.926,0.436,0.926,0.924,0.926,0.926,0.926,0.926,0.0,0.926,0.92,0.922,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.0,0.926,0.926,0.0,0.926,0.926,0.926,0.914,0.926,0.926,0,0.926,0.926,0.926,0.926,0.926,0.894,0.926,0.926,0.926,0.926,0.0,0.928,0.924,0.922,0.926,0.926,0.926,0.924,0.926,0.926,0.922,0.926,0.926,0.926,0.926,0.498,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0.926,0,0.926,0.926,0.926,0.914,0.278,0.926,0.924,0.926,0.926,0.926,0.926,0.926,0.914,0.928,0.926,0.792,0.926,0.926,0.926,0.926,0.9,0.216,0.926,0.924,0.926,0.926,0.926,0.926,0.924,0.926,0,0.926,0.278,0.926,0.926,0.926,0.922,0.926,0.924,0.926,0.926,0.924,0.926,0.926,0.908,0.908,0.926,0.926,0.0,0.918,0.926,0.922,0.924,0.926,0,0.91,0.924,0.926,0.926,0.926,0.926,0.916,0.926,0.926,0.926,0.926,0.206,0.926,0.926,0.926

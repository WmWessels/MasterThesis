0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44689,0.498,0.522,0.458,0.542,0.176,0.564,0.506,0.592,0.564,0.508,0.448,0.46,0.546,0.518,0.448,0.404,0.552,0.518,0.528,0.534,0.474,0.51,0.53,0.448,0.514,0.448,0.496,0.5,0.53,0.448,0.448,0.486,0.576,0.476,0.574,0.452,0.332,0.448,0.516,0,0.448,0.556,0.448,0.442,0.556,0.034,0.448,0.448,0.458,0.0,0.532,0.554,0.48,0.466,0.424,0.434,0.56,0.606,0.554,0.514,0.424,0.528,0.532,0.448,0.508,0.18,0.568,0.556,0.448,0.524,0.54,0.508,0.506,0.504,0.466,0.574,0.496,0.448,0.448,0,0.516,0.448,0.512,0.0,0.426,0.412,0.52,0.538,0.528,0.524,0.448,0.548,0.5,0.532,0.572,0.454,0.518,0.534,0.448,0.532,0.32,0.468,0.574,0.51,0.496,0.526,0.564,0.448,0.0,0.566,0,0.522,0.422,0.406,0.548,0.536,0.54,0.532,0.494,0.556,0.448,0.296,0.448,0.448,0.51,0.502,0.448,0.55,0.142,0.582,0.556,0.556,0.588,0.458,0,0.448,0.564,0.464,0.608,0.552,0.486,0.522,0.448,0.542,0.516,0.552,0.458,0.562,0.566,0.554
44690,0.514,0.478,0.44,0.532,0.206,0.564,0.476,0.606,0.59,0.49,0.448,0.448,0.568,0.518,0.448,0.442,0.498,0.52,0.518,0.526,0.444,0.502,0.53,0.448,0.488,0.448,0.484,0.47,0.542,0.448,0.448,0.47,0.57,0.458,0.568,0.458,0.236,0.448,0.518,0,0.444,0.602,0.448,0.444,0.536,0.106,0.448,0.448,0.47,0.0,0.536,0.6,0.464,0.456,0.43,0.44,0.572,0.588,0.54,0.512,0.436,0.536,0.524,0.448,0.51,0.444,0.514,0.524,0.448,0.524,0.52,0.292,0.5,0.476,0.454,0.594,0.52,0.448,0.448,0,0.492,0.446,0.514,0.0,0.398,0.414,0.506,0.518,0.532,0.504,0.448,0.512,0.44,0.516,0.542,0.43,0.51,0.528,0.448,0.512,0.22,0.464,0.538,0.504,0.508,0.508,0.554,0.448,0.516,0.564,0,0.16,0.396,0.396,0.564,0.514,0.562,0.536,0.52,0.568,0.448,0.296,0.448,0.448,0.48,0.484,0.448,0.564,0.244,0.598,0.54,0.556,0.61,0.478,0,0.448,0.59,0.442,0.598,0.576,0.464,0.5,0.448,0.546,0.542,0.53,0.424,0.548,0.596,0.534
44691,0.514,0.52,0.462,0.548,0.212,0.594,0.496,0.6,0.568,0.522,0.448,0.448,0.57,0.522,0.448,0.426,0.542,0.484,0.53,0.564,0.442,0.54,0.56,0.448,0.482,0.448,0.528,0.47,0.564,0.448,0.448,0.502,0.592,0.464,0.578,0.47,0.328,0.448,0.564,0,0.448,0.554,0.46,0.472,0.582,0.24,0.46,0.448,0.434,0.448,0.538,0.566,0.466,0.43,0.436,0.448,0.574,0.59,0.534,0.476,0.472,0.548,0.55,0.448,0.518,0.448,0.542,0.57,0.448,0.548,0.584,0.518,0.494,0.5,0.46,0.552,0.488,0.448,0.448,0,0.536,0.448,0.57,0.0,0.42,0.348,0.54,0.524,0.554,0.536,0.448,0.516,0.454,0.474,0.566,0.464,0.526,0.546,0.448,0.504,0.142,0.468,0.574,0.52,0.49,0.512,0.576,0.46,0.508,0.584,0,0.474,0.42,0.394,0.574,0.548,0.524,0.564,0.49,0.596,0.448,0.32,0.448,0.448,0.476,0.516,0.448,0.564,0.144,0.572,0.534,0.592,0.556,0.442,0,0.448,0.572,0.456,0.596,0.572,0.476,0.508,0.448,0.57,0.536,0.546,0.47,0.58,0.556,0.578
44692,0.536,0.486,0.464,0.536,0.208,0.578,0.518,0.586,0.57,0.492,0.448,0.468,0.568,0.542,0.448,0.346,0.55,0.524,0.54,0.516,0.46,0.53,0.532,0.448,0.504,0.448,0.54,0.474,0.546,0.448,0.448,0.494,0.582,0.46,0.596,0.468,0.306,0.448,0.54,0,0.444,0.602,0.448,0.442,0.56,0.18,0.448,0.448,0.492,0.0,0.57,0.572,0.484,0.434,0.428,0.436,0.574,0.58,0.548,0.488,0.462,0.528,0.542,0.448,0.514,0.296,0.588,0.566,0.448,0.55,0.536,0.524,0.522,0.49,0.462,0.584,0.538,0.448,0.448,0,0.52,0.414,0.538,0.0,0.424,0.36,0.526,0.508,0.532,0.518,0.448,0.508,0.514,0.516,0.572,0.456,0.544,0.564,0.448,0.492,0.38,0.47,0.566,0.5,0.498,0.522,0.566,0.448,0.506,0.57,0,0.276,0.422,0.42,0.576,0.592,0.556,0.542,0.538,0.574,0.448,0.318,0.458,0.448,0.514,0.46,0.448,0.562,0.152,0.572,0.56,0.588,0.584,0.466,0,0.448,0.598,0.454,0.6,0.568,0.466,0.48,0.448,0.548,0.528,0.556,0.46,0.562,0.616,0.546
44693,0.992,0.992,0.986,0.992,0.988,0.992,0.982,0.99,0.986,0.986,0.986,0.99,0.992,0.0,0.992,0.986,0.982,0.992,0.986,0.986,0.986,0.99,0.986,0.986,0.986,0.992,0.986,0.984,0.99,0.986,0.986,0.99,0.992,0.986,0.992,0.986,0.918,0.986,0.99,0,0.986,0.988,0.978,0.986,0.992,0.926,0.986,0.986,0.986,0.0,0.0,0.99,0.988,0.974,0.986,0.992,0.992,0.986,0.988,0.988,0.978,0.986,0.986,0.992,0.988,0.986,0.986,0.992,0.986,0.986,0.992,0.98,0.986,0.99,0.986,0.988,0.992,0.986,0.992,0,0.986,0.99,0.992,0.98,0.988,0.986,0.99,0.986,0.99,0.986,0.986,0.99,0.988,0.986,0.99,0.986,0.992,0.988,0.986,0.992,0.368,0.962,0.992,0.99,0.986,0.99,0.992,0.978,0.986,0.992,0,0.976,0.988,0.986,0.986,0.99,0.984,0.986,0.992,0.992,0.986,0.594,0.986,0.986,0.982,0.982,0.986,0.992,0.708,0.986,0.986,0.992,0.992,0.99,0,0.986,0.99,0.986,0.992,0.992,0.984,0.978,0.986,0.992,0.99,0.986,0.94,0.992,0.99,0.992
44694,0.998,0.992,0.986,0.996,0.992,0.996,0.996,0.998,0.994,0.986,0.986,0.996,0.998,0.0,0.992,0.986,0.996,0.996,0.988,0.986,0.986,0.996,0.986,0.986,0.986,0.992,0.986,0.996,0.994,0.986,0.986,0.994,0.998,0.986,0.996,0.996,0.98,0.986,0.994,0,0.986,0.996,0.996,0.986,0.996,0.956,0.996,0.986,0.986,0.0,0.0,0.996,0.996,0.994,0.986,0.996,0.998,0.986,0.988,0.994,0.986,0.986,0.986,0.992,0.998,0.986,0.998,0.998,0.986,0.986,0.998,0.004,0.986,0.986,0.986,0.996,0.996,0.986,0.992,0,0.986,0.994,0.996,0.986,0.992,0.986,0.996,0.986,0.986,0.986,0.986,0.998,0.996,0.992,0.984,0.996,0.998,0.986,0.986,0.996,0.978,0.974,0.998,0.998,0.986,0.994,0.998,0.996,0.986,0.996,0,0.976,0.992,0.986,0.996,0.996,0.99,0.986,0.996,0.994,0.986,0.596,0.986,0.986,0.986,0.996,0.986,0.996,0.686,0.996,0.996,0.998,0.996,0.992,0,0.986,0.998,0.986,0.998,0.998,0.996,0.996,0.986,0.998,0.986,0.986,0.906,0.996,0.992,0.998
44695,0.994,0.994,0.986,0.992,0.99,0.994,0.994,0.994,0.996,0.986,0.986,0.992,0.994,0.0,0.994,0.986,0.992,0.992,0.992,0.986,0.986,0.992,0.986,0.986,0.986,0.994,0.986,0.992,0.992,0.986,0.986,0.992,0.994,0.986,0.992,0.992,0.984,0.986,0.992,0,0.986,0.994,0.982,0.986,0.994,0.978,0.99,0.986,0.986,0.0,0.0,0.994,0.992,0.984,0.986,0.992,0.994,0.986,0.992,0.992,0.982,0.986,0.986,0.994,0.986,0.986,0.988,0.994,0.986,0.986,0.994,0.98,0.986,0.994,0.986,0.992,0.992,0.986,0.994,0,0.986,0.994,0.994,0.986,0.99,0.986,0.992,0.988,0.992,0.986,0.986,0.994,0.988,0.994,0.986,0.99,0.994,0.992,0.986,0.992,0.976,0.97,0.994,0.994,0.986,0.992,0.994,0.982,0.986,0.994,0,0.978,0.99,0.986,0.994,0.988,0.99,0.992,0.992,0.994,0.986,0.582,0.986,0.986,0.988,0.994,0.986,0.994,0.71,0.994,0.988,0.994,0.992,0.992,0,0.986,0.992,0.986,0.994,0.994,0.992,0.994,0.986,0.994,0.992,0.986,0.942,0.994,0.994,0.994
44696,0.994,0.994,0.986,0.992,0.994,0.996,0.992,0.996,0.996,0.986,0.986,0.992,0.996,0.0,0.996,0.986,0.992,0.992,0.992,0.986,0.988,0.992,0.986,0.986,0.986,0.972,0.986,0.99,0.992,0.986,0.986,0.992,0.996,0.986,0.992,0.99,0.956,0.986,0.994,0,0.986,0.996,0.992,0.986,0.994,0.962,0.992,0.986,0.988,0.0,0.0,0.994,0.992,0.978,0.986,0.992,0.996,0.986,0.99,0.992,0.994,0.986,0.986,0.996,0.998,0.986,0.992,0.996,0.986,0.99,0.994,0.986,0.986,0.986,0.986,0.996,0.992,0.986,0.996,0,0.986,0.994,0.996,0.986,0.994,0.986,0.992,0.986,0.99,0.986,0.986,0.996,0.992,0.992,0.988,0.994,0.994,0.992,0.986,0.992,0.576,0.986,0.996,0.996,0.986,0.992,0.996,0.992,0.986,0.994,0,0.994,0.994,0.986,0.994,0.992,0.996,0.986,0.992,0.994,0.986,0.564,0.986,0.986,0.994,0.99,0.986,0.992,0.684,0.994,0.992,0.996,0.992,0.992,0,0.986,0.994,0.986,0.996,0.994,0.992,0.994,0.986,0.994,0.992,0.986,0.938,0.994,0.99,0.996
44697,0.994,0.992,0.986,0.992,0.99,0.994,0.992,0.994,0.994,0.986,0.986,0.992,0.994,0.0,0.992,0.986,0.988,0.992,0.986,0.986,0.986,0.992,0.986,0.986,0.986,0.988,0.986,0.988,0.986,0.986,0.986,0.992,0.994,0.986,0.992,0.966,0.94,0.986,0.99,0,0.986,0.994,0.986,0.986,0.994,0.954,0.986,0.986,0.986,0.0,0.0,0.994,0.992,0.988,0.986,0.992,0.992,0.986,0.986,0.988,0.98,0.986,0.986,0.992,0.986,0.986,0.99,0.992,0.986,0.986,0.994,0.986,0.986,0.978,0.986,0.994,0.992,0.986,0.992,0,0.986,0.994,0.994,0.986,0.992,0.986,0.992,0.986,0.986,0.986,0.986,0.988,0.986,0.99,0.988,0.988,0.992,0.986,0.986,0.992,0.926,0.96,0.994,0.994,0.986,0.99,0.994,0.986,0.986,0.992,0,0.868,0.992,0.986,0.994,0.992,0.99,0.986,0.992,0.992,0.986,0.534,0.986,0.986,0.99,0.98,0.986,0.992,0.704,0.992,0.99,0.992,0.992,0.986,0,0.986,0.992,0.986,0.994,0.992,0.99,0.992,0.986,0.992,0.986,0.986,0.886,0.992,0.986,0.992
44698,0.784,0.714,0.69,0.776,0.636,0.788,0.702,0.806,0.794,0.638,0.726,0.67,0.768,0.0,0.2,0.7,0.728,0.738,0.716,0.746,0.704,0.774,0.75,0.648,0.11,0.2,0.086,0.72,0.774,0.0,0.1,0.562,0.0,0.666,0.736,0.516,0.0,0.604,0.718,0,0.628,0.0,0.2,0.768,0.782,0.0,0.186,0.726,0.664,0.734,0.0,0.786,0.382,0.666,0.112,0.718,0.794,0.412,0.244,0.702,0.64,0.762,0.748,0.2,0.328,0.678,0.716,0.738,0.1,0.764,0.748,0.758,0.122,0.53,0.708,0.772,0.714,0.1,0.2,0,0.706,0.194,0.764,0.0,0.636,0.118,0.74,0.686,0.768,0.67,0.1,0.694,0.708,0.782,0.662,0.638,0.802,0.74,0.45,0.71,0.814,0.592,0.792,0.64,0.108,0.694,0.778,0.2,0.0,0.79,0,0.788,0.634,0.118,0.0,0.712,0.794,0.762,0.714,0.754,0.742,0.626,0.326,0.1,0.704,0.708,0.254,0.772,0.318,0.0,0.694,0.792,0.726,0.418,0,0.678,0.808,0.684,0.818,0.78,0.716,0.682,0.732,0.786,0.758,0.594,0.552,0.794,0.802,0.0
44699,0.766,0.692,0.7,0.772,0.67,0.784,0.736,0.792,0.802,0.59,0.702,0.648,0.774,0.0,0.2,0.724,0.696,0.762,0.71,0.754,0.72,0.758,0.742,0.682,0.114,0.2,0.098,0.74,0.754,0.0,0.1,0.526,0.0,0.692,0.738,0.528,0.0,0.604,0.704,0,0.678,0.0,0.198,0.776,0.77,0.0,0.198,0.702,0.66,0.712,0.0,0.794,0.418,0.65,0.102,0.738,0.77,0.56,0.23,0.726,0.65,0.742,0.758,0.2,0.326,0.7,0.712,0.724,0.1,0.746,0.774,0.776,0.092,0.548,0.666,0.79,0.74,0.1,0.2,0,0.702,0.186,0.754,0.0,0.67,0.106,0.768,0.7,0.744,0.686,0.1,0.688,0.694,0.804,0.654,0.662,0.784,0.718,0.472,0.736,0.794,0.634,0.776,0.644,0.072,0.662,0.78,0.198,0.0,0.788,0,0.806,0.67,0.108,0.0,0.74,0.792,0.754,0.74,0.75,0.734,0.636,0.434,0.1,0.674,0.656,0.268,0.774,0.316,0.0,0.73,0.782,0.764,0.44,0,0.7,0.826,0.708,0.798,0.782,0.75,0.698,0.746,0.764,0.758,0.582,0.534,0.776,0.808,0.0
44700,0.776,0.694,0.75,0.796,0.68,0.792,0.782,0.812,0.808,0.562,0.704,0.646,0.792,0.0,0.2,0.706,0.7,0.794,0.75,0.772,0.76,0.784,0.782,0.702,0.1,0.2,0.29,0.752,0.78,0.0,0.1,0.48,0.0,0.706,0.774,0.526,0.0,0.616,0.752,0,0.644,0.0,0.2,0.768,0.768,0.0,0.2,0.716,0.698,0.708,0.0,0.784,0.486,0.704,0.07,0.776,0.796,0.386,0.256,0.774,0.654,0.78,0.78,0.2,0.328,0.702,0.756,0.778,0.1,0.784,0.764,0.642,0.096,0.488,0.72,0.79,0.774,0.1,0.2,0,0.72,0.184,0.8,0.0,0.682,0.084,0.772,0.748,0.798,0.698,0.1,0.674,0.708,0.768,0.652,0.682,0.79,0.752,0.536,0.788,0.798,0.3,0.798,0.662,0.102,0.746,0.772,0.2,0.0,0.8,0,0.808,0.68,0.1,0.0,0.742,0.804,0.79,0.774,0.74,0.768,0.694,0.496,0.1,0.688,0.66,0.266,0.786,0.0,0.0,0.748,0.794,0.788,0.526,0,0.702,0.824,0.754,0.808,0.796,0.754,0.696,0.752,0.786,0.782,0.516,0.464,0.798,0.792,0.0
44701,0.744,0.708,0.672,0.75,0.618,0.764,0.688,0.772,0.764,0.642,0.71,0.624,0.768,0.0,0.2,0.666,0.692,0.712,0.682,0.736,0.698,0.746,0.734,0.634,0.104,0.2,0.134,0.726,0.758,0.0,0.1,0.548,0.0,0.646,0.712,0.434,0.0,0.582,0.676,0,0.622,0.0,0.196,0.732,0.756,0.0,0.19,0.672,0.668,0.714,0.0,0.74,0.406,0.612,0.098,0.688,0.766,0.448,0.254,0.69,0.596,0.738,0.742,0.2,0.356,0.678,0.0,0.722,0.1,0.748,0.742,0.71,0.094,0.506,0.606,0.73,0.682,0.1,0.2,0,0.68,0.2,0.74,0.0,0.618,0.118,0.702,0.67,0.756,0.618,0.1,0.68,0.654,0.72,0.666,0.614,0.768,0.716,0.446,0.714,0.786,0.616,0.762,0.532,0.094,0.678,0.76,0.196,0.0,0.762,0,0.738,0.618,0.098,0.0,0.708,0.746,0.736,0.682,0.754,0.714,0.592,0.438,0.1,0.662,0.698,0.222,0.762,0.228,0.0,0.708,0.778,0.716,0.454,0,0.678,0.776,0.676,0.762,0.77,0.728,0.682,0.702,0.754,0.738,0.58,0.492,0.762,0.756,0.0
44702,0.776,0.674,0.734,0.776,0.646,0.788,0.74,0.8,0.818,0.64,0.714,0.686,0.788,0.0,0.198,0.702,0.684,0.772,0.744,0.76,0.76,0.79,0.754,0.656,0.118,0.2,0.144,0.732,0.77,0.0,0.1,0.52,0.0,0.662,0.78,0.472,0.0,0.598,0.736,0,0.638,0.0,0.198,0.776,0.77,0.0,0.198,0.674,0.704,0.702,0.0,0.804,0.464,0.714,0.078,0.74,0.802,0.54,0.252,0.738,0.642,0.766,0.756,0.198,0.31,0.698,0.762,0.766,0.1,0.762,0.768,0.76,0.086,0.516,0.664,0.792,0.74,0.1,0.198,0,0.748,0.2,0.79,0.0,0.646,0.098,0.752,0.738,0.76,0.7,0.1,0.686,0.688,0.778,0.678,0.65,0.792,0.768,0.518,0.762,0.804,0.646,0.776,0.638,0.096,0.744,0.782,0.198,0.0,0.804,0,0.77,0.646,0.104,0.0,0.766,0.792,0.774,0.74,0.774,0.746,0.66,0.476,0.1,0.698,0.702,0.29,0.798,0.11,0.0,0.76,0.796,0.768,0.496,0,0.698,0.812,0.724,0.81,0.792,0.724,0.706,0.766,0.784,0.764,0.578,0.598,0.794,0.808,0.0
44703,0.7,0.656,0.686,0.736,0.49,0.74,0.74,0.73,0.738,0.658,0.674,0.0,0.732,0.0,0.658,0.698,0.744,0.694,0.0,0.722,0.686,0.714,0.712,0.688,0.658,0.658,0.656,0.74,0.718,0.0,0.658,0.658,0.0,0.692,0.712,0.68,0.714,0.658,0.712,0,0.658,0.676,0.658,0.738,0.734,0.716,0.658,0.658,0.682,0.694,0.0,0.736,0.658,0.708,0.658,0.698,0.73,0.658,0.658,0.694,0.672,0.72,0.724,0.658,0.606,0.51,0.714,0.724,0.658,0.722,0.672,0.74,0.66,0.662,0.708,0.75,0.696,0.658,0.658,0,0.658,0.658,0.744,0.0,0.718,0.676,0.746,0.0,0.734,0.658,0.658,0.708,0.688,0.0,0.67,0.684,0.724,0.702,0.658,0.694,0.734,0.382,0.71,0.67,0.656,0.652,0.736,0.658,0.654,0.736,0,0.0,0.71,0.636,0.0,0.704,0.748,0.696,0.636,0.716,0.688,0.712,0.658,0.658,0.67,0.63,0.658,0.72,0.17,0.746,0.712,0.694,0.696,0.658,0,0.642,0.728,0.69,0.666,0.722,0.744,0.688,0.658,0.726,0.728,0.656,0.0,0.732,0.708,0.0
44704,0.714,0.682,0.694,0.752,0.504,0.74,0.764,0.752,0.768,0.682,0.672,0.0,0.728,0.0,0.658,0.712,0.746,0.72,0.0,0.732,0.702,0.712,0.712,0.702,0.658,0.658,0.652,0.748,0.716,0.0,0.658,0.686,0.0,0.7,0.712,0.672,0.776,0.658,0.74,0,0.704,0.72,0.658,0.788,0.74,0.78,0.658,0.658,0.7,0.7,0.0,0.784,0.658,0.728,0.658,0.722,0.754,0.666,0.658,0.706,0.656,0.734,0.724,0.658,0.644,0.564,0.714,0.76,0.658,0.732,0.676,0.756,0.658,0.666,0.722,0.768,0.712,0.658,0.658,0,0.658,0.658,0.752,0.0,0.748,0.688,0.76,0.0,0.73,0.658,0.658,0.686,0.676,0.0,0.696,0.66,0.734,0.684,0.658,0.72,0.788,0.554,0.736,0.718,0.656,0.698,0.754,0.658,0.0,0.728,0,0.0,0.742,0.63,0.0,0.702,0.764,0.692,0.712,0.73,0.69,0.742,0.658,0.658,0.67,0.674,0.658,0.718,0.0,0.776,0.724,0.724,0.702,0.658,0,0.73,0.748,0.686,0.694,0.732,0.768,0.686,0.658,0.73,0.73,0.7,0.0,0.754,0.73,0.0
44705,0.67,0.698,0.678,0.718,0.494,0.708,0.752,0.742,0.758,0.668,0.67,0.0,0.706,0.0,0.658,0.694,0.746,0.732,0.0,0.71,0.68,0.694,0.702,0.67,0.658,0.658,0.66,0.75,0.688,0.0,0.658,0.676,0.0,0.676,0.71,0.636,0.746,0.658,0.706,0,0.638,0.71,0.658,0.75,0.716,0.716,0.658,0.658,0.662,0.678,0.0,0.742,0.656,0.724,0.658,0.702,0.748,0.66,0.658,0.688,0.626,0.7,0.712,0.658,0.644,0.53,0.724,0.7,0.658,0.706,0.676,0.744,0.658,0.674,0.69,0.764,0.696,0.658,0.658,0,0.658,0.658,0.704,0.0,0.698,0.676,0.752,0.0,0.708,0.658,0.658,0.682,0.672,0.0,0.684,0.68,0.692,0.71,0.658,0.686,0.74,0.568,0.714,0.706,0.656,0.684,0.714,0.658,0.0,0.73,0,0.0,0.698,0.628,0.0,0.714,0.746,0.678,0.65,0.706,0.682,0.708,0.658,0.658,0.678,0.64,0.658,0.692,0.18,0.776,0.708,0.696,0.704,0.658,0,0.678,0.726,0.676,0.7,0.696,0.756,0.672,0.658,0.708,0.71,0.664,0.0,0.716,0.72,0.0
44706,0.672,0.684,0.688,0.726,0.496,0.728,0.762,0.762,0.77,0.66,0.67,0.0,0.718,0.0,0.658,0.722,0.752,0.728,0.0,0.722,0.704,0.698,0.72,0.694,0.658,0.658,0.656,0.754,0.71,0.0,0.658,0.676,0.0,0.702,0.704,0.646,0.744,0.658,0.736,0,0.652,0.674,0.658,0.77,0.728,0.766,0.658,0.658,0.666,0.704,0.0,0.772,0.658,0.704,0.658,0.726,0.742,0.664,0.658,0.71,0.634,0.728,0.718,0.658,0.662,0.506,0.712,0.74,0.658,0.72,0.676,0.752,0.658,0.662,0.706,0.752,0.716,0.658,0.658,0,0.658,0.658,0.75,0.0,0.718,0.686,0.756,0.0,0.722,0.658,0.658,0.69,0.676,0.0,0.676,0.672,0.684,0.694,0.658,0.708,0.758,0.502,0.73,0.678,0.656,0.666,0.738,0.658,0.0,0.734,0,0.0,0.71,0.622,0.0,0.714,0.746,0.686,0.644,0.716,0.686,0.74,0.658,0.658,0.666,0.65,0.658,0.716,0.446,0.766,0.724,0.698,0.714,0.658,0,0.638,0.754,0.686,0.696,0.726,0.758,0.68,0.658,0.72,0.722,0.666,0.0,0.748,0.7,0.0
44707,0.678,0.646,0.672,0.732,0.486,0.724,0.748,0.738,0.752,0.672,0.662,0.0,0.714,0.0,0.658,0.702,0.746,0.71,0.0,0.714,0.69,0.694,0.7,0.672,0.658,0.658,0.656,0.746,0.702,0.0,0.658,0.678,0.0,0.682,0.708,0.674,0.758,0.658,0.704,0,0.652,0.684,0.658,0.764,0.716,0.722,0.658,0.658,0.682,0.688,0.0,0.75,0.658,0.704,0.658,0.694,0.732,0.68,0.658,0.71,0.638,0.714,0.72,0.658,0.626,0.484,0.706,0.734,0.658,0.714,0.668,0.73,0.658,0.672,0.682,0.762,0.702,0.658,0.658,0,0.658,0.658,0.742,0.0,0.7,0.67,0.74,0.0,0.722,0.658,0.658,0.688,0.686,0.0,0.684,0.668,0.704,0.704,0.658,0.71,0.738,0.586,0.738,0.694,0.66,0.658,0.738,0.658,0.648,0.742,0,0.0,0.7,0.626,0.0,0.722,0.758,0.672,0.656,0.74,0.68,0.692,0.658,0.658,0.668,0.602,0.658,0.716,0.206,0.752,0.714,0.668,0.708,0.658,0,0.67,0.732,0.682,0.676,0.71,0.742,0.662,0.658,0.718,0.724,0.676,0.0,0.73,0.686,0.0
44708,0.942,0.942,0.942,0.942,0.594,0.942,0.942,0.946,0.946,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.948,0.948,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.95,0.942,0.942,0,0.942,0.0,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.0,0.938,0.946,0.944,0.938,0.942,0.942,0.942,0.948,0.942,0.942,0.94,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.942,0.948,0.942,0.942,0,0.942,0.942,0.942,0.0,0.598,0.942,0.942,0.948,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0.95,0.942,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0,0.946,0.598,0.94,0.942,0.942,0.94,0.942,0.0,0.942,0.942,0.59,0.942,0.942,0.926,0.938,0.942,0.942,0.516,0.948,0.942,0.0,0.948,0.942,0,0.942,0.946,0.942,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.942,0.942,0.942,0.0,0.942

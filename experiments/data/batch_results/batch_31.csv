0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44479,0.13066666666666665,0.056,0.09333333333333334,0.21066666666666667,0.15466666666666667,0.13866666666666666,0.192,0.16266666666666665,0.17333333333333334,0.14666666666666667,0.12266666666666666,0.08266666666666667,0.18133333333333335,0.0,0.02666666666666667,0.12533333333333332,0.192,0.12266666666666666,0.12533333333333332,0.14666666666666667,0.088,0.19466666666666665,0.10933333333333334,0.088,0.050666666666666665,0.029333333333333333,0.04533333333333334,0.18666666666666668,0.15733333333333333,0.0,0.0,0.11733333333333333,0.0,0.09066666666666667,0.168,0.04533333333333334,0.0,0.0,0.16,0,0.10933333333333334,0.0,0.032,0.0,0.12266666666666666,0.0,0.02666666666666667,0.0,0.152,0.10666666666666667,0.0,0.0,0.048,0.13066666666666665,0.029333333333333333,0.08266666666666667,0.192,0.13333333333333333,0.13066666666666665,0.096,0.056,0.13333333333333333,0.15466666666666667,0.02666666666666667,0.042666666666666665,0.18666666666666668,0.0,0.2,0.048,0.10933333333333334,0.17066666666666666,0.02666666666666667,0.058666666666666666,0.058666666666666666,0.10933333333333334,0.152,0.13066666666666665,0.018666666666666668,0.02666666666666667,0,0.09866666666666667,0.02666666666666667,0.14133333333333334,0.0,0.19466666666666665,0.021333333333333333,0.192,0.10133333333333333,0.14933333333333335,0.08,0.018666666666666668,0.072,0.088,0.112,0.152,0.050666666666666665,0.15466666666666667,0.224,0.05333333333333334,0.09066666666666667,0.02666666666666667,0.13866666666666666,0.152,0.11733333333333333,0.048,0.112,0.13066666666666665,0.032,0.0,0.168,0,0.013333333333333334,0.192,0.050666666666666665,0.10933333333333334,0.19733333333333333,0.018666666666666668,0.11733333333333333,0.11733333333333333,0.10133333333333333,0.136,0.11733333333333333,0.04,0.018666666666666668,0.048,0.064,0.021333333333333333,0.18933333333333333,0.029333333333333333,0.0,0.176,0.11466666666666667,0.13066666666666665,0.048,0,0.18933333333333333,0.216,0.096,0.14933333333333335,0.144,0.176,0.05333333333333334,0.0,0.14133333333333334,0.17066666666666666,0.16266666666666665,0.06933333333333333,0.16266666666666665,0.0,0.0
44480,0.144,0.08,0.09333333333333334,0.232,0.14933333333333335,0.17333333333333334,0.18666666666666668,0.19466666666666665,0.18666666666666668,0.17866666666666667,0.0,0.08266666666666667,0.19733333333333333,0.0,0.034666666666666665,0.11466666666666667,0.20266666666666666,0.12266666666666666,0.112,0.16,0.09866666666666667,0.21066666666666667,0.14933333333333335,0.07733333333333334,0.050666666666666665,0.029333333333333333,0.021333333333333333,0.192,0.17066666666666666,0.0,0.0,0.13333333333333333,0.0,0.088,0.176,0.056,0.0,0.0,0.17333333333333334,0,0.13333333333333333,0.0,0.04,0.0,0.13333333333333333,0.0,0.021333333333333333,0.0,0.15733333333333333,0.10666666666666667,0.0,0.0,0.034666666666666665,0.096,0.02666666666666667,0.06666666666666667,0.232,0.13866666666666666,0.12,0.09866666666666667,0.08,0.17066666666666666,0.16266666666666665,0.034666666666666665,0.088,0.168,0.0,0.168,0.013333333333333334,0.16533333333333333,0.0,0.0,0.056,0.06666666666666667,0.10933333333333334,0.0,0.12533333333333332,0.018666666666666668,0.034666666666666665,0,0.0,0.021333333333333333,0.17333333333333334,0.0,0.2,0.018666666666666668,0.20266666666666666,0.10666666666666667,0.19466666666666665,0.0,0.018666666666666668,0.09866666666666667,0.12266666666666666,0.0,0.168,0.04,0.15466666666666667,0.19466666666666665,0.042666666666666665,0.09866666666666667,0.0,0.13066666666666665,0.19733333333333333,0.168,0.058666666666666666,0.128,0.14666666666666667,0.04,0.0,0.18666666666666668,0,0.021333333333333333,0.19733333333333333,0.034666666666666665,0.128,0.17333333333333334,0.029333333333333333,0.16,0.104,0.128,0.16,0.152,0.064,0.018666666666666668,0.096,0.088,0.010666666666666666,0.22933333333333333,0.02666666666666667,0.0,0.136,0.15733333333333333,0.15466666666666667,0.058666666666666666,0,0.16533333333333333,0.19733333333333333,0.09866666666666667,0.18666666666666668,0.176,0.17866666666666667,0.09866666666666667,0.0,0.17333333333333334,0.184,0.15466666666666667,0.08266666666666667,0.17333333333333334,0.0,0.0
44481,0.16266666666666665,0.08266666666666667,0.088,0.21066666666666667,0.17333333333333334,0.17066666666666666,0.20266666666666666,0.19466666666666665,0.18933333333333333,0.176,0.12266666666666666,0.12,0.20533333333333334,0.0,0.032,0.12,0.18133333333333335,0.14666666666666667,0.15466666666666667,0.18133333333333335,0.10133333333333333,0.18933333333333333,0.17333333333333334,0.07733333333333334,0.04533333333333334,0.02666666666666667,0.032,0.19466666666666665,0.17333333333333334,0.0,0.0,0.11733333333333333,0.0,0.05333333333333334,0.224,0.048,0.0,0.10666666666666667,0.176,0,0.128,0.0,0.032,0.14133333333333334,0.168,0.0,0.024,0.0,0.14666666666666667,0.10133333333333333,0.0,0.0,0.06933333333333333,0.10933333333333334,0.024,0.08,0.23733333333333334,0.14133333333333334,0.11733333333333333,0.112,0.08,0.16533333333333333,0.17333333333333334,0.032,0.06666666666666667,0.152,0.0,0.19733333333333333,0.021333333333333333,0.16533333333333333,0.17866666666666667,0.0,0.05333333333333334,0.06666666666666667,0.09866666666666667,0.17866666666666667,0.13333333333333333,0.021333333333333333,0.032,0,0.15466666666666667,0.032,0.208,0.0,0.184,0.032,0.18933333333333333,0.12,0.184,0.088,0.018666666666666668,0.09333333333333334,0.06666666666666667,0.208,0.16,0.034666666666666665,0.192,0.22933333333333333,0.08533333333333333,0.09066666666666667,0.04533333333333334,0.128,0.18933333333333333,0.176,0.04533333333333334,0.15466666666666667,0.17066666666666666,0.032,0.0,0.184,0,0.02666666666666667,0.18933333333333333,0.04,0.144,0.2,0.021333333333333333,0.184,0.13333333333333333,0.13866666666666666,0.19466666666666665,0.14133333333333334,0.06666666666666667,0.018666666666666668,0.07733333333333334,0.09866666666666667,0.021333333333333333,0.216,0.018666666666666668,0.0,0.16533333333333333,0.176,0.13866666666666666,0.06666666666666667,0,0.14933333333333335,0.224,0.07466666666666667,0.192,0.18666666666666668,0.22133333333333333,0.104,0.0,0.19733333333333333,0.18666666666666668,0.16533333333333333,0.10933333333333334,0.17866666666666667,0.16,0.0
44482,0.12266666666666666,0.104,0.06933333333333333,0.21333333333333335,0.12,0.176,0.20533333333333334,0.16533333333333333,0.2,0.2,0.0,0.08533333333333333,0.18933333333333333,0.0,0.037333333333333336,0.144,0.19466666666666665,0.12266666666666666,0.088,0.184,0.08533333333333333,0.216,0.14666666666666667,0.08266666666666667,0.050666666666666665,0.04,0.042666666666666665,0.18666666666666668,0.18933333333333333,0.0,0.0,0.12266666666666666,0.0,0.09066666666666667,0.184,0.042666666666666665,0.0,0.128,0.18933333333333333,0,0.16533333333333333,0.0,0.034666666666666665,0.0,0.13866666666666666,0.0,0.037333333333333336,0.0,0.16266666666666665,0.128,0.0,0.0,0.048,0.12,0.010666666666666666,0.056,0.21333333333333335,0.13866666666666666,0.12266666666666666,0.12266666666666666,0.04533333333333334,0.17333333333333334,0.19466666666666665,0.037333333333333336,0.07733333333333334,0.19733333333333333,0.0,0.20266666666666666,0.042666666666666665,0.168,0.0,0.04,0.048,0.06133333333333333,0.14933333333333335,0.15466666666666667,0.09066666666666667,0.018666666666666668,0.037333333333333336,0,0.104,0.032,0.19466666666666665,0.0,0.176,0.02666666666666667,0.19733333333333333,0.08,0.21866666666666668,0.06666666666666667,0.018666666666666668,0.08266666666666667,0.11466666666666667,0.16533333333333333,0.152,0.042666666666666665,0.176,0.17066666666666666,0.034666666666666665,0.088,0.048,0.11466666666666667,0.16533333333333333,0.16266666666666665,0.056,0.10666666666666667,0.13866666666666666,0.034666666666666665,0.0,0.19466666666666665,0,0.032,0.184,0.056,0.14933333333333335,0.16533333333333333,0.029333333333333333,0.144,0.10133333333333333,0.13066666666666665,0.13866666666666666,0.17333333333333334,0.042666666666666665,0.018666666666666668,0.09866666666666667,0.10666666666666667,0.032,0.20533333333333334,0.021333333333333333,0.0,0.144,0.17866666666666667,0.15466666666666667,0.04533333333333334,0,0.19466666666666665,0.2,0.06666666666666667,0.19733333333333333,0.192,0.192,0.10133333333333333,0.0,0.17866666666666667,0.20266666666666666,0.14666666666666667,0.104,0.18933333333333333,0.016,0.0
44483,0.8554913294797688,0.8554913294797688,0.7341040462427746,0.8554913294797688,0.7167630057803468,0.8497109826589595,0.8786127167630058,0.8728323699421965,0.884393063583815,0.7283236994219653,0.6184971098265896,0.7514450867052023,0.861271676300578,0.8786127167630058,0.861271676300578,0.6473988439306358,0.8728323699421965,0.7630057803468208,0.7745664739884393,0.8554913294797688,0.7630057803468208,0.8554913294797688,0.8670520231213873,0.6184971098265896,0.5317919075144508,0.861271676300578,0.7225433526011561,0.8497109826589595,0.838150289017341,0.5549132947976878,0.5549132947976878,0.7514450867052023,0.8554913294797688,0.6184971098265896,0.861271676300578,0.7803468208092486,0.8439306358381503,0.6184971098265896,0.8439306358381503,0,0.6358381502890174,0.8554913294797688,0.6994219653179191,0.6242774566473989,0.8497109826589595,0.838150289017341,0.6994219653179191,0.5549132947976878,0.7976878612716763,0.6184971098265896,0.8728323699421965,0.8728323699421965,0.6763005780346821,0.8497109826589595,0.5202312138728323,0.7514450867052023,0.861271676300578,0.7398843930635838,0.8323699421965318,0.8670520231213873,0.8034682080924855,0.8670520231213873,0.8554913294797688,0.861271676300578,0.7283236994219653,0.6416184971098265,0.861271676300578,0.8439306358381503,0.44508670520231214,0.8554913294797688,0.8497109826589595,0.8323699421965318,0.5317919075144508,0.7514450867052023,0.6184971098265896,0.861271676300578,0.7687861271676301,0.5491329479768786,0.861271676300578,0,0.8439306358381503,0.6878612716763006,0.8554913294797688,0.5895953757225434,0.7167630057803468,0.49710982658959535,0.8786127167630058,0.7341040462427746,0.8497109826589595,0.5549132947976878,0.5549132947976878,0.8728323699421965,0.7456647398843931,0.8092485549132948,0.7803468208092486,0.653179190751445,0.8554913294797688,0.8497109826589595,0.6011560693641619,0.8439306358381503,0.8670520231213873,0.6069364161849711,0.8497109826589595,0.8439306358381503,0.5144508670520231,0.7803468208092486,0.8554913294797688,0.6994219653179191,0.5260115606936416,0.861271676300578,0,0.815028901734104,0.7167630057803468,0.4913294797687861,0.8554913294797688,0.861271676300578,0.8728323699421965,0.8670520231213873,0.7283236994219653,0.861271676300578,0.8497109826589595,0.7456647398843931,0.7803468208092486,0.5549132947976878,0.8265895953757225,0.815028901734104,0.6820809248554913,0.861271676300578,0.0,0.884393063583815,0.8786127167630058,0.8554913294797688,0.8497109826589595,0.6820809248554913,0,0.6127167630057804,0.8265895953757225,0.7514450867052023,0.8670520231213873,0.861271676300578,0.8265895953757225,0.8728323699421965,0.5549132947976878,0.8439306358381503,0.8497109826589595,0.7630057803468208,0.7976878612716763,0.8554913294797688,0.8728323699421965,0.8554913294797688
44484,0.8554913294797688,0.8554913294797688,0.7341040462427746,0.861271676300578,0.7167630057803468,0.8554913294797688,0.8786127167630058,0.8786127167630058,0.8786127167630058,0.7514450867052023,0.6184971098265896,0.7572254335260116,0.861271676300578,0.8786127167630058,0.861271676300578,0.6473988439306358,0.8728323699421965,0.7630057803468208,0.7745664739884393,0.861271676300578,0.7630057803468208,0.8439306358381503,0.861271676300578,0.6184971098265896,0.5317919075144508,0.861271676300578,0.7456647398843931,0.8497109826589595,0.8439306358381503,0.5549132947976878,0.5549132947976878,0.7341040462427746,0.8497109826589595,0.6184971098265896,0.8670520231213873,0.7803468208092486,0.884393063583815,0.6184971098265896,0.8554913294797688,0,0.6358381502890174,0.8497109826589595,0.6994219653179191,0.6184971098265896,0.8497109826589595,0.8728323699421965,0.6994219653179191,0.5549132947976878,0.8034682080924855,0.6184971098265896,0.8728323699421965,0.884393063583815,0.6763005780346821,0.8497109826589595,0.5953757225433526,0.7514450867052023,0.861271676300578,0.7398843930635838,0.8208092485549133,0.8670520231213873,0.8034682080924855,0.8670520231213873,0.8554913294797688,0.861271676300578,0.7052023121387283,0.6416184971098265,0.8786127167630058,0.8497109826589595,0.44508670520231214,0.8497109826589595,0.8554913294797688,0.838150289017341,0.5028901734104047,0.7514450867052023,0.6184971098265896,0.8786127167630058,0.7687861271676301,0.5491329479768786,0.861271676300578,0,0.8497109826589595,0.7572254335260116,0.8554913294797688,0.5202312138728323,0.7167630057803468,0.5260115606936416,0.8786127167630058,0.7341040462427746,0.8497109826589595,0.5549132947976878,0.5549132947976878,0.8728323699421965,0.7456647398843931,0.815028901734104,0.7630057803468208,0.653179190751445,0.8554913294797688,0.8670520231213873,0.6820809248554913,0.8439306358381503,0.884393063583815,0.6069364161849711,0.8497109826589595,0.8439306358381503,0.5722543352601156,0.7803468208092486,0.861271676300578,0.6994219653179191,0.48554913294797686,0.861271676300578,0,0.8092485549132948,0.7167630057803468,0.5202312138728323,0.8497109826589595,0.8670520231213873,0.8901734104046243,0.8554913294797688,0.7283236994219653,0.861271676300578,0.861271676300578,0.7456647398843931,0.7861271676300579,0.5549132947976878,0.8208092485549133,0.8208092485549133,0.630057803468208,0.8728323699421965,0.0,0.8728323699421965,0.861271676300578,0.8554913294797688,0.8497109826589595,0.6820809248554913,0,0.6127167630057804,0.8554913294797688,0.7514450867052023,0.861271676300578,0.8670520231213873,0.8265895953757225,0.861271676300578,0.5549132947976878,0.8439306358381503,0.8497109826589595,0.7398843930635838,0.7976878612716763,0.8497109826589595,0.8554913294797688,0.8497109826589595
44485,0.8554913294797688,0.8554913294797688,0.7341040462427746,0.8497109826589595,0.7167630057803468,0.861271676300578,0.8786127167630058,0.8670520231213873,0.8728323699421965,0.7167630057803468,0.6184971098265896,0.7745664739884393,0.861271676300578,0.8786127167630058,0.861271676300578,0.6473988439306358,0.8728323699421965,0.7630057803468208,0.7745664739884393,0.861271676300578,0.7630057803468208,0.8439306358381503,0.861271676300578,0.6184971098265896,0.5433526011560693,0.861271676300578,0.7398843930635838,0.8497109826589595,0.8439306358381503,0.5549132947976878,0.5549132947976878,0.6878612716763006,0.838150289017341,0.6184971098265896,0.8497109826589595,0.7803468208092486,0.8728323699421965,0.6184971098265896,0.8439306358381503,0,0.6358381502890174,0.8439306358381503,0.6994219653179191,0.6358381502890174,0.8497109826589595,0.8497109826589595,0.6994219653179191,0.5549132947976878,0.815028901734104,0.6184971098265896,0.8670520231213873,0.884393063583815,0.6763005780346821,0.8497109826589595,0.5664739884393064,0.7514450867052023,0.861271676300578,0.7283236994219653,0.838150289017341,0.8670520231213873,0.8034682080924855,0.8670520231213873,0.861271676300578,0.861271676300578,0.6994219653179191,0.6416184971098265,0.8670520231213873,0.838150289017341,0.44508670520231214,0.8497109826589595,0.8497109826589595,0.8497109826589595,0.5664739884393064,0.7514450867052023,0.6184971098265896,0.8670520231213873,0.7687861271676301,0.5491329479768786,0.861271676300578,0,0.8670520231213873,0.7052023121387283,0.861271676300578,0.5028901734104047,0.7167630057803468,0.5202312138728323,0.8786127167630058,0.7341040462427746,0.8554913294797688,0.5549132947976878,0.5549132947976878,0.8728323699421965,0.7456647398843931,0.8092485549132948,0.7745664739884393,0.653179190751445,0.8554913294797688,0.861271676300578,0.6358381502890174,0.8439306358381503,0.8497109826589595,0.6011560693641619,0.861271676300578,0.8439306358381503,0.5260115606936416,0.7803468208092486,0.8497109826589595,0.6994219653179191,0.5260115606936416,0.861271676300578,0,0.8092485549132948,0.7167630057803468,0.45664739884393063,0.861271676300578,0.8670520231213873,0.8786127167630058,0.8670520231213873,0.7283236994219653,0.8670520231213873,0.8554913294797688,0.7456647398843931,0.7861271676300579,0.5549132947976878,0.8323699421965318,0.8208092485549133,0.7109826589595376,0.8554913294797688,0.0,0.884393063583815,0.8728323699421965,0.861271676300578,0.8497109826589595,0.6763005780346821,0,0.6127167630057804,0.8323699421965318,0.7514450867052023,0.8728323699421965,0.8786127167630058,0.8265895953757225,0.8728323699421965,0.5549132947976878,0.8439306358381503,0.8670520231213873,0.7572254335260116,0.7976878612716763,0.8439306358381503,0.8554913294797688,0.8554913294797688
44486,0.8554913294797688,0.8554913294797688,0.7341040462427746,0.8439306358381503,0.7167630057803468,0.8554913294797688,0.8786127167630058,0.8786127167630058,0.8786127167630058,0.7283236994219653,0.6184971098265896,0.7630057803468208,0.8554913294797688,0.8786127167630058,0.861271676300578,0.6473988439306358,0.8728323699421965,0.7630057803468208,0.7745664739884393,0.861271676300578,0.7630057803468208,0.8439306358381503,0.8728323699421965,0.6184971098265896,0.5202312138728323,0.861271676300578,0.7572254335260116,0.8497109826589595,0.838150289017341,0.5549132947976878,0.5549132947976878,0.7514450867052023,0.8554913294797688,0.6184971098265896,0.861271676300578,0.7803468208092486,0.8728323699421965,0.6184971098265896,0.8554913294797688,0,0.6358381502890174,0.8497109826589595,0.6994219653179191,0.6242774566473989,0.8439306358381503,0.8265895953757225,0.6994219653179191,0.5549132947976878,0.791907514450867,0.6184971098265896,0.8728323699421965,0.8728323699421965,0.6763005780346821,0.8497109826589595,0.4913294797687861,0.7514450867052023,0.8554913294797688,0.7514450867052023,0.8208092485549133,0.8670520231213873,0.8034682080924855,0.8728323699421965,0.861271676300578,0.861271676300578,0.7225433526011561,0.6416184971098265,0.8728323699421965,0.8323699421965318,0.44508670520231214,0.8497109826589595,0.8497109826589595,0.8265895953757225,0.5144508670520231,0.7514450867052023,0.6184971098265896,0.884393063583815,0.7687861271676301,0.5491329479768786,0.861271676300578,0,0.8497109826589595,0.7109826589595376,0.8670520231213873,0.5375722543352601,0.7167630057803468,0.5375722543352601,0.8786127167630058,0.7341040462427746,0.8497109826589595,0.5549132947976878,0.5549132947976878,0.8728323699421965,0.7456647398843931,0.7976878612716763,0.7803468208092486,0.653179190751445,0.8554913294797688,0.8670520231213873,0.6647398843930635,0.8439306358381503,0.861271676300578,0.6069364161849711,0.8554913294797688,0.8439306358381503,0.5491329479768786,0.7803468208092486,0.8497109826589595,0.6994219653179191,0.49710982658959535,0.8554913294797688,0,0.8034682080924855,0.7167630057803468,0.43352601156069365,0.8728323699421965,0.8728323699421965,0.861271676300578,0.8728323699421965,0.7283236994219653,0.8670520231213873,0.8554913294797688,0.7456647398843931,0.7976878612716763,0.5549132947976878,0.838150289017341,0.815028901734104,0.7572254335260116,0.8786127167630058,0.0,0.8728323699421965,0.861271676300578,0.8554913294797688,0.8497109826589595,0.6878612716763006,0,0.6127167630057804,0.8728323699421965,0.7514450867052023,0.861271676300578,0.8786127167630058,0.8265895953757225,0.861271676300578,0.5549132947976878,0.8439306358381503,0.8497109826589595,0.7572254335260116,0.7976878612716763,0.8554913294797688,0.8554913294797688,0.8439306358381503
44487,0.8497109826589595,0.8554913294797688,0.7341040462427746,0.8497109826589595,0.7167630057803468,0.8554913294797688,0.8786127167630058,0.8728323699421965,0.8901734104046243,0.7398843930635838,0.6184971098265896,0.7803468208092486,0.8554913294797688,0.8670520231213873,0.861271676300578,0.6473988439306358,0.8728323699421965,0.7630057803468208,0.7745664739884393,0.8497109826589595,0.7630057803468208,0.8554913294797688,0.8728323699421965,0.6184971098265896,0.5317919075144508,0.861271676300578,0.7572254335260116,0.8497109826589595,0.838150289017341,0.5549132947976878,0.5549132947976878,0.7225433526011561,0.8439306358381503,0.6184971098265896,0.8670520231213873,0.7803468208092486,0.8497109826589595,0.6184971098265896,0.8497109826589595,0,0.6358381502890174,0.8554913294797688,0.6994219653179191,0.6242774566473989,0.8554913294797688,0.8497109826589595,0.6994219653179191,0.5549132947976878,0.7803468208092486,0.6184971098265896,0.8728323699421965,0.8786127167630058,0.6763005780346821,0.8497109826589595,0.5491329479768786,0.7514450867052023,0.8497109826589595,0.7283236994219653,0.815028901734104,0.8670520231213873,0.8034682080924855,0.8439306358381503,0.8554913294797688,0.861271676300578,0.7572254335260116,0.6416184971098265,0.861271676300578,0.838150289017341,0.44508670520231214,0.8497109826589595,0.8554913294797688,0.838150289017341,0.5144508670520231,0.7514450867052023,0.6184971098265896,0.884393063583815,0.7687861271676301,0.5491329479768786,0.861271676300578,0,0.8497109826589595,0.6589595375722543,0.8670520231213873,0.44508670520231214,0.7167630057803468,0.5606936416184971,0.8786127167630058,0.7341040462427746,0.8554913294797688,0.5549132947976878,0.5549132947976878,0.8728323699421965,0.7456647398843931,0.8092485549132948,0.7687861271676301,0.653179190751445,0.8497109826589595,0.861271676300578,0.6184971098265896,0.8439306358381503,0.8670520231213873,0.6069364161849711,0.8497109826589595,0.8439306358381503,0.5144508670520231,0.7803468208092486,0.8497109826589595,0.6994219653179191,0.4682080924855491,0.8670520231213873,0,0.8092485549132948,0.7167630057803468,0.5549132947976878,0.8554913294797688,0.8670520231213873,0.8786127167630058,0.8670520231213873,0.7283236994219653,0.8670520231213873,0.8554913294797688,0.7456647398843931,0.7745664739884393,0.5549132947976878,0.8265895953757225,0.8092485549132948,0.6011560693641619,0.8728323699421965,0.0,0.8786127167630058,0.8786127167630058,0.861271676300578,0.8497109826589595,0.6705202312138728,0,0.6127167630057804,0.8497109826589595,0.7514450867052023,0.8670520231213873,0.8728323699421965,0.8265895953757225,0.8728323699421965,0.5549132947976878,0.8497109826589595,0.8439306358381503,0.7225433526011561,0.7976878612716763,0.8497109826589595,0.8670520231213873,0.8497109826589595
44488,0.962,0.966,0.946,0.946,0.644,0.958,0.966,0.962,0.962,0.946,0.946,0.946,0.954,0.962,0.946,0.946,0.966,0.96,0.946,0.946,0.946,0.946,0.946,0.946,0.946,0.946,0.974,0.966,0.946,0.946,0.946,0.946,0.964,0.946,0.972,0.968,0.776,0.946,0.946,0,0.944,0.938,0.938,0.946,0.962,0.748,0.942,0.946,0.946,0.0,0.968,0.962,0.944,0.944,0.946,0.954,0.958,0.966,0.946,0.946,0.968,0.946,0.946,0.946,0.966,0.946,0.974,0.946,0.946,0.946,0.958,0.96,0.946,0.958,0.946,0.96,0.954,0.946,0.946,0,0.946,0.952,0.946,0.946,0.708,0.946,0.946,0.946,0.946,0.946,0.946,0.962,0.95,0.966,0.968,0.786,0.954,0.948,0.946,0.946,0.97,0.964,0.954,0.946,0.946,0.946,0.97,0.938,0.944,0.946,0,0.968,0.708,0.94,0.962,0.966,0.96,0.952,0.946,0.97,0.946,0.726,0.946,0.946,0.962,0.964,0.946,0.956,0.792,0.974,0.968,0.94,0.95,0.946,0,0.946,0.964,0.946,0.966,0.956,0.966,0.94,0.946,0.946,0.946,0.96,0.916,0.946,0.942,0.956
44489,0.976,0.974,0.946,0.946,0.63,0.974,0.964,0.98,0.984,0.946,0.946,0.946,0.966,0.968,0.946,0.946,0.968,0.966,0.948,0.946,0.946,0.946,0.946,0.946,0.946,0.946,0.984,0.962,0.946,0.946,0.946,0.946,0.984,0.946,0.986,0.976,0.494,0.946,0.946,0,0.942,0.948,0.946,0.946,0.976,0.552,0.946,0.946,0.948,0.0,0.976,0.98,0.948,0.946,0.946,0.962,0.974,0.984,0.946,0.946,0.976,0.946,0.946,0.946,0.976,0.942,0.984,0.946,0.946,0.946,0.964,0.968,0.946,0.958,0.946,0.98,0.958,0.946,0.946,0,0.946,0.946,0.946,0.94,0.732,0.946,0.946,0.948,0.946,0.946,0.946,0.972,0.962,0.982,0.986,0.852,0.948,0.946,0.946,0.946,0.986,0.988,0.96,0.948,0.948,0.932,0.982,0.946,0.948,0.946,0,0.982,0.732,0.944,0.98,0.988,0.98,0.97,0.948,0.98,0.946,0.672,0.946,0.946,0.968,0.972,0.946,0.966,0.812,0.988,0.984,0.946,0.956,0.946,0,0.942,0.986,0.946,0.982,0.976,0.964,0.94,0.946,0.946,0.946,0.96,0.856,0.946,0.944,0.962
44490,0.98,0.978,0.946,0.946,0.634,0.976,0.972,0.976,0.984,0.946,0.946,0.946,0.968,0.962,0.946,0.946,0.976,0.976,0.948,0.946,0.948,0.946,0.946,0.946,0.946,0.946,0.978,0.972,0.946,0.946,0.946,0.946,0.984,0.946,0.988,0.984,0.854,0.946,0.946,0,0.946,0.944,0.93,0.946,0.984,0.778,0.954,0.946,0.946,0.0,0.974,0.976,0.948,0.946,0.946,0.974,0.984,0.986,0.956,0.948,0.984,0.946,0.946,0.946,0.984,0.946,0.99,0.946,0.946,0.946,0.97,0.97,0.946,0.966,0.946,0.988,0.968,0.946,0.946,0,0.946,0.946,0.946,0.948,0.7,0.946,0.946,0.948,0.946,0.946,0.946,0.968,0.942,0.986,0.988,0.774,0.97,0.972,0.946,0.95,0.984,0.986,0.982,0.946,0.948,0.948,0.986,0.93,0.948,0.948,0,0.982,0.7,0.944,0.978,0.988,0.978,0.966,0.946,0.984,0.946,0.652,0.946,0.946,0.98,0.986,0.946,0.976,0.776,0.99,0.986,0.948,0.966,0.946,0,0.946,0.982,0.946,0.99,0.976,0.974,0.936,0.946,0.946,0.946,0.978,0.93,0.946,0.946,0.97
44491,0.986,0.974,0.946,0.946,0.652,0.974,0.97,0.982,0.984,0.946,0.946,0.946,0.97,0.984,0.946,0.946,0.97,0.97,0.946,0.946,0.95,0.946,0.946,0.946,0.946,0.946,0.986,0.97,0.946,0.946,0.946,0.946,0.984,0.946,0.988,0.986,0.83,0.946,0.946,0,0.944,0.94,0.94,0.946,0.982,0.51,0.94,0.946,0.946,0.0,0.984,0.982,0.946,0.946,0.946,0.966,0.982,0.982,0.946,0.946,0.99,0.946,0.946,0.946,0.984,0.946,0.988,0.946,0.946,0.946,0.97,0.958,0.946,0.958,0.946,0.98,0.962,0.946,0.946,0,0.946,0.946,0.946,0.944,0.726,0.946,0.946,0.946,0.946,0.946,0.946,0.98,0.976,0.988,0.984,0.88,0.968,0.964,0.946,0.946,0.986,0.984,0.97,0.946,0.946,0.94,0.986,0.94,0.946,0.946,0,0.988,0.726,0.944,0.982,0.988,0.968,0.966,0.946,0.986,0.946,0.72,0.946,0.946,0.984,0.984,0.946,0.97,0.748,0.986,0.988,0.946,0.954,0.946,0,0.946,0.982,0.946,0.988,0.978,0.97,0.976,0.946,0.952,0.946,0.978,0.932,0.946,0.946,0.972
44492,0.978,0.976,0.946,0.946,0.634,0.972,0.962,0.974,0.97,0.946,0.946,0.946,0.954,0.98,0.946,0.946,0.96,0.972,0.946,0.946,0.948,0.946,0.946,0.946,0.946,0.946,0.97,0.962,0.946,0.946,0.946,0.946,0.978,0.946,0.984,0.99,0.602,0.946,0.946,0,0.946,0.944,0.934,0.946,0.978,0.562,0.934,0.946,0.946,0.0,0.98,0.978,0.948,0.946,0.946,0.964,0.974,0.972,0.948,0.946,0.99,0.946,0.946,0.946,0.97,0.946,0.988,0.946,0.946,0.946,0.958,0.964,0.946,0.958,0.946,0.97,0.964,0.946,0.946,0,0.946,0.946,0.946,0.948,0.686,0.946,0.946,0.946,0.946,0.946,0.946,0.984,0.964,0.984,0.974,0.762,0.96,0.952,0.946,0.948,0.972,0.974,0.968,0.946,0.946,0.934,0.982,0.934,0.946,0.946,0,0.976,0.686,0.946,0.976,0.986,0.972,0.95,0.946,0.982,0.946,0.688,0.946,0.946,0.974,0.974,0.946,0.968,0.768,0.984,0.988,0.94,0.95,0.946,0,0.946,0.976,0.946,0.984,0.97,0.962,0.974,0.946,0.946,0.946,0.966,0.872,0.946,0.944,0.966
44493,0.0,0.524,0.512,0.518,0.0,0.5,0.562,0.496,0.484,0.534,0.488,0.0,0.484,0.0,0.54,0.512,0.542,0.48,0.0,0.494,0.536,0.0,0.524,0.496,0.518,0.54,0.476,0.542,0.512,0.518,0.498,0.546,0.512,0.51,0.56,0.53,0.494,0.532,0.506,0,0.504,0.0,0.504,0.532,0.498,0.508,0.52,0.504,0.504,0.0,0.0,0.462,0.532,0.47,0.49,0.498,0.526,0.51,0.52,0.518,0.502,0.516,0.538,0.54,0.542,0.504,0.532,0.518,0.524,0.514,0.502,0.494,0.526,0.49,0.52,0.484,0.5,0.504,0.54,0,0.528,0.504,0.514,0.0,0.544,0.47,0.54,0.0,0.526,0.536,0.504,0.526,0.486,0.0,0.514,0.0,0.0,0.52,0.526,0.504,0.496,0.568,0.504,0.486,0.494,0.0,0.504,0.504,0.512,0.512,0,0.0,0.544,0.536,0.0,0.51,0.52,0.518,0.0,0.522,0.492,0.528,0.508,0.504,0.548,0.536,0.554,0.498,0.512,0.492,0.52,0.0,0.5,0.544,0,0.504,0.506,0.508,0.512,0.502,0.544,0.53,0.518,0.516,0.492,0.52,0.0,0.474,0.0,0.5
44494,0.0,0.492,0.5,0.486,0.0,0.464,0.514,0.506,0.51,0.468,0.486,0.0,0.48,0.0,0.478,0.506,0.538,0.47,0.0,0.49,0.49,0.0,0.442,0.496,0.47,0.478,0.536,0.534,0.464,0.502,0.48,0.5,0.452,0.498,0.498,0.504,0.502,0.504,0.482,0,0.504,0.0,0.5,0.468,0.504,0.46,0.5,0.498,0.51,0.0,0.0,0.48,0.53,0.472,0.492,0.464,0.474,0.494,0.49,0.474,0.47,0.476,0.47,0.478,0.52,0.504,0.534,0.502,0.504,0.488,0.498,0.502,0.456,0.478,0.478,0.482,0.478,0.504,0.478,0,0.418,0.51,0.518,0.0,0.48,0.492,0.504,0.0,0.474,0.484,0.504,0.48,0.526,0.0,0.514,0.0,0.0,0.502,0.482,0.482,0.502,0.472,0.454,0.474,0.484,0.0,0.498,0.5,0.0,0.476,0,0.0,0.48,0.49,0.0,0.524,0.49,0.474,0.0,0.474,0.454,0.486,0.57,0.504,0.466,0.514,0.468,0.484,0.518,0.51,0.494,0.0,0.486,0.556,0,0.504,0.48,0.49,0.496,0.456,0.512,0.514,0.49,0.466,0.48,0.53,0.0,0.47,0.0,0.466
44495,0.0,0.502,0.52,0.52,0.0,0.474,0.532,0.474,0.494,0.526,0.518,0.0,0.472,0.0,0.494,0.492,0.52,0.504,0.0,0.484,0.498,0.0,0.506,0.496,0.51,0.494,0.514,0.522,0.506,0.512,0.5,0.518,0.494,0.518,0.492,0.5,0.494,0.502,0.538,0,0.504,0.0,0.504,0.5,0.46,0.484,0.496,0.526,0.536,0.0,0.0,0.456,0.518,0.506,0.468,0.498,0.452,0.502,0.486,0.498,0.502,0.502,0.488,0.494,0.472,0.504,0.51,0.5,0.504,0.484,0.484,0.524,0.476,0.516,0.532,0.49,0.494,0.504,0.494,0,0.526,0.552,0.516,0.0,0.532,0.518,0.544,0.0,0.498,0.526,0.504,0.518,0.494,0.0,0.494,0.0,0.0,0.506,0.506,0.49,0.498,0.506,0.474,0.482,0.494,0.0,0.476,0.504,0.0,0.504,0,0.0,0.532,0.492,0.0,0.51,0.516,0.478,0.0,0.488,0.488,0.49,0.548,0.504,0.512,0.47,0.49,0.516,0.512,0.458,0.502,0.0,0.49,0.514,0,0.504,0.472,0.496,0.488,0.496,0.546,0.476,0.542,0.474,0.488,0.48,0.0,0.498,0.0,0.512
44496,0.0,0.518,0.516,0.512,0.0,0.508,0.516,0.494,0.528,0.538,0.504,0.0,0.514,0.0,0.496,0.536,0.508,0.51,0.0,0.536,0.52,0.0,0.542,0.496,0.502,0.496,0.528,0.506,0.524,0.514,0.522,0.516,0.52,0.5,0.508,0.496,0.484,0.488,0.52,0,0.504,0.0,0.504,0.532,0.526,0.542,0.478,0.508,0.5,0.0,0.0,0.512,0.518,0.524,0.506,0.524,0.506,0.496,0.522,0.502,0.466,0.52,0.552,0.496,0.494,0.504,0.508,0.552,0.504,0.534,0.558,0.524,0.544,0.52,0.512,0.536,0.53,0.504,0.496,0,0.508,0.504,0.532,0.0,0.5,0.502,0.524,0.0,0.548,0.502,0.504,0.528,0.504,0.0,0.554,0.0,0.0,0.476,0.498,0.518,0.524,0.526,0.544,0.536,0.52,0.0,0.518,0.504,0.0,0.528,0,0.0,0.5,0.488,0.0,0.49,0.542,0.518,0.0,0.508,0.532,0.506,0.516,0.504,0.518,0.548,0.528,0.514,0.51,0.474,0.468,0.0,0.536,0.512,0,0.504,0.524,0.518,0.532,0.522,0.528,0.53,0.516,0.526,0.524,0.534,0.0,0.526,0.0,0.538
44497,0.0,0.518,0.504,0.516,0.0,0.52,0.482,0.51,0.52,0.534,0.508,0.0,0.508,0.0,0.494,0.514,0.492,0.502,0.0,0.508,0.526,0.494,0.526,0.496,0.51,0.494,0.49,0.492,0.522,0.522,0.516,0.522,0.54,0.48,0.514,0.514,0.516,0.49,0.494,0,0.504,0.0,0.516,0.536,0.502,0.516,0.516,0.524,0.516,0.0,0.0,0.518,0.464,0.49,0.54,0.534,0.51,0.506,0.536,0.522,0.506,0.518,0.51,0.494,0.484,0.504,0.53,0.484,0.504,0.53,0.492,0.506,0.538,0.516,0.518,0.516,0.538,0.504,0.494,0,0.506,0.512,0.508,0.0,0.524,0.52,0.504,0.0,0.516,0.494,0.504,0.518,0.502,0.0,0.53,0.504,0.0,0.52,0.54,0.53,0.53,0.518,0.536,0.486,0.518,0.0,0.526,0.516,0.538,0.528,0,0.0,0.524,0.546,0.0,0.49,0.492,0.508,0.48,0.506,0.534,0.508,0.51,0.504,0.54,0.52,0.506,0.514,0.504,0.53,0.504,0.454,0.538,0.504,0,0.504,0.53,0.488,0.524,0.508,0.514,0.506,0.518,0.534,0.538,0.522,0.0,0.514,0.49,0.536
44498,0.772,0.724,0.712,0.76,0.624,0.772,0.776,0.764,0.764,0.752,0.708,0.7,0.768,0.712,0.7,0.716,0.764,0.704,0.704,0.756,0.716,0.724,0.756,0.712,0.7,0.7,0.684,0.796,0.764,0.7,0.7,0.708,0.76,0.732,0.756,0.788,0.78,0.7,0.74,0,0.736,0.756,0.7,0.744,0.768,0.764,0.7,0.7,0.76,0.696,0.724,0.752,0.652,0.732,0.7,0.708,0.772,0.716,0.7,0.752,0.748,0.756,0.752,0.7,0.704,0.696,0.756,0.776,0.3,0.752,0.712,0.804,0.7,0.732,0.744,0.792,0.688,0.7,0.7,0,0.7,0.7,0.752,0.612,0.628,0.688,0.76,0.7,0.744,0.7,0.7,0.688,0.712,0.716,0.752,0.704,0.788,0.744,0.7,0.74,0.772,0.656,0.768,0.768,0.696,0.712,0.764,0.7,0.672,0.76,0,0.664,0.628,0.684,0.772,0.76,0.78,0.728,0.696,0.76,0.72,0.756,0.704,0.7,0.704,0.72,0.7,0.76,0.604,0.772,0.776,0.772,0.744,0.7,0,0.736,0.788,0.708,0.732,0.752,0.792,0.736,0.7,0.76,0.748,0.768,0.712,0.76,0.756,0.756

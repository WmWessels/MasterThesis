0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44559,0.786,0.71,0.708,0.728,0.602,0.782,0.548,0.746,0.676,0.556,0.502,0.59,0.7,0.0,0.61,0.502,0.554,0.672,0.706,0.71,0.706,0.688,0.7,0.498,0.48,0.61,0.486,0.554,0.758,0.0,0.502,0.528,0.0,0.502,0.666,0.614,0.724,0.502,0.694,0,0.502,0.676,0.628,0.502,0.784,0.654,0.628,0.502,0.606,0.0,0.0,0.614,0.506,0.51,0.478,0.71,0.688,0.556,0.602,0.556,0.658,0.698,0.706,0.61,0.54,0.502,0.702,0.812,0.502,0.74,0.736,0.598,0.482,0.69,0.502,0.576,0.7,0.502,0.61,0,0.598,0.59,0.708,0.0,0.602,0.492,0.554,0.698,0.696,0.56,0.502,0.674,0.728,0.716,0.534,0.57,0.782,0.68,0.594,0.688,0.684,0.542,0.786,0.748,0.502,0.518,0.804,0.628,0.476,0.738,0,0.592,0.602,0.498,0.0,0.686,0.642,0.692,0.69,0.77,0.61,0.57,0.53,0.502,0.692,0.696,0.5,0.654,0.542,0.716,0.706,0.652,0.556,0.53,0,0.502,0.754,0.704,0.814,0.704,0.552,0.754,0.608,0.774,0.678,0.508,0.538,0.694,0.666,0.0
44560,0.804,0.778,0.722,0.708,0.608,0.816,0.598,0.75,0.722,0.542,0.502,0.618,0.728,0.0,0.612,0.502,0.594,0.726,0.706,0.728,0.73,0.67,0.716,0.498,0.52,0.612,0.5,0.594,0.786,0.0,0.502,0.542,0.0,0.502,0.622,0.606,0.742,0.502,0.65,0,0.502,0.602,0.572,0.502,0.788,0.704,0.572,0.502,0.574,0.0,0.0,0.628,0.528,0.502,0.522,0.704,0.726,0.574,0.632,0.588,0.578,0.724,0.726,0.612,0.53,0.502,0.652,0.682,0.502,0.714,0.73,0.578,0.498,0.634,0.502,0.574,0.722,0.502,0.612,0,0.59,0.584,0.658,0.0,0.608,0.522,0.592,0.726,0.744,0.562,0.502,0.76,0.768,0.684,0.598,0.622,0.8,0.652,0.594,0.716,0.682,0.548,0.804,0.692,0.506,0.552,0.81,0.572,0.0,0.778,0,0.628,0.608,0.508,0.0,0.636,0.63,0.694,0.72,0.822,0.642,0.572,0.536,0.502,0.732,0.788,0.53,0.686,0.592,0.726,0.634,0.67,0.55,0.558,0,0.502,0.726,0.71,0.82,0.698,0.594,0.696,0.608,0.8,0.716,0.536,0.562,0.714,0.686,0.0
44561,0.788,0.668,0.648,0.666,0.56,0.818,0.578,0.714,0.658,0.562,0.502,0.588,0.686,0.0,0.592,0.502,0.584,0.654,0.64,0.694,0.66,0.59,0.714,0.498,0.546,0.592,0.484,0.576,0.796,0.0,0.502,0.556,0.0,0.502,0.664,0.55,0.71,0.502,0.648,0,0.502,0.588,0.576,0.502,0.79,0.626,0.576,0.502,0.562,0.0,0.0,0.554,0.518,0.526,0.514,0.636,0.72,0.534,0.568,0.544,0.578,0.666,0.676,0.592,0.506,0.502,0.664,0.73,0.502,0.712,0.678,0.586,0.484,0.606,0.502,0.57,0.666,0.502,0.592,0,0.594,0.522,0.618,0.0,0.56,0.496,0.546,0.644,0.688,0.546,0.502,0.688,0.642,0.666,0.52,0.562,0.8,0.67,0.54,0.644,0.612,0.566,0.798,0.642,0.516,0.514,0.82,0.576,0.0,0.764,0,0.602,0.56,0.49,0.0,0.646,0.608,0.634,0.59,0.784,0.588,0.534,0.536,0.502,0.716,0.686,0.556,0.652,0.544,0.69,0.644,0.562,0.578,0.512,0,0.502,0.72,0.654,0.822,0.652,0.58,0.64,0.594,0.67,0.674,0.544,0.54,0.69,0.578,0.0
44562,0.714,0.682,0.684,0.676,0.594,0.712,0.59,0.68,0.668,0.566,0.502,0.622,0.69,0.0,0.626,0.502,0.586,0.698,0.682,0.67,0.68,0.656,0.66,0.498,0.526,0.626,0.506,0.576,0.69,0.0,0.502,0.5,0.0,0.502,0.704,0.628,0.696,0.502,0.678,0,0.502,0.65,0.546,0.502,0.716,0.632,0.546,0.502,0.612,0.0,0.0,0.59,0.564,0.566,0.488,0.678,0.682,0.532,0.632,0.598,0.638,0.668,0.658,0.626,0.516,0.502,0.718,0.732,0.502,0.66,0.692,0.59,0.51,0.656,0.502,0.582,0.69,0.502,0.626,0,0.628,0.568,0.664,0.0,0.594,0.538,0.586,0.686,0.668,0.598,0.502,0.658,0.672,0.662,0.516,0.586,0.722,0.666,0.6,0.672,0.636,0.538,0.724,0.698,0.484,0.582,0.706,0.546,0.494,0.728,0,0.592,0.594,0.496,0.0,0.676,0.614,0.66,0.716,0.746,0.62,0.618,0.576,0.502,0.664,0.678,0.564,0.664,0.556,0.682,0.716,0.704,0.562,0.562,0,0.502,0.694,0.692,0.724,0.654,0.588,0.656,0.61,0.708,0.656,0.564,0.604,0.69,0.706,0.0
44563,0.722,0.662,0.684,0.73,0.0,0.722,0.692,0.73,0.712,0.664,0.586,0.712,0.716,0.0,0.692,0.642,0.432,0.688,0.692,0.746,0.682,0.718,0.74,0.502,0.516,0.692,0.53,0.696,0.744,0.0,0.5,0.682,0.0,0.618,0.748,0.69,0.706,0.708,0.722,0,0.534,0.718,0.672,0.678,0.712,0.662,0.672,0.568,0.708,0.526,0.0,0.708,0.61,0.662,0.486,0.694,0.746,0.69,0.52,0.698,0.624,0.732,0.732,0.692,0.606,0.536,0.736,0.714,0.5,0.74,0.726,0.694,0.488,0.714,0.588,0.678,0.672,0.5,0.692,0,0.704,0.0,0.748,0.0,0.0,0.506,0.702,0.684,0.722,0.708,0.5,0.658,0.632,0.704,0.704,0.662,0.748,0.758,0.648,0.716,0.696,0.68,0.752,0.732,0.492,0.71,0.722,0.672,0.0,0.752,0,0.694,0.0,0.482,0.0,0.72,0.696,0.72,0.686,0.7,0.714,0.668,0.626,0.0,0.676,0.656,0.0,0.726,0.0,0.71,0.73,0.74,0.694,0.602,0,0.536,0.714,0.698,0.74,0.738,0.696,0.694,0.624,0.736,0.726,0.686,0.686,0.738,0.736,0.0
44564,0.702,0.702,0.682,0.71,0.0,0.75,0.7,0.728,0.714,0.66,0.532,0.688,0.704,0.0,0.698,0.62,0.514,0.652,0.666,0.702,0.654,0.706,0.708,0.554,0.512,0.7,0.506,0.694,0.724,0.0,0.5,0.642,0.0,0.614,0.72,0.69,0.718,0.698,0.732,0,0.516,0.726,0.672,0.646,0.728,0.678,0.672,0.518,0.702,0.518,0.0,0.702,0.572,0.676,0.498,0.674,0.714,0.682,0.522,0.688,0.652,0.7,0.708,0.698,0.578,0.512,0.712,0.754,0.5,0.708,0.702,0.692,0.484,0.688,0.57,0.672,0.678,0.5,0.698,0,0.702,0.0,0.712,0.0,0.0,0.53,0.71,0.682,0.722,0.69,0.5,0.698,0.66,0.692,0.684,0.63,0.718,0.704,0.586,0.706,0.72,0.632,0.738,0.71,0.51,0.67,0.728,0.672,0.0,0.742,0,0.684,0.0,0.476,0.0,0.712,0.704,0.706,0.666,0.734,0.7,0.686,0.594,0.0,0.654,0.686,0.0,0.706,0.0,0.696,0.708,0.744,0.728,0.554,0,0.512,0.71,0.682,0.74,0.72,0.692,0.688,0.644,0.736,0.704,0.658,0.682,0.72,0.732,0.0
44565,0.702,0.644,0.578,0.71,0.0,0.704,0.644,0.724,0.702,0.662,0.538,0.672,0.702,0.0,0.654,0.592,0.706,0.576,0.596,0.692,0.618,0.698,0.698,0.512,0.518,0.654,0.508,0.65,0.688,0.0,0.5,0.634,0.0,0.596,0.732,0.662,0.688,0.66,0.694,0,0.5,0.694,0.662,0.636,0.71,0.668,0.662,0.542,0.67,0.522,0.0,0.692,0.506,0.66,0.51,0.564,0.708,0.712,0.534,0.69,0.658,0.694,0.686,0.654,0.58,0.504,0.706,0.722,0.5,0.692,0.686,0.67,0.548,0.664,0.612,0.686,0.554,0.504,0.654,0,0.666,0.0,0.728,0.0,0.0,0.488,0.672,0.58,0.692,0.668,0.5,0.638,0.608,0.692,0.7,0.624,0.74,0.706,0.594,0.698,0.67,0.668,0.722,0.684,0.51,0.67,0.71,0.662,0.484,0.718,0,0.68,0.0,0.542,0.0,0.72,0.704,0.69,0.616,0.698,0.692,0.66,0.556,0.0,0.69,0.636,0.0,0.7,0.0,0.694,0.7,0.712,0.72,0.538,0,0.504,0.704,0.59,0.722,0.714,0.652,0.648,0.614,0.702,0.696,0.668,0.676,0.706,0.728,0.0
44566,0.766,0.734,0.652,0.75,0.0,0.788,0.682,0.778,0.76,0.686,0.574,0.712,0.756,0.0,0.742,0.594,0.552,0.626,0.658,0.756,0.66,0.77,0.758,0.522,0.494,0.742,0.508,0.674,0.776,0.0,0.5,0.684,0.0,0.572,0.736,0.728,0.75,0.7,0.778,0,0.55,0.764,0.646,0.628,0.782,0.692,0.646,0.518,0.748,0.52,0.0,0.748,0.534,0.676,0.516,0.628,0.77,0.656,0.52,0.686,0.724,0.77,0.768,0.742,0.688,0.55,0.75,0.756,0.5,0.762,0.754,0.702,0.516,0.678,0.558,0.712,0.622,0.5,0.742,0,0.712,0.0,0.778,0.0,0.0,0.48,0.704,0.644,0.756,0.708,0.5,0.746,0.696,0.742,0.688,0.684,0.786,0.74,0.596,0.67,0.732,0.636,0.78,0.782,0.53,0.686,0.772,0.646,0.478,0.77,0,0.73,0.0,0.458,0.0,0.752,0.74,0.764,0.694,0.762,0.718,0.686,0.592,0.0,0.712,0.742,0.0,0.764,0.0,0.72,0.772,0.77,0.716,0.594,0,0.55,0.752,0.646,0.798,0.762,0.676,0.724,0.658,0.758,0.752,0.684,0.698,0.77,0.758,0.0
44567,0.718,0.686,0.566,0.7,0.0,0.72,0.686,0.712,0.714,0.692,0.596,0.692,0.704,0.0,0.712,0.49,0.698,0.596,0.562,0.698,0.57,0.716,0.692,0.518,0.508,0.694,0.528,0.688,0.69,0.0,0.5,0.696,0.0,0.606,0.712,0.646,0.71,0.55,0.718,0,0.494,0.744,0.64,0.48,0.7,0.672,0.64,0.578,0.676,0.0,0.0,0.72,0.528,0.676,0.52,0.58,0.72,0.648,0.526,0.688,0.638,0.696,0.702,0.712,0.588,0.488,0.704,0.724,0.5,0.7,0.708,0.674,0.546,0.706,0.65,0.68,0.58,0.5,0.712,0,0.696,0.0,0.716,0.0,0.0,0.476,0.706,0.57,0.694,0.69,0.5,0.674,0.666,0.724,0.682,0.692,0.708,0.722,0.56,0.694,0.71,0.664,0.7,0.736,0.482,0.622,0.708,0.64,0.0,0.73,0,0.698,0.0,0.528,0.0,0.704,0.682,0.692,0.658,0.716,0.694,0.7,0.59,0.0,0.658,0.664,0.0,0.702,0.0,0.71,0.72,0.734,0.69,0.546,0,0.488,0.718,0.558,0.72,0.708,0.68,0.66,0.582,0.7,0.704,0.676,0.692,0.706,0.722,0.0
44568,0.854,0.83,0.796,0.87,0.776,0.86,0.872,0.864,0.882,0.782,0.784,0.752,0.874,0.838,0.752,0.82,0.864,0.788,0.792,0.856,0.778,0.864,0.856,0.832,0.752,0.752,0.768,0.85,0.86,0.752,0.752,0.812,0.876,0.828,0.858,0.826,0.814,0.752,0.86,0,0.73,0.858,0.752,0.83,0.862,0.828,0.752,0.752,0.826,0.836,0.852,0.868,0.75,0.824,0.752,0.812,0.868,0.848,0.79,0.858,0.814,0.852,0.854,0.752,0.792,0.734,0.868,0.854,0.752,0.852,0.842,0.842,0.752,0.832,0.83,0.874,0.8,0.752,0.752,0,0.764,0.752,0.864,0.0,0.776,0.742,0.858,0.804,0.854,0.754,0.752,0.834,0.824,0.824,0.824,0.778,0.874,0.858,0.752,0.854,0.84,0.772,0.872,0.824,0.75,0.78,0.858,0.752,0.744,0.87,0,0.82,0.776,0.736,0.854,0.866,0.876,0.848,0.79,0.858,0.842,0.748,0.768,0.752,0.864,0.852,0.752,0.862,0.0,0.858,0.846,0.856,0.836,0.788,0,0.754,0.86,0.796,0.854,0.858,0.844,0.856,0.752,0.866,0.854,0.806,0.786,0.866,0.868,0.866
44569,0.84,0.824,0.802,0.84,0.726,0.848,0.838,0.842,0.862,0.824,0.77,0.752,0.86,0.808,0.752,0.79,0.836,0.792,0.79,0.85,0.79,0.84,0.844,0.812,0.752,0.752,0.79,0.82,0.846,0.752,0.752,0.824,0.842,0.828,0.84,0.826,0.808,0.752,0.848,0,0.722,0.83,0.752,0.794,0.846,0.788,0.752,0.752,0.826,0.824,0.822,0.862,0.774,0.794,0.752,0.79,0.838,0.818,0.794,0.828,0.83,0.846,0.836,0.752,0.802,0.722,0.852,0.852,0.752,0.844,0.842,0.838,0.752,0.804,0.82,0.856,0.784,0.752,0.752,0,0.796,0.75,0.846,0.0,0.726,0.742,0.844,0.8,0.842,0.752,0.752,0.818,0.828,0.822,0.842,0.73,0.838,0.834,0.752,0.834,0.834,0.742,0.832,0.842,0.752,0.802,0.854,0.752,0.722,0.828,0,0.816,0.726,0.726,0.856,0.844,0.85,0.848,0.774,0.846,0.836,0.718,0.764,0.752,0.82,0.84,0.752,0.85,0.0,0.836,0.838,0.834,0.822,0.77,0,0.736,0.838,0.798,0.822,0.858,0.814,0.844,0.752,0.836,0.836,0.836,0.74,0.832,0.852,0.836
44570,0.854,0.81,0.81,0.846,0.782,0.85,0.862,0.862,0.864,0.844,0.798,0.752,0.858,0.846,0.752,0.814,0.844,0.792,0.818,0.848,0.814,0.848,0.852,0.82,0.752,0.752,0.772,0.834,0.84,0.752,0.752,0.826,0.862,0.832,0.85,0.852,0.834,0.752,0.848,0,0.748,0.858,0.752,0.818,0.862,0.816,0.752,0.752,0.808,0.844,0.85,0.854,0.758,0.844,0.752,0.812,0.844,0.84,0.79,0.832,0.814,0.848,0.846,0.752,0.778,0.748,0.858,0.862,0.752,0.85,0.85,0.868,0.752,0.838,0.846,0.858,0.804,0.752,0.752,0,0.774,0.778,0.85,0.0,0.782,0.754,0.848,0.822,0.846,0.752,0.752,0.832,0.84,0.824,0.838,0.784,0.85,0.852,0.752,0.838,0.856,0.768,0.848,0.824,0.75,0.77,0.864,0.752,0.742,0.848,0,0.82,0.782,0.752,0.854,0.862,0.868,0.858,0.786,0.844,0.848,0.76,0.77,0.752,0.824,0.822,0.752,0.862,0.0,0.844,0.854,0.848,0.834,0.772,0,0.762,0.844,0.814,0.842,0.858,0.852,0.862,0.752,0.844,0.848,0.85,0.802,0.85,0.866,0.858
44571,0.872,0.834,0.802,0.878,0.782,0.886,0.88,0.878,0.882,0.836,0.786,0.752,0.884,0.856,0.752,0.822,0.888,0.832,0.82,0.872,0.806,0.866,0.874,0.844,0.752,0.752,0.768,0.868,0.878,0.752,0.752,0.826,0.878,0.846,0.878,0.816,0.862,0.752,0.876,0,0.722,0.852,0.752,0.846,0.884,0.838,0.752,0.752,0.82,0.856,0.852,0.874,0.792,0.84,0.752,0.794,0.88,0.844,0.824,0.866,0.79,0.87,0.87,0.752,0.8,0.724,0.886,0.872,0.752,0.874,0.84,0.874,0.752,0.826,0.852,0.874,0.816,0.752,0.752,0,0.786,0.752,0.874,0.724,0.782,0.74,0.868,0.814,0.874,0.752,0.752,0.872,0.82,0.848,0.852,0.782,0.868,0.874,0.752,0.882,0.856,0.78,0.88,0.844,0.75,0.798,0.884,0.752,0.748,0.88,0,0.828,0.782,0.73,0.864,0.888,0.896,0.88,0.812,0.876,0.856,0.736,0.77,0.752,0.856,0.858,0.752,0.88,0.0,0.868,0.88,0.868,0.858,0.78,0,0.766,0.89,0.802,0.878,0.888,0.856,0.864,0.752,0.862,0.88,0.858,0.788,0.886,0.87,0.89
44572,0.838,0.822,0.802,0.85,0.776,0.858,0.866,0.858,0.866,0.826,0.778,0.752,0.858,0.822,0.752,0.838,0.868,0.8,0.804,0.854,0.808,0.856,0.852,0.826,0.752,0.752,0.79,0.862,0.84,0.752,0.752,0.838,0.864,0.812,0.842,0.786,0.81,0.752,0.848,0,0.734,0.848,0.752,0.832,0.848,0.816,0.752,0.752,0.822,0.854,0.82,0.856,0.796,0.804,0.752,0.808,0.856,0.842,0.79,0.826,0.798,0.85,0.854,0.752,0.816,0.734,0.85,0.852,0.752,0.852,0.84,0.832,0.752,0.798,0.836,0.858,0.822,0.752,0.752,0,0.782,0.752,0.84,0.0,0.776,0.746,0.854,0.796,0.85,0.774,0.752,0.838,0.848,0.82,0.844,0.774,0.854,0.836,0.752,0.83,0.836,0.752,0.854,0.818,0.752,0.792,0.854,0.752,0.742,0.86,0,0.812,0.776,0.732,0.838,0.848,0.866,0.842,0.8,0.85,0.832,0.734,0.778,0.752,0.84,0.818,0.752,0.846,0.0,0.838,0.856,0.84,0.852,0.788,0,0.75,0.852,0.804,0.848,0.862,0.858,0.848,0.752,0.846,0.858,0.832,0.786,0.858,0.858,0.852
44578,0.614,0.54,0.528,0.586,0.498,0.606,0.516,0.586,0.588,0.538,0.556,0.538,0.608,0.0,0.58,0.524,0.556,0.494,0.51,0.59,0.538,0.538,0.58,0.55,0.536,0.58,0.524,0.54,0.6,0.0,0.538,0.538,0.0,0.534,0.59,0.554,0.574,0.542,0.58,0,0.564,0.574,0.552,0.57,0.604,0.526,0.562,0.538,0.502,0.566,0.0,0.572,0.51,0.518,0.54,0.488,0.596,0.542,0.538,0.516,0.566,0.59,0.596,0.58,0.518,0.424,0.584,0.582,0.112,0.594,0.568,0.542,0.53,0.544,0.584,0.56,0.508,0.538,0.58,0,0.55,0.538,0.576,0.0,0.498,0.504,0.562,0.51,0.588,0.532,0.538,0.57,0.52,0.596,0.536,0.578,0.602,0.572,0.538,0.5,0.556,0.162,0.594,0.57,0.546,0.572,0.622,0.552,0.512,0.602,0,0.602,0.498,0.484,0.0,0.592,0.594,0.598,0.562,0.594,0.546,0.572,0.562,0.538,0.508,0.502,0.546,0.598,0.0,0.56,0.59,0.564,0.528,0.532,0,0.562,0.544,0.53,0.572,0.61,0.54,0.568,0.538,0.606,0.584,0.542,0.538,0.604,0.564,0.0
44579,0.586,0.554,0.53,0.56,0.522,0.574,0.522,0.544,0.564,0.562,0.558,0.538,0.582,0.0,0.572,0.494,0.564,0.482,0.51,0.574,0.516,0.556,0.566,0.56,0.536,0.572,0.488,0.54,0.584,0.0,0.538,0.588,0.0,0.564,0.556,0.552,0.544,0.552,0.58,0,0.564,0.556,0.55,0.548,0.576,0.53,0.55,0.538,0.526,0.588,0.0,0.54,0.516,0.488,0.514,0.508,0.578,0.542,0.538,0.514,0.506,0.572,0.578,0.572,0.548,0.458,0.564,0.57,0.112,0.586,0.574,0.536,0.54,0.546,0.566,0.55,0.504,0.536,0.572,0,0.544,0.512,0.578,0.0,0.522,0.47,0.562,0.514,0.58,0.542,0.538,0.552,0.51,0.574,0.558,0.566,0.582,0.566,0.538,0.514,0.528,0.16,0.57,0.548,0.514,0.562,0.584,0.55,0.506,0.574,0,0.558,0.522,0.48,0.0,0.554,0.572,0.576,0.54,0.556,0.55,0.588,0.532,0.538,0.54,0.534,0.538,0.58,0.44,0.536,0.588,0.564,0.526,0.506,0,0.574,0.53,0.54,0.562,0.59,0.54,0.532,0.538,0.58,0.568,0.564,0.538,0.564,0.556,0.0
44580,0.562,0.55,0.548,0.568,0.506,0.558,0.494,0.562,0.582,0.554,0.546,0.538,0.57,0.0,0.554,0.502,0.552,0.474,0.53,0.566,0.546,0.542,0.572,0.518,0.544,0.554,0.536,0.534,0.574,0.0,0.538,0.552,0.0,0.534,0.558,0.554,0.564,0.54,0.568,0,0.526,0.564,0.56,0.54,0.562,0.514,0.56,0.538,0.534,0.554,0.0,0.56,0.492,0.494,0.538,0.514,0.568,0.538,0.538,0.51,0.526,0.558,0.578,0.554,0.536,0.436,0.552,0.566,0.112,0.566,0.566,0.544,0.53,0.522,0.546,0.532,0.516,0.542,0.554,0,0.542,0.538,0.57,0.0,0.506,0.482,0.562,0.534,0.582,0.544,0.538,0.516,0.478,0.554,0.558,0.538,0.57,0.56,0.538,0.484,0.572,0.162,0.558,0.546,0.532,0.0,0.564,0.56,0.0,0.556,0,0.566,0.506,0.49,0.0,0.566,0.58,0.554,0.542,0.566,0.542,0.536,0.546,0.538,0.494,0.506,0.538,0.566,0.372,0.56,0.526,0.558,0.53,0.52,0,0.522,0.552,0.548,0.564,0.574,0.534,0.534,0.538,0.56,0.582,0.558,0.538,0.552,0.558,0.0
44581,0.564,0.49,0.514,0.572,0.404,0.574,0.512,0.568,0.562,0.558,0.548,0.538,0.582,0.0,0.56,0.526,0.546,0.478,0.524,0.574,0.526,0.544,0.56,0.54,0.54,0.56,0.508,0.528,0.58,0.0,0.538,0.57,0.0,0.554,0.576,0.558,0.56,0.548,0.564,0,0.556,0.55,0.566,0.52,0.57,0.528,0.554,0.538,0.556,0.536,0.0,0.546,0.512,0.482,0.542,0.49,0.558,0.552,0.538,0.522,0.53,0.562,0.572,0.56,0.54,0.486,0.564,0.566,0.112,0.566,0.578,0.54,0.528,0.522,0.544,0.554,0.508,0.538,0.56,0,0.548,0.538,0.57,0.0,0.404,0.464,0.544,0.534,0.566,0.536,0.538,0.522,0.524,0.568,0.55,0.538,0.566,0.578,0.538,0.526,0.538,0.158,0.568,0.56,0.52,0.56,0.564,0.566,0.504,0.564,0,0.562,0.404,0.514,0.0,0.574,0.572,0.566,0.54,0.556,0.542,0.54,0.542,0.538,0.54,0.5,0.538,0.566,0.0,0.57,0.56,0.552,0.538,0.51,0,0.554,0.542,0.504,0.558,0.57,0.528,0.55,0.538,0.564,0.578,0.538,0.538,0.56,0.552,0.0
44582,0.586,0.52,0.556,0.564,0.514,0.572,0.476,0.598,0.558,0.552,0.538,0.538,0.58,0.0,0.532,0.496,0.542,0.494,0.524,0.564,0.552,0.534,0.562,0.526,0.522,0.532,0.494,0.55,0.572,0.0,0.538,0.552,0.0,0.522,0.558,0.52,0.562,0.54,0.576,0,0.52,0.548,0.538,0.554,0.566,0.484,0.538,0.538,0.562,0.532,0.0,0.554,0.51,0.444,0.504,0.508,0.58,0.55,0.538,0.48,0.496,0.558,0.576,0.532,0.494,0.424,0.52,0.58,0.112,0.56,0.56,0.554,0.544,0.564,0.55,0.562,0.504,0.572,0.532,0,0.54,0.54,0.564,0.0,0.514,0.488,0.544,0.518,0.576,0.542,0.538,0.488,0.544,0.576,0.554,0.554,0.568,0.55,0.538,0.498,0.522,0.172,0.58,0.576,0.536,0.532,0.558,0.538,0.512,0.58,0,0.566,0.514,0.514,0.0,0.542,0.574,0.568,0.544,0.556,0.548,0.54,0.55,0.538,0.498,0.51,0.538,0.572,0.0,0.568,0.536,0.55,0.524,0.556,0,0.53,0.552,0.554,0.576,0.57,0.55,0.514,0.538,0.57,0.566,0.55,0.538,0.55,0.544,0.0
44583,0.5454545454545454,0.4965034965034965,0.27972027972027974,0.5244755244755245,0.6363636363636364,0.5594405594405595,0.6783216783216783,0.7202797202797203,0.6853146853146853,0.3916083916083916,0.5664335664335665,0.5034965034965035,0.6153846153846154,0.5524475524475524,0.15384615384615385,0.6643356643356644,0.5804195804195804,0.5244755244755245,0.32867132867132864,0.3776223776223776,0.2727272727272727,0.5594405594405595,0.32867132867132864,0.4825174825174825,0.07692307692307693,0.15384615384615385,0.15384615384615385,0.6293706293706294,0.46853146853146854,0.0,0.1048951048951049,0.38461538461538464,0.6223776223776224,0.5174825174825175,0.5244755244755245,0.2727272727272727,0.08391608391608392,0.38461538461538464,0.4825174825174825,0,0.2867132867132867,0.6293706293706294,0.16083916083916083,0.7062937062937062,0.5104895104895105,0.08391608391608392,0.15384615384615385,0.18181818181818182,0.4825174825174825,0.4405594405594406,0.5104895104895105,0.6923076923076923,0.13286713286713286,0.4825174825174825,0.07692307692307693,0.46853146853146854,0.6433566433566433,0.2517482517482518,0.2937062937062937,0.3916083916083916,0.32867132867132864,0.36363636363636365,0.4405594405594406,0.15384615384615385,0.27972027972027974,0.7062937062937062,0.5034965034965035,0.6153846153846154,0.09090909090909091,0.46853146853146854,0.6013986013986014,0.13986013986013987,0.0979020979020979,0.34265734265734266,0.46853146853146854,0.6993006993006993,0.5034965034965035,0.1888111888111888,0.15384615384615385,0,0.1048951048951049,0.13986013986013987,0.6153846153846154,0.08391608391608392,0.6223776223776224,0.09090909090909091,0.3986013986013986,0.32867132867132864,0.43356643356643354,0.1048951048951049,0.1048951048951049,0.3706293706293706,0.46853146853146854,0.6503496503496503,0.4195804195804196,0.6363636363636364,0.5874125874125874,0.5034965034965035,0.1048951048951049,0.32867132867132864,0.6503496503496503,0.1888111888111888,0.5874125874125874,0.46853146853146854,0.04895104895104895,0.44755244755244755,0.6153846153846154,0.16083916083916083,0.07692307692307693,0.6153846153846154,0,0.6643356643356644,0.6433566433566433,0.04195804195804196,0.5524475524475524,0.5524475524475524,0.6293706293706294,0.46853146853146854,0.45454545454545453,0.5314685314685315,0.1888111888111888,0.2867132867132867,0.1888111888111888,0.1048951048951049,0.43356643356643354,0.42657342657342656,0.13286713286713286,0.6923076923076923,0.0,0.6293706293706294,0.48951048951048953,0.6013986013986014,0.38461538461538464,0.18181818181818182,0,0.6643356643356644,0.6643356643356644,0.2937062937062937,0.6643356643356644,0.6783216783216783,0.6293706293706294,0.46153846153846156,0.21678321678321677,0.5244755244755245,0.4405594405594406,0.32167832167832167,0.5804195804195804,0.5734265734265734,0.6083916083916084,0.4195804195804196

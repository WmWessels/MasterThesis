0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44419,0.652,0.614,0.572,0.704,0.0,0.694,0.596,0.684,0.68,0.628,0.526,0.494,0.684,0.0,0.592,0.54,0.608,0.622,0.562,0.704,0.588,0.684,0.676,0.512,0.512,0.592,0.532,0.606,0.692,0.69,0.554,0.614,0.7,0.508,0.63,0.604,0.67,0.55,0.692,0,0.508,0.63,0.58,0.532,0.696,0.64,0.58,0.528,0.518,0.0,0.0,0.662,0.508,0.556,0.54,0.556,0.694,0.62,0.478,0.568,0.572,0.686,0.688,0.592,0.59,0.51,0.632,0.702,0.566,0.67,0.692,0.69,0.522,0.61,0.578,0.66,0.582,0.5,0.592,0,0.66,0.0,0.682,0.0,0.0,0.512,0.596,0.542,0.686,0.642,0.5,0.648,0.616,0.658,0.62,0.498,0.7,0.63,0.536,0.56,0.66,0.606,0.708,0.666,0.508,0.568,0.706,0.58,0.0,0.72,0,0.54,0.0,0.536,0.0,0.62,0.698,0.688,0.646,0.66,0.622,0.588,0.536,0.0,0.646,0.62,0.0,0.686,0.0,0.682,0.622,0.668,0.6,0.534,0,0.51,0.678,0.57,0.682,0.69,0.59,0.668,0.636,0.708,0.662,0.634,0.512,0.7,0.65,0.7
44420,0.68,0.616,0.548,0.692,0.0,0.676,0.606,0.68,0.692,0.656,0.454,0.512,0.68,0.0,0.606,0.496,0.626,0.564,0.52,0.686,0.572,0.64,0.694,0.5,0.502,0.606,0.516,0.63,0.692,0.688,0.492,0.646,0.682,0.51,0.682,0.614,0.664,0.536,0.688,0,0.476,0.606,0.564,0.506,0.678,0.626,0.566,0.462,0.562,0.0,0.0,0.65,0.512,0.562,0.462,0.56,0.71,0.606,0.524,0.546,0.58,0.698,0.678,0.606,0.61,0.478,0.648,0.664,0.49,0.688,0.672,0.668,0.516,0.626,0.48,0.646,0.536,0.5,0.606,0,0.67,0.0,0.674,0.0,0.0,0.552,0.612,0.514,0.692,0.652,0.5,0.62,0.612,0.652,0.688,0.534,0.692,0.648,0.478,0.522,0.652,0.574,0.7,0.644,0.56,0.604,0.682,0.564,0.516,0.706,0,0.504,0.0,0.512,0.0,0.652,0.672,0.688,0.61,0.662,0.656,0.6,0.542,0.0,0.606,0.608,0.0,0.676,0.0,0.672,0.64,0.588,0.634,0.542,0,0.478,0.682,0.538,0.684,0.676,0.6,0.638,0.642,0.69,0.688,0.63,0.508,0.708,0.616,0.674
44421,0.67,0.62,0.514,0.678,0.0,0.712,0.63,0.672,0.71,0.654,0.498,0.492,0.712,0.0,0.624,0.494,0.646,0.546,0.522,0.696,0.524,0.674,0.684,0.532,0.51,0.624,0.506,0.64,0.708,0.68,0.522,0.672,0.706,0.538,0.662,0.622,0.67,0.588,0.684,0,0.454,0.654,0.6,0.5,0.698,0.63,0.6,0.512,0.54,0.0,0.0,0.624,0.514,0.534,0.494,0.498,0.708,0.612,0.544,0.508,0.59,0.692,0.716,0.624,0.646,0.454,0.66,0.67,0.488,0.706,0.682,0.664,0.456,0.634,0.516,0.628,0.508,0.5,0.624,0,0.672,0.0,0.708,0.0,0.0,0.514,0.618,0.506,0.714,0.684,0.5,0.604,0.628,0.53,0.674,0.51,0.672,0.656,0.54,0.492,0.65,0.606,0.706,0.664,0.474,0.59,0.68,0.6,0.0,0.686,0,0.518,0.0,0.578,0.0,0.688,0.676,0.682,0.654,0.65,0.622,0.552,0.538,0.0,0.634,0.598,0.0,0.674,0.0,0.674,0.642,0.644,0.632,0.534,0,0.454,0.674,0.524,0.718,0.682,0.63,0.582,0.644,0.702,0.68,0.652,0.492,0.698,0.67,0.718
44422,0.66,0.62,0.514,0.714,0.0,0.688,0.63,0.684,0.7,0.674,0.482,0.49,0.692,0.0,0.624,0.494,0.646,0.546,0.522,0.688,0.524,0.668,0.692,0.532,0.526,0.624,0.532,0.64,0.712,0.692,0.512,0.616,0.694,0.538,0.656,0.622,0.676,0.586,0.696,0,0.454,0.648,0.6,0.5,0.696,0.642,0.6,0.514,0.552,0.0,0.0,0.65,0.514,0.534,0.508,0.498,0.688,0.612,0.488,0.508,0.578,0.71,0.7,0.624,0.616,0.454,0.674,0.666,0.508,0.726,0.69,0.64,0.542,0.634,0.528,0.642,0.508,0.5,0.624,0,0.672,0.0,0.7,0.0,0.0,0.52,0.618,0.506,0.7,0.65,0.5,0.602,0.628,0.542,0.634,0.51,0.676,0.674,0.496,0.492,0.676,0.656,0.696,0.662,0.51,0.59,0.696,0.6,0.0,0.694,0,0.488,0.0,0.504,0.0,0.668,0.686,0.69,0.654,0.658,0.664,0.552,0.522,0.0,0.624,0.598,0.0,0.682,0.0,0.676,0.64,0.638,0.632,0.534,0,0.454,0.696,0.524,0.69,0.696,0.63,0.582,0.658,0.706,0.684,0.67,0.492,0.71,0.68,0.704
44423,0.554,0.572,0.534,0.582,0.0,0.576,0.528,0.562,0.584,0.538,0.552,0.552,0.56,0.0,0.498,0.518,0.532,0.544,0.54,0.59,0.57,0.498,0.578,0.502,0.522,0.498,0.534,0.526,0.588,0.588,0.5,0.576,0.574,0.472,0.578,0.552,0.58,0.546,0.596,0,0.54,0.0,0.55,0.548,0.572,0.55,0.55,0.538,0.558,0.0,0.0,0.584,0.584,0.528,0.508,0.536,0.568,0.496,0.578,0.538,0.598,0.562,0.57,0.498,0.494,0.54,0.582,0.594,0.5,0.586,0.54,0.544,0.5,0.52,0.538,0.56,0.532,0.482,0.498,0,0.538,0.0,0.578,0.0,0.0,0.498,0.528,0.536,0.596,0.508,0.5,0.524,0.52,0.572,0.61,0.5,0.594,0.598,0.494,0.55,0.574,0.556,0.596,0.552,0.496,0.0,0.562,0.55,0.48,0.59,0,0.566,0.0,0.504,0.592,0.596,0.552,0.548,0.504,0.564,0.536,0.528,0.53,0.0,0.566,0.548,0.0,0.556,0.492,0.582,0.588,0.486,0.542,0.542,0,0.54,0.58,0.53,0.59,0.58,0.524,0.556,0.592,0.586,0.568,0.564,0.522,0.58,0.504,0.592
44424,0.624,0.564,0.526,0.626,0.516,0.602,0.516,0.624,0.59,0.59,0.53,0.566,0.582,0.0,0.584,0.54,0.54,0.556,0.566,0.622,0.574,0.568,0.606,0.542,0.48,0.584,0.534,0.49,0.62,0.596,0.5,0.558,0.604,0.532,0.594,0.532,0.592,0.542,0.61,0,0.538,0.0,0.574,0.536,0.634,0.538,0.574,0.528,0.514,0.0,0.594,0.616,0.562,0.5,0.542,0.54,0.642,0.552,0.596,0.564,0.504,0.622,0.622,0.584,0.522,0.534,0.592,0.584,0.5,0.618,0.58,0.58,0.492,0.588,0.54,0.578,0.548,0.518,0.584,0,0.566,0.0,0.6,0.0,0.0,0.542,0.528,0.574,0.614,0.554,0.5,0.536,0.552,0.58,0.586,0.534,0.634,0.584,0.524,0.548,0.59,0.52,0.658,0.58,0.47,0.496,0.62,0.574,0.0,0.644,0,0.602,0.0,0.554,0.594,0.616,0.582,0.6,0.514,0.598,0.58,0.568,0.586,0.0,0.552,0.526,0.0,0.59,0.484,0.612,0.586,0.534,0.532,0.55,0,0.534,0.614,0.546,0.642,0.6,0.49,0.564,0.574,0.636,0.598,0.572,0.546,0.654,0.55,0.6
44425,0.594,0.568,0.532,0.566,0.516,0.58,0.526,0.584,0.572,0.57,0.544,0.534,0.568,0.0,0.526,0.474,0.534,0.576,0.544,0.558,0.524,0.5,0.556,0.536,0.502,0.526,0.58,0.522,0.562,0.594,0.5,0.536,0.59,0.492,0.57,0.562,0.608,0.546,0.548,0,0.558,0.5,0.52,0.552,0.558,0.56,0.52,0.548,0.558,0.55,0.0,0.574,0.554,0.514,0.496,0.556,0.58,0.548,0.562,0.554,0.528,0.558,0.566,0.526,0.568,0.552,0.58,0.568,0.5,0.578,0.566,0.544,0.484,0.492,0.544,0.574,0.558,0.502,0.526,0,0.52,0.0,0.548,0.0,0.0,0.522,0.536,0.558,0.566,0.544,0.5,0.524,0.54,0.552,0.55,0.5,0.576,0.594,0.514,0.524,0.586,0.542,0.572,0.538,0.492,0.0,0.556,0.52,0.0,0.596,0,0.57,0.0,0.494,0.562,0.59,0.576,0.562,0.496,0.582,0.55,0.578,0.518,0.0,0.558,0.522,0.0,0.564,0.518,0.574,0.56,0.5,0.55,0.558,0,0.552,0.566,0.516,0.602,0.594,0.516,0.552,0.564,0.586,0.546,0.552,0.522,0.592,0.5,0.574
44426,0.576,0.584,0.474,0.554,0.0,0.602,0.514,0.586,0.556,0.516,0.554,0.58,0.58,0.0,0.562,0.464,0.522,0.5,0.498,0.554,0.484,0.59,0.56,0.538,0.514,0.562,0.512,0.498,0.572,0.592,0.5,0.536,0.558,0.524,0.554,0.53,0.546,0.554,0.58,0,0.56,0.59,0.528,0.534,0.576,0.538,0.528,0.568,0.534,0.554,0.0,0.538,0.576,0.546,0.484,0.502,0.576,0.556,0.556,0.536,0.53,0.558,0.57,0.562,0.554,0.56,0.546,0.578,0.5,0.562,0.582,0.522,0.5,0.55,0.556,0.574,0.492,0.526,0.562,0,0.57,0.0,0.568,0.0,0.0,0.484,0.53,0.506,0.564,0.568,0.5,0.602,0.51,0.54,0.566,0.5,0.572,0.55,0.522,0.534,0.566,0.512,0.582,0.536,0.5,0.0,0.576,0.528,0.494,0.57,0,0.564,0.0,0.494,0.576,0.554,0.568,0.548,0.512,0.576,0.548,0.57,0.51,0.0,0.536,0.562,0.0,0.58,0.508,0.558,0.538,0.59,0.564,0.534,0,0.56,0.56,0.48,0.612,0.532,0.5,0.57,0.54,0.598,0.564,0.564,0.506,0.59,0.59,0.584
44427,0.57,0.54,0.562,0.582,0.0,0.57,0.54,0.556,0.588,0.576,0.506,0.562,0.558,0.0,0.566,0.494,0.524,0.554,0.534,0.58,0.514,0.546,0.576,0.476,0.522,0.566,0.536,0.546,0.582,0.578,0.5,0.566,0.596,0.484,0.574,0.552,0.528,0.522,0.56,0,0.508,0.57,0.55,0.51,0.538,0.562,0.55,0.502,0.546,0.0,0.0,0.556,0.59,0.522,0.53,0.52,0.608,0.532,0.568,0.548,0.544,0.57,0.572,0.566,0.538,0.506,0.556,0.578,0.5,0.57,0.568,0.554,0.518,0.548,0.51,0.556,0.544,0.508,0.566,0,0.554,0.0,0.586,0.0,0.0,0.514,0.554,0.556,0.586,0.584,0.5,0.546,0.544,0.556,0.588,0.536,0.566,0.574,0.534,0.532,0.536,0.528,0.594,0.544,0.506,0.53,0.55,0.55,0.524,0.592,0,0.578,0.0,0.51,0.594,0.572,0.556,0.566,0.532,0.568,0.556,0.544,0.546,0.0,0.482,0.574,0.0,0.58,0.51,0.558,0.568,0.566,0.552,0.556,0,0.506,0.558,0.56,0.596,0.576,0.544,0.576,0.562,0.57,0.568,0.584,0.516,0.57,0.546,0.594
44428,0.768,0.658,0.674,0.742,0.0,0.75,0.758,0.762,0.782,0.73,0.708,0.738,0.77,0.0,0.664,0.714,0.778,0.68,0.704,0.75,0.704,0.754,0.738,0.692,0.52,0.658,0.516,0.756,0.742,0.0,0.5,0.716,0.76,0.706,0.772,0.654,0.744,0.7,0.738,0,0.666,0.782,0.638,0.718,0.764,0.704,0.638,0.71,0.712,0.698,0.0,0.758,0.648,0.698,0.484,0.666,0.754,0.71,0.636,0.704,0.65,0.752,0.736,0.664,0.644,0.666,0.73,0.77,0.5,0.756,0.77,0.738,0.532,0.726,0.712,0.764,0.674,0.5,0.664,0,0.764,0.0,0.762,0.0,0.0,0.552,0.756,0.67,0.752,0.758,0.5,0.696,0.712,0.774,0.762,0.0,0.772,0.76,0.606,0.738,0.754,0.718,0.752,0.768,0.47,0.726,0.748,0.638,0.0,0.764,0,0.732,0.0,0.472,0.0,0.75,0.754,0.76,0.734,0.762,0.728,0.726,0.662,0.0,0.668,0.686,0.0,0.758,0.0,0.762,0.73,0.762,0.724,0.65,0,0.666,0.762,0.672,0.758,0.766,0.752,0.684,0.734,0.746,0.746,0.716,0.704,0.756,0.77,0.762
44429,0.732,0.66,0.666,0.718,0.0,0.728,0.708,0.746,0.732,0.702,0.682,0.666,0.724,0.0,0.658,0.674,0.706,0.648,0.686,0.708,0.682,0.724,0.706,0.656,0.5,0.658,0.48,0.712,0.72,0.0,0.5,0.694,0.74,0.66,0.736,0.648,0.706,0.67,0.716,0,0.638,0.746,0.614,0.678,0.728,0.692,0.614,0.684,0.66,0.67,0.0,0.746,0.634,0.628,0.486,0.626,0.72,0.702,0.662,0.698,0.616,0.72,0.718,0.658,0.662,0.644,0.734,0.75,0.5,0.714,0.726,0.716,0.458,0.686,0.674,0.734,0.67,0.5,0.658,0,0.716,0.0,0.73,0.0,0.0,0.472,0.696,0.672,0.718,0.724,0.5,0.698,0.69,0.714,0.724,0.0,0.734,0.738,0.62,0.72,0.706,0.656,0.72,0.686,0.512,0.676,0.734,0.614,0.0,0.724,0,0.694,0.0,0.512,0.0,0.728,0.74,0.72,0.69,0.706,0.702,0.712,0.654,0.0,0.668,0.66,0.0,0.72,0.0,0.734,0.724,0.73,0.718,0.644,0,0.644,0.734,0.662,0.74,0.728,0.714,0.708,0.714,0.722,0.712,0.706,0.658,0.724,0.74,0.75
44430,0.734,0.682,0.618,0.726,0.0,0.744,0.718,0.748,0.73,0.682,0.69,0.674,0.742,0.0,0.66,0.676,0.708,0.646,0.668,0.716,0.666,0.72,0.712,0.66,0.53,0.66,0.496,0.708,0.734,0.0,0.5,0.694,0.742,0.678,0.754,0.674,0.714,0.638,0.728,0,0.654,0.756,0.634,0.67,0.756,0.702,0.634,0.682,0.698,0.686,0.0,0.734,0.568,0.65,0.54,0.648,0.72,0.72,0.646,0.668,0.654,0.706,0.728,0.66,0.616,0.652,0.772,0.75,0.5,0.722,0.754,0.704,0.508,0.67,0.694,0.718,0.644,0.5,0.66,0,0.728,0.0,0.724,0.0,0.0,0.476,0.694,0.626,0.734,0.734,0.5,0.688,0.672,0.718,0.718,0.0,0.728,0.75,0.582,0.708,0.726,0.63,0.742,0.708,0.478,0.688,0.756,0.634,0.0,0.75,0,0.718,0.0,0.458,0.0,0.748,0.746,0.746,0.734,0.756,0.696,0.666,0.624,0.0,0.684,0.66,0.0,0.74,0.0,0.76,0.75,0.756,0.716,0.61,0,0.652,0.728,0.62,0.75,0.758,0.726,0.684,0.73,0.728,0.708,0.708,0.616,0.738,0.738,0.742
44431,0.736,0.672,0.666,0.772,0.0,0.772,0.736,0.772,0.756,0.718,0.7,0.692,0.766,0.0,0.66,0.678,0.752,0.644,0.688,0.76,0.686,0.766,0.756,0.66,0.516,0.66,0.496,0.726,0.778,0.0,0.5,0.718,0.772,0.69,0.76,0.678,0.76,0.702,0.776,0,0.662,0.758,0.63,0.686,0.76,0.716,0.63,0.704,0.712,0.696,0.0,0.744,0.628,0.716,0.528,0.626,0.758,0.704,0.68,0.728,0.69,0.752,0.758,0.66,0.67,0.662,0.74,0.774,0.5,0.766,0.754,0.722,0.48,0.662,0.692,0.756,0.638,0.5,0.66,0,0.762,0.0,0.77,0.0,0.0,0.488,0.746,0.676,0.768,0.738,0.5,0.71,0.692,0.72,0.732,0.0,0.766,0.758,0.622,0.744,0.742,0.684,0.776,0.75,0.5,0.7,0.756,0.63,0.0,0.778,0,0.694,0.0,0.496,0.0,0.768,0.748,0.774,0.696,0.732,0.742,0.704,0.688,0.0,0.718,0.672,0.0,0.778,0.0,0.76,0.746,0.77,0.734,0.644,0,0.662,0.79,0.672,0.768,0.75,0.728,0.72,0.722,0.774,0.768,0.738,0.654,0.766,0.766,0.758
44432,0.734,0.68,0.67,0.73,0.0,0.738,0.73,0.736,0.748,0.728,0.706,0.666,0.742,0.0,0.65,0.69,0.736,0.68,0.678,0.73,0.688,0.722,0.732,0.678,0.486,0.644,0.464,0.728,0.732,0.0,0.5,0.744,0.73,0.662,0.75,0.706,0.728,0.662,0.742,0,0.66,0.756,0.618,0.664,0.744,0.696,0.618,0.702,0.704,0.69,0.0,0.712,0.598,0.63,0.488,0.638,0.712,0.668,0.608,0.664,0.672,0.722,0.724,0.65,0.64,0.66,0.728,0.748,0.5,0.744,0.74,0.71,0.51,0.684,0.718,0.736,0.62,0.5,0.65,0,0.74,0.0,0.748,0.0,0.0,0.524,0.746,0.67,0.73,0.746,0.5,0.698,0.65,0.724,0.712,0.0,0.756,0.754,0.604,0.718,0.742,0.678,0.748,0.724,0.504,0.686,0.752,0.618,0.0,0.728,0,0.686,0.0,0.514,0.0,0.734,0.744,0.74,0.7,0.712,0.682,0.686,0.66,0.0,0.648,0.69,0.0,0.736,0.0,0.72,0.73,0.744,0.724,0.63,0,0.66,0.748,0.664,0.736,0.73,0.732,0.704,0.736,0.74,0.718,0.708,0.652,0.722,0.756,0.736
44433,0.0,0.784,0.654,0.766,0.0,0.822,0.658,0.798,0.81,0.726,0.544,0.0,0.792,0.812,0.758,0.616,0.748,0.658,0.0,0.768,0.666,0.738,0.776,0.456,0.67,0.758,0.692,0.736,0.774,0.804,0.63,0.604,0.792,0.568,0.756,0.666,0.812,0.478,0.78,0,0.49,0.78,0.712,0.632,0.832,0.768,0.712,0.534,0.538,0.0,0.792,0.82,0.724,0.646,0.656,0.618,0.774,0.718,0.682,0.654,0.75,0.768,0.764,0.758,0.658,0.488,0.764,0.78,0.588,0.762,0.782,0.752,0.668,0.714,0.586,0.786,0.662,0.5,0.758,0,0.78,0.574,0.758,0.0,0.544,0.69,0.748,0.0,0.77,0.756,0.5,0.78,0.732,0.0,0.75,0.624,0.516,0.768,0.608,0.668,0.804,0.584,0.778,0.76,0.656,0.754,0.824,0.712,0.682,0.762,0,0.0,0.542,0.73,0.802,0.766,0.812,0.804,0.68,0.802,0.742,0.692,0.734,0.5,0.78,0.776,0.552,0.784,0.542,0.828,0.764,0.768,0.73,0.744,0,0.488,0.778,0.652,0.804,0.786,0.644,0.724,0.754,0.76,0.76,0.736,0.0,0.762,0.772,0.798
44434,0.0,0.788,0.632,0.772,0.0,0.812,0.636,0.81,0.832,0.758,0.568,0.0,0.798,0.774,0.734,0.608,0.744,0.704,0.0,0.768,0.674,0.676,0.764,0.532,0.672,0.734,0.73,0.698,0.766,0.81,0.64,0.724,0.792,0.596,0.798,0.684,0.816,0.488,0.74,0,0.528,0.768,0.682,0.616,0.804,0.8,0.682,0.592,0.542,0.0,0.804,0.804,0.706,0.65,0.626,0.654,0.804,0.758,0.676,0.642,0.756,0.77,0.764,0.734,0.702,0.532,0.774,0.776,0.528,0.772,0.752,0.73,0.682,0.7,0.596,0.798,0.68,0.5,0.734,0,0.748,0.582,0.764,0.66,0.548,0.722,0.71,0.0,0.766,0.744,0.5,0.798,0.704,0.0,0.766,0.594,0.55,0.78,0.61,0.672,0.802,0.656,0.796,0.71,0.678,0.704,0.834,0.682,0.706,0.786,0,0.0,0.548,0.744,0.828,0.78,0.802,0.778,0.672,0.82,0.692,0.666,0.72,0.5,0.756,0.788,0.542,0.776,0.538,0.852,0.788,0.768,0.754,0.722,0,0.532,0.794,0.64,0.806,0.788,0.62,0.766,0.794,0.764,0.77,0.73,0.0,0.786,0.766,0.774
44435,0.0,0.75,0.646,0.748,0.0,0.764,0.666,0.768,0.778,0.716,0.572,0.0,0.75,0.768,0.718,0.608,0.738,0.682,0.0,0.74,0.654,0.688,0.734,0.546,0.676,0.712,0.68,0.708,0.75,0.77,0.676,0.64,0.752,0.61,0.762,0.69,0.776,0.528,0.744,0,0.54,0.724,0.604,0.624,0.782,0.752,0.604,0.568,0.56,0.0,0.77,0.746,0.702,0.676,0.658,0.658,0.742,0.7,0.686,0.648,0.706,0.74,0.756,0.718,0.632,0.54,0.746,0.714,0.532,0.744,0.736,0.728,0.694,0.672,0.576,0.762,0.668,0.5,0.718,0,0.732,0.554,0.742,0.652,0.614,0.712,0.722,0.0,0.74,0.728,0.5,0.736,0.716,0.0,0.744,0.618,0.546,0.748,0.62,0.688,0.77,0.648,0.768,0.708,0.668,0.696,0.792,0.604,0.692,0.754,0,0.0,0.614,0.704,0.79,0.738,0.778,0.748,0.684,0.766,0.712,0.728,0.724,0.5,0.744,0.752,0.604,0.742,0.548,0.784,0.72,0.718,0.74,0.72,0,0.54,0.748,0.656,0.764,0.768,0.656,0.748,0.746,0.758,0.736,0.72,0.0,0.754,0.726,0.744
44436,0.0,0.742,0.65,0.76,0.0,0.768,0.676,0.78,0.764,0.726,0.568,0.0,0.762,0.722,0.714,0.632,0.732,0.696,0.0,0.746,0.654,0.716,0.738,0.506,0.678,0.71,0.682,0.74,0.75,0.766,0.642,0.684,0.758,0.6,0.752,0.724,0.774,0.52,0.75,0,0.536,0.756,0.662,0.652,0.764,0.722,0.662,0.574,0.548,0.0,0.736,0.764,0.698,0.682,0.64,0.65,0.776,0.682,0.688,0.654,0.746,0.73,0.728,0.714,0.68,0.536,0.748,0.744,0.55,0.746,0.722,0.75,0.694,0.674,0.586,0.762,0.674,0.5,0.714,0,0.718,0.594,0.742,0.718,0.576,0.674,0.714,0.0,0.746,0.72,0.5,0.732,0.716,0.0,0.742,0.616,0.536,0.75,0.622,0.66,0.786,0.674,0.766,0.712,0.654,0.722,0.766,0.662,0.696,0.77,0,0.0,0.576,0.708,0.758,0.75,0.768,0.756,0.694,0.756,0.724,0.696,0.72,0.5,0.698,0.752,0.562,0.762,0.512,0.77,0.752,0.746,0.738,0.726,0,0.536,0.746,0.65,0.772,0.772,0.642,0.736,0.732,0.762,0.748,0.726,0.0,0.758,0.756,0.748
44437,0.0,0.732,0.634,0.772,0.0,0.802,0.66,0.782,0.8,0.758,0.564,0.0,0.786,0.748,0.722,0.6,0.774,0.666,0.0,0.772,0.658,0.684,0.766,0.554,0.676,0.72,0.712,0.742,0.79,0.794,0.646,0.704,0.782,0.604,0.772,0.696,0.8,0.532,0.764,0,0.536,0.75,0.636,0.598,0.782,0.772,0.636,0.58,0.52,0.0,0.768,0.79,0.674,0.686,0.618,0.646,0.798,0.736,0.672,0.608,0.736,0.77,0.762,0.722,0.712,0.536,0.762,0.764,0.536,0.788,0.762,0.772,0.674,0.714,0.6,0.77,0.672,0.5,0.722,0,0.742,0.596,0.764,0.676,0.564,0.686,0.74,0.0,0.78,0.756,0.5,0.764,0.698,0.0,0.774,0.596,0.51,0.762,0.596,0.648,0.786,0.66,0.788,0.736,0.658,0.712,0.808,0.636,0.696,0.786,0,0.0,0.566,0.744,0.798,0.782,0.796,0.776,0.714,0.786,0.702,0.682,0.712,0.5,0.744,0.772,0.576,0.792,0.534,0.812,0.768,0.768,0.738,0.706,0,0.536,0.766,0.64,0.802,0.79,0.632,0.744,0.742,0.786,0.774,0.772,0.0,0.8,0.778,0.778
44438,0.582,0.58,0.534,0.564,0.0,0.59,0.518,0.596,0.58,0.562,0.546,0.554,0.574,0.0,0.498,0.518,0.54,0.54,0.54,0.548,0.568,0.522,0.568,0.502,0.488,0.498,0.542,0.524,0.564,0.562,0.5,0.566,0.576,0.472,0.628,0.552,0.59,0.546,0.586,0,0.54,0.506,0.554,0.554,0.576,0.57,0.554,0.536,0.538,0.0,0.0,0.58,0.606,0.538,0.498,0.536,0.566,0.514,0.532,0.498,0.508,0.554,0.542,0.498,0.542,0.54,0.596,0.578,0.5,0.546,0.526,0.566,0.498,0.52,0.538,0.584,0.532,0.484,0.498,0,0.56,0.0,0.578,0.0,0.0,0.474,0.542,0.536,0.53,0.516,0.5,0.558,0.508,0.574,0.574,0.528,0.58,0.578,0.496,0.52,0.554,0.546,0.58,0.506,0.486,0.506,0.566,0.554,0.51,0.57,0,0.562,0.0,0.524,0.604,0.6,0.576,0.554,0.504,0.55,0.488,0.546,0.548,0.0,0.55,0.566,0.0,0.556,0.492,0.606,0.592,0.48,0.532,0.542,0,0.54,0.572,0.53,0.592,0.556,0.514,0.558,0.56,0.572,0.536,0.58,0.522,0.572,0.51,0.584

0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44709,0.942,0.904,0.942,0.942,0.56,0.942,0.942,0.94,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.932,0.942,0.942,0,0.942,0.0,0.942,0.942,0.942,0.88,0.942,0.942,0.942,0.0,0.942,0.938,0.938,0.926,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.938,0.942,0.942,0.942,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.936,0.94,0.942,0.942,0,0.942,0.942,0.942,0.934,0.576,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0.932,0.906,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0,0.934,0.576,0.942,0.942,0.942,0.934,0.942,0.0,0.94,0.942,0.546,0.942,0.942,0.926,0.92,0.942,0.942,0.516,0.936,0.942,0.0,0.94,0.942,0,0.942,0.94,0.942,0.942,0.942,0.942,0.934,0.942,0.942,0.942,0.942,0.942,0.942,0.0,0.942
44710,0.942,0.924,0.942,0.942,0.544,0.942,0.942,0.94,0.932,0.942,0.942,0.942,0.942,0.938,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.926,0.942,0.942,0,0.942,0.942,0.942,0.942,0.942,0.802,0.942,0.942,0.942,0.0,0.94,0.936,0.942,0.912,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.942,0.942,0.942,0.938,0.942,0.942,0.942,0.932,0.942,0.942,0.942,0,0.942,0.942,0.942,0.94,0.572,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.892,0.942,0.942,0.942,0.942,0.922,0.898,0.942,0.942,0.942,0.938,0.942,0.942,0.942,0.942,0,0.936,0.57,0.942,0.942,0.942,0.936,0.942,0.926,0.94,0.942,0.648,0.942,0.942,0.904,0.902,0.942,0.942,0.468,0.932,0.942,0.928,0.942,0.942,0,0.942,0.942,0.942,0.94,0.942,0.942,0.904,0.942,0.942,0.942,0.942,0.922,0.942,0.94,0.942
44711,0.942,0.94,0.942,0.942,0.536,0.942,0.942,0.94,0.944,0.942,0.942,0.942,0.942,0.938,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.69,0.942,0.942,0,0.942,0.0,0.942,0.942,0.942,0.936,0.942,0.942,0.942,0.0,0.932,0.946,0.938,0.932,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.936,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.944,0.942,0.942,0.942,0,0.942,0.942,0.942,0.942,0.548,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.938,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.936,0.936,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0,0.936,0.548,0.938,0.942,0.942,0.938,0.942,0.938,0.94,0.942,0.622,0.942,0.942,0.93,0.912,0.942,0.942,0.544,0.944,0.942,0.942,0.942,0.942,0,0.942,0.942,0.942,0.94,0.942,0.942,0.94,0.942,0.942,0.942,0.942,0.932,0.942,0.938,0.942
44712,0.942,0.938,0.942,0.942,0.562,0.942,0.942,0.936,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.94,0.942,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.936,0.802,0.942,0.942,0,0.942,0.0,0.942,0.942,0.942,0.928,0.942,0.942,0.942,0.0,0.93,0.94,0.942,0.932,0.942,0.942,0.942,0.942,0.942,0.942,0.934,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.936,0.942,0.942,0.942,0,0.942,0.942,0.942,0.942,0.57,0.942,0.942,0.942,0.942,0.942,0.942,0.942,0.936,0.942,0.942,0.0,0.942,0.942,0.942,0.942,0.93,0.912,0.942,0.94,0.942,0.0,0.942,0.942,0.942,0.942,0,0.934,0.57,0.938,0.942,0.942,0.94,0.942,0.0,0.942,0.942,0.596,0.942,0.942,0.914,0.928,0.942,0.942,0.49,0.938,0.942,0.0,0.942,0.942,0,0.942,0.94,0.942,0.94,0.942,0.942,0.928,0.942,0.942,0.942,0.942,0.932,0.942,0.0,0.942
44713,0.878,0.926,0.922,0.924,0.908,0.922,0.93,0.942,0.948,0.878,0.886,0.0,0.926,0.0,0.842,0.9,0.884,0.93,0.0,0.916,0.926,0.932,0.918,0.904,0.776,0.842,0.714,0.93,0.916,0.0,0.714,0.868,0.0,0.918,0.936,0.89,0.95,0.714,0.918,0,0.862,0.94,0.764,0.92,0.922,0.954,0.764,0.714,0.894,0.886,0.0,0.944,0.836,0.914,0.788,0.926,0.93,0.842,0.738,0.922,0.91,0.916,0.916,0.842,0.796,0.894,0.932,0.924,0.768,0.916,0.924,0.93,0.812,0.904,0.918,0.942,0.932,0.714,0.842,0,0.898,0.866,0.93,0.852,0.924,0.852,0.932,0.0,0.92,0.882,0.714,0.914,0.868,0.0,0.886,0.848,0.928,0.942,0.74,0.928,0.942,0.748,0.926,0.912,0.796,0.936,0.928,0.764,0.82,0.932,0,0.0,0.92,0.808,0.0,0.932,0.934,0.918,0.936,0.938,0.92,0.876,0.812,0.714,0.92,0.918,0.78,0.924,0.738,0.94,0.922,0.93,0.928,0.824,0,0.89,0.93,0.924,0.934,0.93,0.926,0.914,0.714,0.922,0.918,0.836,0.0,0.926,0.938,0.0
44714,0.896,0.916,0.91,0.946,0.804,0.93,0.94,0.952,0.96,0.832,0.886,0.0,0.94,0.0,0.872,0.918,0.93,0.936,0.0,0.926,0.918,0.942,0.926,0.886,0.778,0.854,0.716,0.938,0.94,0.0,0.714,0.896,0.0,0.906,0.926,0.866,0.948,0.788,0.94,0,0.846,0.946,0.714,0.932,0.94,0.946,0.794,0.714,0.878,0.902,0.0,0.96,0.808,0.912,0.78,0.938,0.944,0.77,0.75,0.912,0.888,0.932,0.928,0.872,0.828,0.852,0.908,0.938,0.754,0.934,0.914,0.934,0.814,0.9,0.924,0.944,0.926,0.714,0.872,0,0.888,0.796,0.95,0.816,0.878,0.828,0.932,0.0,0.938,0.884,0.714,0.926,0.912,0.0,0.868,0.824,0.936,0.932,0.772,0.922,0.954,0.768,0.938,0.942,0.772,0.938,0.938,0.714,0.806,0.946,0,0.0,0.876,0.778,0.0,0.92,0.946,0.934,0.926,0.938,0.926,0.872,0.82,0.714,0.934,0.916,0.752,0.944,0.0,0.954,0.922,0.934,0.926,0.822,0,0.85,0.95,0.908,0.946,0.948,0.94,0.926,0.714,0.938,0.942,0.832,0.0,0.944,0.95,0.0
44715,0.87,0.916,0.882,0.912,0.782,0.93,0.916,0.926,0.928,0.84,0.886,0.0,0.922,0.0,0.86,0.902,0.854,0.908,0.0,0.908,0.902,0.91,0.902,0.85,0.794,0.848,0.78,0.926,0.914,0.0,0.714,0.818,0.0,0.882,0.912,0.814,0.93,0.728,0.91,0,0.808,0.928,0.786,0.9,0.924,0.93,0.786,0.714,0.846,0.88,0.0,0.934,0.758,0.862,0.76,0.89,0.918,0.818,0.756,0.888,0.882,0.902,0.908,0.86,0.758,0.822,0.906,0.924,0.744,0.91,0.908,0.924,0.802,0.888,0.902,0.926,0.898,0.714,0.86,0,0.888,0.714,0.912,0.792,0.848,0.834,0.9,0.0,0.91,0.87,0.714,0.908,0.892,0.0,0.872,0.804,0.904,0.906,0.714,0.89,0.93,0.714,0.924,0.906,0.78,0.894,0.93,0.786,0.802,0.92,0,0.0,0.844,0.78,0.0,0.9,0.926,0.914,0.898,0.922,0.908,0.848,0.814,0.714,0.906,0.884,0.722,0.924,0.0,0.93,0.914,0.936,0.902,0.816,0,0.82,0.926,0.88,0.93,0.93,0.91,0.902,0.714,0.914,0.908,0.854,0.0,0.918,0.926,0.0
44716,0.794,0.914,0.888,0.912,0.782,0.922,0.904,0.942,0.946,0.806,0.86,0.0,0.914,0.0,0.826,0.888,0.822,0.898,0.0,0.906,0.896,0.922,0.916,0.852,0.788,0.826,0.718,0.924,0.912,0.0,0.714,0.824,0.0,0.864,0.922,0.834,0.948,0.762,0.904,0,0.806,0.95,0.778,0.914,0.938,0.946,0.778,0.714,0.854,0.868,0.0,0.944,0.808,0.894,0.77,0.898,0.92,0.748,0.772,0.884,0.86,0.914,0.912,0.826,0.806,0.818,0.912,0.92,0.77,0.918,0.888,0.94,0.82,0.87,0.864,0.946,0.9,0.714,0.826,0,0.858,0.794,0.916,0.84,0.818,0.82,0.91,0.0,0.908,0.854,0.714,0.9,0.888,0.0,0.83,0.804,0.874,0.902,0.732,0.892,0.94,0.69,0.926,0.894,0.796,0.912,0.936,0.778,0.814,0.922,0,0.0,0.818,0.744,0.0,0.898,0.936,0.91,0.898,0.93,0.896,0.87,0.802,0.714,0.888,0.902,0.714,0.914,0.672,0.93,0.894,0.926,0.908,0.828,0,0.818,0.934,0.89,0.932,0.924,0.9,0.892,0.714,0.922,0.916,0.826,0.0,0.918,0.936,0.0
44717,0.906,0.904,0.906,0.92,0.786,0.924,0.92,0.93,0.932,0.828,0.866,0.0,0.916,0.0,0.818,0.918,0.914,0.928,0.0,0.918,0.91,0.926,0.916,0.848,0.788,0.818,0.718,0.924,0.92,0.0,0.714,0.85,0.0,0.892,0.926,0.826,0.94,0.714,0.92,0,0.788,0.938,0.714,0.918,0.918,0.928,0.762,0.714,0.88,0.86,0.0,0.936,0.788,0.904,0.762,0.906,0.924,0.81,0.756,0.9,0.886,0.918,0.918,0.818,0.808,0.796,0.922,0.924,0.79,0.918,0.9,0.91,0.824,0.892,0.906,0.938,0.908,0.714,0.818,0,0.868,0.796,0.924,0.822,0.844,0.864,0.916,0.0,0.918,0.862,0.714,0.906,0.884,0.0,0.874,0.82,0.926,0.922,0.782,0.902,0.936,0.688,0.928,0.924,0.82,0.918,0.922,0.714,0.822,0.93,0,0.0,0.842,0.77,0.0,0.918,0.93,0.916,0.914,0.922,0.918,0.86,0.814,0.714,0.908,0.914,0.714,0.922,0.64,0.934,0.926,0.922,0.912,0.828,0,0.802,0.924,0.906,0.926,0.922,0.922,0.914,0.714,0.922,0.918,0.848,0.0,0.92,0.942,0.0
44718,0.752,0.706,0.732,0.744,0.55,0.748,0.666,0.764,0.792,0.706,0.584,0.598,0.73,0.722,0.584,0.624,0.666,0.734,0.772,0.714,0.768,0.704,0.712,0.516,0.542,0.584,0.744,0.666,0.74,0.514,0.514,0.62,0.774,0.518,0.738,0.64,0.776,0.558,0.634,0,0.588,0.69,0.61,0.62,0.738,0.796,0.624,0.514,0.69,0.612,0.752,0.804,0.602,0.572,0.514,0.774,0.766,0.76,0.75,0.77,0.712,0.72,0.718,0.584,0.668,0.588,0.744,0.652,0.514,0.728,0.706,0.714,0.534,0.646,0.586,0.792,0.756,0.514,0.584,0,0.674,0.632,0.64,0.0,0.608,0.744,0.666,0.736,0.734,0.672,0.514,0.712,0.676,0.764,0.748,0.58,0.766,0.744,0.524,0.774,0.798,0.684,0.754,0.584,0.5,0.644,0.76,0.61,0.0,0.764,0,0.768,0.608,0.634,0.762,0.732,0.764,0.726,0.658,0.742,0.724,0.552,0.61,0.514,0.714,0.712,0.544,0.74,0.436,0.796,0.738,0.704,0.774,0.568,0,0.592,0.756,0.726,0.762,0.76,0.664,0.654,0.514,0.748,0.734,0.718,0.686,0.754,0.704,0.74
44719,0.776,0.762,0.74,0.78,0.574,0.766,0.638,0.804,0.832,0.734,0.59,0.604,0.778,0.768,0.58,0.526,0.638,0.81,0.784,0.744,0.792,0.756,0.738,0.606,0.548,0.58,0.774,0.638,0.772,0.514,0.514,0.612,0.82,0.608,0.764,0.644,0.84,0.576,0.676,0,0.582,0.758,0.638,0.576,0.768,0.818,0.638,0.514,0.7,0.606,0.796,0.828,0.594,0.64,0.51,0.768,0.806,0.758,0.772,0.77,0.716,0.76,0.758,0.58,0.68,0.582,0.75,0.718,0.564,0.758,0.728,0.714,0.578,0.662,0.58,0.832,0.792,0.514,0.58,0,0.684,0.558,0.72,0.636,0.59,0.742,0.648,0.756,0.756,0.7,0.514,0.75,0.672,0.8,0.772,0.598,0.8,0.744,0.564,0.78,0.838,0.666,0.804,0.58,0.524,0.674,0.812,0.638,0.542,0.79,0,0.842,0.59,0.668,0.78,0.75,0.806,0.754,0.736,0.816,0.73,0.564,0.59,0.514,0.782,0.804,0.512,0.776,0.44,0.842,0.748,0.762,0.806,0.616,0,0.62,0.772,0.754,0.816,0.78,0.638,0.744,0.514,0.77,0.764,0.738,0.676,0.792,0.778,0.772
44720,0.772,0.77,0.732,0.772,0.544,0.772,0.68,0.792,0.808,0.726,0.618,0.624,0.77,0.776,0.644,0.624,0.68,0.766,0.768,0.75,0.766,0.698,0.742,0.614,0.52,0.644,0.746,0.68,0.8,0.514,0.514,0.614,0.816,0.624,0.788,0.624,0.796,0.562,0.678,0,0.55,0.692,0.61,0.622,0.786,0.794,0.61,0.514,0.652,0.608,0.8,0.812,0.62,0.642,0.512,0.75,0.804,0.748,0.748,0.744,0.702,0.754,0.752,0.644,0.68,0.388,0.772,0.7,0.524,0.766,0.734,0.732,0.604,0.68,0.602,0.796,0.764,0.514,0.644,0,0.718,0.568,0.708,0.0,0.604,0.716,0.692,0.736,0.764,0.736,0.514,0.73,0.672,0.782,0.782,0.604,0.798,0.77,0.518,0.772,0.818,0.682,0.796,0.644,0.492,0.67,0.8,0.61,0.514,0.794,0,0.778,0.604,0.64,0.804,0.778,0.784,0.754,0.722,0.79,0.736,0.592,0.644,0.514,0.762,0.76,0.518,0.786,0.414,0.8,0.77,0.76,0.768,0.668,0,0.61,0.75,0.732,0.808,0.778,0.682,0.7,0.514,0.78,0.754,0.708,0.69,0.8,0.76,0.794
44721,0.738,0.72,0.726,0.756,0.57,0.746,0.664,0.764,0.804,0.732,0.602,0.596,0.732,0.722,0.614,0.634,0.664,0.756,0.76,0.734,0.748,0.74,0.726,0.636,0.574,0.614,0.712,0.664,0.752,0.514,0.514,0.63,0.772,0.644,0.734,0.688,0.804,0.57,0.676,0,0.522,0.75,0.558,0.614,0.744,0.814,0.624,0.514,0.668,0.624,0.746,0.812,0.588,0.606,0.518,0.744,0.776,0.75,0.746,0.734,0.68,0.732,0.744,0.614,0.678,0.508,0.73,0.712,0.598,0.742,0.714,0.718,0.556,0.662,0.608,0.808,0.762,0.51,0.614,0,0.714,0.552,0.712,0.596,0.63,0.732,0.666,0.748,0.752,0.694,0.514,0.744,0.678,0.79,0.76,0.63,0.766,0.726,0.568,0.742,0.806,0.664,0.768,0.62,0.538,0.66,0.77,0.558,0.492,0.782,0,0.808,0.63,0.686,0.768,0.738,0.788,0.742,0.716,0.768,0.712,0.576,0.594,0.514,0.718,0.718,0.5,0.738,0.486,0.802,0.746,0.734,0.758,0.562,0,0.624,0.756,0.736,0.762,0.754,0.664,0.704,0.514,0.742,0.746,0.738,0.672,0.77,0.75,0.754
44722,0.746,0.72,0.688,0.726,0.554,0.742,0.644,0.752,0.774,0.686,0.58,0.602,0.724,0.744,0.598,0.578,0.644,0.736,0.724,0.718,0.718,0.72,0.718,0.578,0.504,0.598,0.724,0.644,0.736,0.514,0.514,0.594,0.754,0.586,0.74,0.66,0.766,0.556,0.666,0,0.498,0.714,0.632,0.578,0.752,0.786,0.632,0.514,0.634,0.58,0.746,0.776,0.604,0.608,0.572,0.714,0.748,0.694,0.716,0.702,0.692,0.71,0.736,0.598,0.71,0.498,0.718,0.708,0.526,0.722,0.714,0.676,0.506,0.624,0.584,0.78,0.716,0.514,0.598,0,0.69,0.588,0.704,0.694,0.58,0.688,0.64,0.694,0.726,0.682,0.514,0.712,0.684,0.744,0.71,0.6,0.75,0.728,0.62,0.706,0.782,0.67,0.754,0.612,0.512,0.654,0.752,0.632,0.534,0.738,0,0.758,0.58,0.63,0.748,0.718,0.768,0.716,0.708,0.738,0.702,0.58,0.624,0.514,0.704,0.718,0.514,0.732,0.338,0.784,0.722,0.722,0.728,0.622,0,0.582,0.722,0.692,0.76,0.732,0.644,0.696,0.514,0.724,0.724,0.716,0.662,0.732,0.734,0.742
44723,0.834,0.802,0.76,0.816,0.76,0.834,0.77,0.84,0.842,0.816,0.786,0.76,0.826,0.834,0.76,0.786,0.812,0.748,0.764,0.818,0.762,0.822,0.806,0.79,0.76,0.76,0.784,0.776,0.828,0.76,0.76,0.808,0.846,0.782,0.838,0.806,0.82,0.76,0.814,0,0.734,0.834,0.76,0.788,0.83,0.8,0.796,0.76,0.784,0.8,0.826,0.83,0.734,0.782,0.76,0.766,0.842,0.806,0.792,0.792,0.83,0.806,0.812,0.76,0.822,0.734,0.832,0.826,0.76,0.82,0.828,0.804,0.76,0.8,0.798,0.842,0.764,0.76,0.76,0,0.776,0.784,0.822,0.0,0.76,0.752,0.816,0.758,0.824,0.762,0.76,0.806,0.796,0.822,0.852,0.772,0.836,0.826,0.76,0.804,0.814,0.698,0.834,0.814,0.76,0.82,0.842,0.76,0.72,0.834,0,0.81,0.76,0.75,0.844,0.83,0.836,0.824,0.804,0.832,0.792,0.738,0.778,0.76,0.816,0.806,0.76,0.826,0.344,0.842,0.838,0.834,0.822,0.79,0,0.734,0.814,0.76,0.84,0.836,0.78,0.818,0.76,0.824,0.822,0.842,0.76,0.834,0.842,0.834
44724,0.852,0.848,0.762,0.854,0.778,0.86,0.82,0.866,0.86,0.85,0.788,0.76,0.86,0.806,0.76,0.79,0.846,0.742,0.766,0.844,0.762,0.852,0.84,0.782,0.76,0.76,0.798,0.806,0.844,0.76,0.76,0.794,0.858,0.792,0.862,0.814,0.828,0.76,0.86,0,0.71,0.848,0.76,0.784,0.856,0.816,0.76,0.76,0.818,0.798,0.828,0.866,0.72,0.824,0.76,0.766,0.86,0.824,0.81,0.808,0.812,0.842,0.838,0.76,0.834,0.712,0.85,0.85,0.76,0.842,0.862,0.81,0.76,0.814,0.796,0.864,0.744,0.762,0.76,0,0.776,0.76,0.85,0.0,0.778,0.756,0.854,0.75,0.846,0.76,0.76,0.856,0.83,0.83,0.856,0.774,0.848,0.862,0.76,0.824,0.844,0.726,0.858,0.836,0.76,0.796,0.864,0.76,0.0,0.856,0,0.838,0.778,0.752,0.846,0.848,0.862,0.852,0.822,0.844,0.836,0.722,0.774,0.76,0.81,0.846,0.76,0.864,0.0,0.84,0.838,0.85,0.83,0.798,0,0.718,0.84,0.762,0.86,0.862,0.806,0.856,0.76,0.852,0.852,0.858,0.792,0.848,0.858,0.848
44725,0.868,0.846,0.76,0.85,0.784,0.858,0.782,0.868,0.87,0.83,0.782,0.76,0.87,0.824,0.76,0.8,0.836,0.706,0.742,0.844,0.76,0.838,0.846,0.798,0.76,0.76,0.804,0.804,0.846,0.76,0.76,0.84,0.842,0.806,0.86,0.846,0.828,0.76,0.842,0,0.712,0.846,0.76,0.816,0.858,0.806,0.76,0.76,0.82,0.798,0.838,0.844,0.692,0.834,0.76,0.772,0.864,0.828,0.816,0.83,0.858,0.838,0.846,0.76,0.848,0.71,0.854,0.854,0.76,0.844,0.848,0.816,0.76,0.784,0.798,0.86,0.716,0.76,0.76,0,0.78,0.76,0.848,0.0,0.784,0.756,0.828,0.73,0.842,0.76,0.76,0.85,0.8,0.846,0.852,0.78,0.84,0.852,0.76,0.836,0.844,0.69,0.852,0.81,0.76,0.824,0.856,0.76,0.0,0.862,0,0.836,0.784,0.748,0.846,0.862,0.87,0.86,0.832,0.856,0.826,0.724,0.774,0.76,0.816,0.87,0.76,0.856,0.794,0.856,0.854,0.852,0.824,0.814,0,0.72,0.834,0.76,0.864,0.858,0.792,0.874,0.76,0.85,0.836,0.846,0.8,0.862,0.874,0.834
44726,0.822,0.816,0.762,0.816,0.788,0.826,0.788,0.83,0.828,0.794,0.794,0.76,0.826,0.796,0.76,0.802,0.806,0.734,0.736,0.806,0.762,0.82,0.802,0.806,0.76,0.76,0.778,0.808,0.804,0.76,0.76,0.802,0.816,0.808,0.806,0.798,0.8,0.76,0.822,0,0.724,0.844,0.76,0.806,0.828,0.792,0.76,0.76,0.812,0.816,0.802,0.822,0.704,0.812,0.76,0.768,0.824,0.816,0.788,0.808,0.806,0.806,0.806,0.76,0.814,0.722,0.818,0.832,0.76,0.806,0.814,0.816,0.76,0.782,0.812,0.822,0.732,0.762,0.76,0,0.784,0.762,0.824,0.0,0.788,0.758,0.818,0.726,0.808,0.76,0.76,0.814,0.79,0.814,0.814,0.78,0.812,0.812,0.76,0.816,0.794,0.728,0.822,0.804,0.76,0.802,0.828,0.76,0.75,0.82,0,0.81,0.788,0.734,0.818,0.822,0.83,0.804,0.812,0.834,0.8,0.73,0.78,0.76,0.804,0.8,0.76,0.818,0.794,0.818,0.816,0.834,0.814,0.79,0,0.718,0.81,0.764,0.828,0.814,0.808,0.822,0.76,0.81,0.81,0.806,0.788,0.824,0.846,0.812
44727,0.852,0.838,0.762,0.858,0.778,0.86,0.792,0.864,0.868,0.834,0.792,0.76,0.856,0.838,0.76,0.808,0.844,0.746,0.742,0.844,0.764,0.85,0.834,0.818,0.76,0.76,0.784,0.788,0.84,0.76,0.76,0.848,0.852,0.816,0.864,0.834,0.824,0.76,0.836,0,0.752,0.858,0.76,0.808,0.852,0.848,0.8,0.76,0.83,0.804,0.832,0.864,0.728,0.814,0.76,0.77,0.862,0.838,0.822,0.828,0.864,0.84,0.836,0.76,0.816,0.75,0.854,0.854,0.76,0.844,0.834,0.85,0.76,0.794,0.8,0.858,0.742,0.762,0.76,0,0.782,0.766,0.852,0.0,0.778,0.748,0.844,0.736,0.848,0.76,0.76,0.846,0.806,0.83,0.844,0.776,0.846,0.852,0.76,0.826,0.864,0.712,0.85,0.822,0.76,0.826,0.854,0.76,0.752,0.846,0,0.83,0.778,0.752,0.854,0.848,0.854,0.848,0.838,0.84,0.812,0.76,0.79,0.76,0.818,0.844,0.76,0.848,0.358,0.85,0.85,0.86,0.836,0.794,0,0.766,0.816,0.762,0.848,0.858,0.8,0.826,0.76,0.838,0.846,0.842,0.78,0.848,0.86,0.84
44728,0.228,0.174,0.19,0.252,0.0,0.252,0.24,0.246,0.0,0.192,0.0,0.0,0.238,0.0,0.096,0.148,0.256,0.152,0.182,0.226,0.188,0.232,0.222,0.146,0.044,0.102,0.174,0.212,0.246,0.0,0.0,0.162,0.274,0.154,0.264,0.142,0.0,0.0,0.19,0,0.158,0.0,0.086,0.0,0.0,0.0,0.084,0.0,0.168,0.162,0.0,0.0,0.094,0.148,0.036,0.162,0.256,0.218,0.228,0.216,0.17,0.222,0.234,0.096,0.146,0.058,0.0,0.224,0.062,0.226,0.0,0.0,0.06,0.158,0.142,0.0,0.176,0.062,0.096,0,0.0,0.0,0.23,0.0,0.0,0.03,0.21,0.184,0.234,0.0,0.062,0.16,0.182,0.0,0.242,0.0,0.224,0.246,0.126,0.22,0.0,0.192,0.248,0.176,0.038,0.164,0.0,0.086,0.0,0.246,0,0.0,0.0,0.052,0.0,0.25,0.0,0.236,0.172,0.0,0.184,0.164,0.162,0.0,0.194,0.156,0.0,0.232,0.0,0.0,0.238,0.0,0.254,0.128,0,0.15,0.256,0.188,0.246,0.232,0.224,0.16,0.0,0.238,0.232,0.24,0.138,0.24,0.0,0.254

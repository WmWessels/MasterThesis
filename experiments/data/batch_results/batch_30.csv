0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44459,0.704,0.648,0.642,0.696,0.0,0.698,0.672,0.71,0.714,0.686,0.672,0.674,0.696,0.674,0.662,0.626,0.686,0.618,0.642,0.684,0.648,0.674,0.686,0.666,0.518,0.662,0.55,0.676,0.684,0.702,0.556,0.636,0.68,0.642,0.718,0.678,0.678,0.664,0.676,0,0.658,0.658,0.626,0.652,0.714,0.658,0.626,0.672,0.656,0.666,0.688,0.718,0.582,0.624,0.5,0.626,0.69,0.688,0.62,0.63,0.644,0.69,0.686,0.662,0.658,0.66,0.722,0.702,0.5,0.698,0.7,0.722,0.522,0.706,0.664,0.702,0.626,0.526,0.662,0,0.692,0.0,0.688,0.0,0.0,0.488,0.688,0.63,0.694,0.712,0.5,0.67,0.642,0.698,0.672,0.706,0.676,0.704,0.592,0.628,0.706,0.674,0.686,0.678,0.512,0.656,0.704,0.626,0.0,0.688,0,0.684,0.0,0.512,0.686,0.726,0.684,0.686,0.616,0.682,0.672,0.654,0.624,0.0,0.608,0.646,0.0,0.684,0.0,0.708,0.7,0.662,0.684,0.594,0,0.66,0.664,0.644,0.702,0.698,0.68,0.668,0.7,0.682,0.696,0.666,0.626,0.696,0.696,0.688
44460,0.648,0.624,0.598,0.642,0.0,0.636,0.64,0.662,0.664,0.632,0.66,0.652,0.646,0.634,0.6,0.656,0.662,0.6,0.61,0.656,0.616,0.652,0.64,0.63,0.454,0.6,0.564,0.642,0.636,0.638,0.54,0.598,0.626,0.612,0.642,0.656,0.58,0.644,0.658,0,0.646,0.668,0.6,0.624,0.642,0.56,0.6,0.644,0.612,0.64,0.616,0.636,0.576,0.606,0.496,0.582,0.636,0.592,0.584,0.616,0.624,0.642,0.644,0.6,0.59,0.646,0.634,0.652,0.5,0.646,0.656,0.656,0.492,0.644,0.646,0.652,0.606,0.548,0.6,0,0.664,0.0,0.642,0.0,0.0,0.518,0.636,0.6,0.64,0.636,0.5,0.63,0.612,0.66,0.618,0.0,0.642,0.646,0.594,0.62,0.624,0.63,0.628,0.652,0.53,0.604,0.638,0.6,0.0,0.628,0,0.648,0.0,0.482,0.642,0.648,0.656,0.652,0.59,0.634,0.644,0.64,0.604,0.0,0.598,0.608,0.0,0.654,0.0,0.612,0.628,0.648,0.638,0.554,0,0.646,0.646,0.59,0.634,0.652,0.644,0.622,0.648,0.624,0.632,0.626,0.658,0.626,0.652,0.642
44461,0.682,0.67,0.636,0.68,0.0,0.69,0.652,0.71,0.696,0.63,0.612,0.674,0.7,0.656,0.626,0.614,0.658,0.656,0.652,0.668,0.642,0.652,0.672,0.62,0.478,0.626,0.53,0.656,0.682,0.678,0.54,0.642,0.688,0.602,0.692,0.65,0.672,0.61,0.662,0,0.644,0.67,0.626,0.616,0.686,0.676,0.626,0.624,0.642,0.578,0.66,0.662,0.542,0.622,0.514,0.616,0.682,0.648,0.62,0.632,0.632,0.684,0.666,0.626,0.626,0.644,0.684,0.688,0.5,0.666,0.686,0.666,0.502,0.666,0.618,0.676,0.646,0.54,0.626,0,0.682,0.0,0.674,0.0,0.0,0.482,0.668,0.638,0.688,0.68,0.5,0.658,0.626,0.68,0.678,0.632,0.674,0.686,0.582,0.634,0.678,0.634,0.706,0.646,0.474,0.64,0.69,0.626,0.518,0.682,0,0.66,0.0,0.494,0.686,0.684,0.698,0.686,0.614,0.676,0.654,0.658,0.626,0.0,0.66,0.678,0.0,0.686,0.0,0.68,0.686,0.686,0.664,0.616,0,0.644,0.7,0.628,0.702,0.688,0.654,0.678,0.674,0.676,0.678,0.662,0.606,0.69,0.684,0.672
44462,0.72,0.66,0.674,0.692,0.0,0.712,0.724,0.712,0.708,0.692,0.658,0.712,0.714,0.656,0.646,0.64,0.726,0.674,0.676,0.704,0.704,0.694,0.704,0.64,0.462,0.646,0.614,0.714,0.718,0.69,0.586,0.66,0.686,0.636,0.706,0.69,0.65,0.636,0.7,0,0.636,0.72,0.644,0.652,0.724,0.638,0.644,0.658,0.674,0.66,0.676,0.718,0.62,0.624,0.526,0.676,0.686,0.704,0.638,0.66,0.658,0.694,0.702,0.646,0.66,0.634,0.704,0.714,0.5,0.704,0.71,0.712,0.486,0.692,0.648,0.702,0.664,0.56,0.646,0,0.72,0.0,0.706,0.0,0.0,0.496,0.722,0.678,0.704,0.72,0.5,0.664,0.638,0.71,0.7,0.684,0.686,0.714,0.636,0.678,0.676,0.708,0.68,0.69,0.492,0.68,0.708,0.644,0.482,0.676,0,0.708,0.0,0.504,0.72,0.7,0.72,0.7,0.684,0.676,0.67,0.652,0.66,0.0,0.666,0.658,0.0,0.708,0.0,0.706,0.718,0.708,0.664,0.654,0,0.634,0.686,0.672,0.686,0.708,0.714,0.668,0.692,0.706,0.692,0.686,0.7,0.7,0.698,0.712
44463,0.81,0.778,0.596,0.758,0.0,0.794,0.61,0.808,0.792,0.71,0.662,0.74,0.814,0.0,0.8,0.572,0.724,0.568,0.604,0.776,0.594,0.746,0.774,0.596,0.454,0.8,0.496,0.526,0.772,0.0,0.5,0.698,0.0,0.594,0.75,0.716,0.778,0.648,0.782,0,0.624,0.79,0.728,0.594,0.796,0.8,0.728,0.652,0.688,0.644,0.0,0.794,0.564,0.62,0.506,0.57,0.788,0.67,0.554,0.616,0.73,0.764,0.782,0.8,0.718,0.624,0.748,0.81,0.5,0.78,0.796,0.694,0.468,0.676,0.63,0.802,0.578,0.504,0.8,0,0.808,0.0,0.774,0.0,0.0,0.514,0.734,0.588,0.774,0.788,0.5,0.78,0.602,0.8,0.736,0.0,0.754,0.754,0.594,0.65,0.772,0.63,0.784,0.786,0.492,0.574,0.812,0.728,0.51,0.764,0,0.796,0.0,0.516,0.0,0.734,0.806,0.802,0.568,0.8,0.722,0.61,0.62,0.0,0.788,0.774,0.0,0.776,0.0,0.764,0.732,0.788,0.604,0.562,0,0.624,0.704,0.598,0.776,0.796,0.528,0.768,0.592,0.768,0.77,0.72,0.524,0.772,0.794,0.0
44464,0.784,0.744,0.544,0.75,0.0,0.782,0.594,0.782,0.756,0.716,0.656,0.762,0.784,0.0,0.788,0.584,0.71,0.528,0.556,0.756,0.542,0.754,0.756,0.55,0.464,0.788,0.544,0.56,0.77,0.0,0.5,0.678,0.0,0.56,0.724,0.736,0.746,0.63,0.772,0,0.58,0.774,0.734,0.606,0.776,0.748,0.734,0.644,0.692,0.644,0.0,0.788,0.53,0.584,0.502,0.532,0.77,0.648,0.572,0.544,0.712,0.748,0.764,0.788,0.658,0.584,0.746,0.79,0.5,0.758,0.786,0.678,0.53,0.624,0.642,0.786,0.534,0.5,0.788,0,0.776,0.0,0.766,0.0,0.0,0.496,0.706,0.558,0.762,0.784,0.5,0.764,0.66,0.766,0.72,0.0,0.766,0.74,0.562,0.586,0.746,0.564,0.766,0.794,0.506,0.516,0.776,0.734,0.488,0.742,0,0.768,0.0,0.468,0.0,0.74,0.784,0.776,0.54,0.786,0.69,0.612,0.564,0.0,0.742,0.75,0.0,0.784,0.0,0.788,0.734,0.798,0.616,0.54,0,0.584,0.698,0.542,0.758,0.77,0.562,0.782,0.618,0.764,0.748,0.718,0.526,0.77,0.77,0.0
44465,0.772,0.776,0.63,0.748,0.0,0.752,0.612,0.76,0.774,0.734,0.636,0.77,0.774,0.0,0.782,0.56,0.724,0.584,0.618,0.77,0.612,0.746,0.776,0.584,0.516,0.782,0.538,0.61,0.766,0.0,0.5,0.652,0.0,0.588,0.718,0.738,0.754,0.628,0.766,0,0.59,0.762,0.726,0.62,0.776,0.746,0.726,0.644,0.686,0.626,0.0,0.778,0.542,0.584,0.468,0.598,0.76,0.668,0.57,0.622,0.688,0.75,0.77,0.782,0.704,0.596,0.758,0.776,0.5,0.764,0.782,0.688,0.46,0.65,0.63,0.742,0.596,0.502,0.782,0,0.782,0.0,0.746,0.0,0.0,0.508,0.718,0.644,0.758,0.79,0.5,0.766,0.642,0.78,0.718,0.0,0.772,0.744,0.626,0.652,0.75,0.648,0.77,0.764,0.518,0.578,0.77,0.726,0.0,0.75,0,0.766,0.0,0.484,0.0,0.738,0.768,0.762,0.6,0.76,0.732,0.682,0.642,0.0,0.746,0.742,0.0,0.772,0.0,0.754,0.75,0.766,0.674,0.554,0,0.596,0.734,0.62,0.746,0.766,0.582,0.772,0.586,0.77,0.756,0.714,0.574,0.756,0.754,0.0
44466,0.78,0.762,0.612,0.77,0.0,0.766,0.64,0.772,0.77,0.714,0.644,0.776,0.786,0.0,0.778,0.602,0.748,0.556,0.608,0.758,0.578,0.746,0.748,0.602,0.492,0.778,0.526,0.566,0.774,0.0,0.5,0.716,0.0,0.62,0.756,0.728,0.77,0.636,0.77,0,0.586,0.764,0.738,0.628,0.776,0.75,0.738,0.654,0.69,0.634,0.0,0.794,0.566,0.654,0.504,0.566,0.77,0.634,0.628,0.63,0.736,0.77,0.764,0.778,0.702,0.584,0.744,0.776,0.488,0.766,0.772,0.698,0.528,0.652,0.658,0.784,0.584,0.496,0.778,0,0.786,0.0,0.754,0.0,0.0,0.484,0.742,0.62,0.768,0.772,0.5,0.76,0.654,0.756,0.724,0.0,0.772,0.738,0.604,0.664,0.762,0.614,0.776,0.766,0.49,0.594,0.778,0.738,0.0,0.776,0,0.786,0.0,0.514,0.0,0.73,0.768,0.79,0.55,0.772,0.726,0.656,0.604,0.0,0.742,0.752,0.0,0.774,0.0,0.79,0.728,0.76,0.68,0.568,0,0.584,0.714,0.608,0.776,0.778,0.572,0.764,0.628,0.766,0.744,0.736,0.514,0.768,0.76,0.0
44467,0.806,0.776,0.582,0.786,0.0,0.806,0.61,0.784,0.79,0.76,0.652,0.75,0.804,0.0,0.804,0.572,0.744,0.554,0.594,0.788,0.576,0.798,0.778,0.616,0.494,0.804,0.546,0.588,0.788,0.0,0.5,0.718,0.0,0.618,0.764,0.738,0.77,0.638,0.79,0,0.638,0.806,0.738,0.61,0.814,0.774,0.738,0.664,0.72,0.652,0.0,0.774,0.508,0.57,0.5,0.546,0.8,0.712,0.56,0.582,0.71,0.778,0.784,0.804,0.726,0.628,0.744,0.81,0.504,0.79,0.804,0.698,0.476,0.67,0.678,0.79,0.556,0.5,0.804,0,0.802,0.0,0.782,0.514,0.0,0.468,0.758,0.588,0.788,0.8,0.5,0.786,0.684,0.788,0.768,0.0,0.792,0.768,0.584,0.636,0.78,0.668,0.802,0.808,0.496,0.534,0.8,0.738,0.0,0.79,0,0.768,0.0,0.494,0.0,0.75,0.786,0.802,0.544,0.796,0.768,0.636,0.604,0.0,0.762,0.776,0.0,0.798,0.0,0.786,0.734,0.814,0.65,0.556,0,0.628,0.722,0.586,0.802,0.79,0.604,0.804,0.582,0.8,0.788,0.744,0.59,0.784,0.81,0.0
44468,0.0,0.5498652291105122,0.5741239892183289,0.568733153638814,0.0,0.601078167115903,0.5121293800539084,0.628032345013477,0.6118598382749326,0.4716981132075472,0.31266846361185985,0.0,0.5741239892183289,0.5606469002695418,0.40431266846361186,0.4582210242587601,0.5660377358490566,0.5956873315363881,0.0,0.568733153638814,0.568733153638814,0.5417789757412399,0.601078167115903,0.2884097035040431,0.628032345013477,0.40431266846361186,0.5714285714285714,0.5714285714285714,0.6199460916442049,0.39622641509433965,0.3611859838274933,0.38544474393531,0.6442048517520216,0.3018867924528302,0.601078167115903,0.4716981132075472,0.12668463611859837,0.31266846361185985,0.3584905660377358,0,0.31536388140161725,0.5768194070080862,0.3423180592991914,0.477088948787062,0.6118598382749326,0.0646900269541779,0.38005390835579517,0.31266846361185985,0.31536388140161725,0.31266846361185985,0.6037735849056604,0.6145552560646901,0.33153638814016173,0.39892183288409705,0.5768194070080862,0.5822102425876011,0.6118598382749326,0.5956873315363881,0.601078167115903,0.5741239892183289,0.5148247978436657,0.5606469002695418,0.5633423180592992,0.40431266846361186,0.5013477088948787,0.11590296495956873,0.6037735849056604,0.444743935309973,0.31266846361185985,0.6199460916442049,0.6145552560646901,0.5363881401617251,0.628032345013477,0.5417789757412399,0.31266846361185985,0.5768194070080862,0.6145552560646901,0.31266846361185985,0.40431266846361186,0,0.5390835579514824,0.3638814016172507,0.4123989218328841,0.0,0.3288409703504043,0.5013477088948787,0.5471698113207547,0.0,0.5849056603773585,0.48247978436657685,0.31266846361185985,0.5633423180592992,0.5121293800539084,0.0,0.6037735849056604,0.31266846361185985,0.0,0.5822102425876011,0.3611859838274933,0.5714285714285714,0.5660377358490566,0.5471698113207547,0.633423180592992,0.3719676549865229,0.5929919137466307,0.444743935309973,0.6091644204851752,0.3423180592991914,0.6118598382749326,0.6307277628032345,0,0.0,0.32345013477088946,0.4501347708894879,0.633423180592992,0.5956873315363881,0.5336927223719676,0.5660377358490566,0.6145552560646901,0.5929919137466307,0.3261455525606469,0.40161725067385445,0.42048517520215634,0.31266846361185985,0.5741239892183289,0.5876010781671159,0.33423180592991913,0.601078167115903,0.31536388140161725,0.5956873315363881,0.5660377358490566,0.601078167115903,0.5849056603773585,0.3692722371967655,0,0.31536388140161725,0.6172506738544474,0.5768194070080862,0.6145552560646901,0.5983827493261455,0.41778975741239893,0.522911051212938,0.39622641509433965,0.6226415094339622,0.5121293800539084,0.5822102425876011,0.0,0.6226415094339622,0.5956873315363881,0.6226415094339622
44469,0.0,0.5498652291105122,0.5741239892183289,0.5714285714285714,0.0,0.6091644204851752,0.5121293800539084,0.6118598382749326,0.6253369272237197,0.522911051212938,0.31266846361185985,0.0,0.5876010781671159,0.555256064690027,0.40431266846361186,0.4582210242587601,0.5660377358490566,0.5956873315363881,0.0,0.5956873315363881,0.568733153638814,0.5660377358490566,0.5768194070080862,0.2884097035040431,0.5902964959568733,0.40431266846361186,0.5633423180592992,0.5714285714285714,0.6145552560646901,0.40161725067385445,0.3584905660377358,0.4123989218328841,0.6253369272237197,0.3018867924528302,0.6037735849056604,0.4716981132075472,0.29380053908355797,0.31266846361185985,0.33962264150943394,0,0.31536388140161725,0.5795148247978437,0.3423180592991914,0.477088948787062,0.6064690026954178,0.2641509433962264,0.38005390835579517,0.31266846361185985,0.31266846361185985,0.31266846361185985,0.5902964959568733,0.5849056603773585,0.33153638814016173,0.39892183288409705,0.5768194070080862,0.5822102425876011,0.633423180592992,0.5956873315363881,0.6118598382749326,0.5741239892183289,0.5148247978436657,0.5876010781671159,0.5822102425876011,0.40431266846361186,0.5256064690026954,0.11590296495956873,0.5983827493261455,0.431266846361186,0.31266846361185985,0.6091644204851752,0.5902964959568733,0.5579514824797843,0.6091644204851752,0.5417789757412399,0.31266846361185985,0.5849056603773585,0.6145552560646901,0.31266846361185985,0.40431266846361186,0,0.5417789757412399,0.3746630727762803,0.3908355795148248,0.5822102425876011,0.3288409703504043,0.5202156334231806,0.5471698113207547,0.0,0.568733153638814,0.477088948787062,0.31266846361185985,0.5633423180592992,0.5121293800539084,0.0,0.5768194070080862,0.31266846361185985,0.0,0.5983827493261455,0.33692722371967654,0.5714285714285714,0.5768194070080862,0.5444743935309974,0.6145552560646901,0.3719676549865229,0.5902964959568733,0.444743935309973,0.6091644204851752,0.3423180592991914,0.6118598382749326,0.6118598382749326,0,0.0,0.32345013477088946,0.4555256064690027,0.6091644204851752,0.5929919137466307,0.5929919137466307,0.5013477088948787,0.6145552560646901,0.5956873315363881,0.3450134770889488,0.40161725067385445,0.42857142857142855,0.31266846361185985,0.5741239892183289,0.5876010781671159,0.3719676549865229,0.601078167115903,0.31536388140161725,0.5768194070080862,0.5741239892183289,0.6118598382749326,0.5849056603773585,0.38005390835579517,0,0.31536388140161725,0.5983827493261455,0.5822102425876011,0.6199460916442049,0.6226415094339622,0.41778975741239893,0.522911051212938,0.3692722371967655,0.6199460916442049,0.522911051212938,0.5768194070080862,0.0,0.6172506738544474,0.5929919137466307,0.6199460916442049
44470,0.0,0.5498652291105122,0.5741239892183289,0.6118598382749326,0.0,0.6172506738544474,0.5121293800539084,0.601078167115903,0.6064690026954178,0.5040431266846361,0.31266846361185985,0.0,0.5525606469002695,0.5660377358490566,0.40431266846361186,0.4582210242587601,0.5660377358490566,0.5956873315363881,0.0,0.5902964959568733,0.568733153638814,0.5417789757412399,0.601078167115903,0.2884097035040431,0.6199460916442049,0.40431266846361186,0.5741239892183289,0.5714285714285714,0.6253369272237197,0.40431266846361186,0.3638814016172507,0.42587601078167114,0.628032345013477,0.3018867924528302,0.6253369272237197,0.4716981132075472,0.2398921832884097,0.31266846361185985,0.33962264150943394,0,0.31536388140161725,0.6064690026954178,0.3423180592991914,0.477088948787062,0.6064690026954178,0.2210242587601078,0.38005390835579517,0.31266846361185985,0.30997304582210244,0.31266846361185985,0.5876010781671159,0.6199460916442049,0.33153638814016173,0.39892183288409705,0.555256064690027,0.5822102425876011,0.6199460916442049,0.5956873315363881,0.5849056603773585,0.5741239892183289,0.5148247978436657,0.5849056603773585,0.5876010781671159,0.40431266846361186,0.5633423180592992,0.11590296495956873,0.5741239892183289,0.4582210242587601,0.31266846361185985,0.5902964959568733,0.5983827493261455,0.5768194070080862,0.6199460916442049,0.5417789757412399,0.31266846361185985,0.6037735849056604,0.6145552560646901,0.31266846361185985,0.40431266846361186,0,0.5444743935309974,0.3477088948787062,0.4123989218328841,0.0,0.3288409703504043,0.5336927223719676,0.5471698113207547,0.0,0.5929919137466307,0.46630727762803237,0.31266846361185985,0.5633423180592992,0.5121293800539084,0.0,0.5983827493261455,0.31266846361185985,0.0,0.5849056603773585,0.33153638814016173,0.5714285714285714,0.555256064690027,0.3692722371967655,0.6226415094339622,0.3746630727762803,0.6145552560646901,0.444743935309973,0.6037735849056604,0.3423180592991914,0.6064690026954178,0.5956873315363881,0,0.0,0.32345013477088946,0.4582210242587601,0.6118598382749326,0.5902964959568733,0.6037735849056604,0.5175202156334232,0.6145552560646901,0.6064690026954178,0.33423180592991913,0.40161725067385445,0.41778975741239893,0.31266846361185985,0.5714285714285714,0.5876010781671159,0.3584905660377358,0.5929919137466307,0.31536388140161725,0.5714285714285714,0.5822102425876011,0.601078167115903,0.5849056603773585,0.3611859838274933,0,0.31536388140161725,0.6226415094339622,0.5795148247978437,0.6172506738544474,0.6037735849056604,0.41778975741239893,0.522911051212938,0.3935309973045822,0.6199460916442049,0.5417789757412399,0.5579514824797843,0.0,0.6226415094339622,0.5768194070080862,0.6172506738544474
44471,0.0,0.5498652291105122,0.5741239892183289,0.5768194070080862,0.0,0.6064690026954178,0.5121293800539084,0.6145552560646901,0.6172506738544474,0.5256064690026954,0.31266846361185985,0.0,0.5417789757412399,0.568733153638814,0.40431266846361186,0.4582210242587601,0.5660377358490566,0.5956873315363881,0.0,0.5741239892183289,0.568733153638814,0.568733153638814,0.5768194070080862,0.2884097035040431,0.601078167115903,0.40431266846361186,0.5714285714285714,0.5714285714285714,0.6118598382749326,0.40431266846361186,0.3908355795148248,0.41778975741239893,0.6307277628032345,0.3018867924528302,0.5983827493261455,0.4716981132075472,0.2560646900269542,0.31266846361185985,0.33962264150943394,0,0.31536388140161725,0.5849056603773585,0.3423180592991914,0.477088948787062,0.6037735849056604,0.10512129380053908,0.38005390835579517,0.31266846361185985,0.31536388140161725,0.31266846361185985,0.5849056603773585,0.5849056603773585,0.33153638814016173,0.39892183288409705,0.5768194070080862,0.5822102425876011,0.633423180592992,0.5956873315363881,0.6172506738544474,0.5741239892183289,0.5148247978436657,0.5822102425876011,0.6091644204851752,0.40431266846361186,0.5606469002695418,0.11590296495956873,0.5795148247978437,0.4393530997304582,0.31266846361185985,0.6307277628032345,0.5956873315363881,0.07816711590296496,0.6226415094339622,0.5417789757412399,0.31266846361185985,0.601078167115903,0.6145552560646901,0.31266846361185985,0.40431266846361186,0,0.5336927223719676,0.39892183288409705,0.3935309973045822,0.6037735849056604,0.3288409703504043,0.5363881401617251,0.5471698113207547,0.0,0.568733153638814,0.49326145552560646,0.31266846361185985,0.5633423180592992,0.5121293800539084,0.0,0.5956873315363881,0.31266846361185985,0.0,0.5902964959568733,0.3611859838274933,0.5714285714285714,0.5714285714285714,0.5471698113207547,0.6307277628032345,0.3746630727762803,0.6064690026954178,0.444743935309973,0.6037735849056604,0.3423180592991914,0.6145552560646901,0.6226415094339622,0,0.0,0.32345013477088946,0.4528301886792453,0.6253369272237197,0.6091644204851752,0.5822102425876011,0.5444743935309974,0.6145552560646901,0.5983827493261455,0.31266846361185985,0.40161725067385445,0.42318059299191374,0.31266846361185985,0.5714285714285714,0.5876010781671159,0.33692722371967654,0.5876010781671159,0.31536388140161725,0.5902964959568733,0.5902964959568733,0.6145552560646901,0.5849056603773585,0.3692722371967655,0,0.31536388140161725,0.6253369272237197,0.5768194070080862,0.6199460916442049,0.6091644204851752,0.41778975741239893,0.522911051212938,0.38005390835579517,0.628032345013477,0.5525606469002695,0.5633423180592992,0.0,0.601078167115903,0.568733153638814,0.6226415094339622
44472,0.0,0.5498652291105122,0.5741239892183289,0.5714285714285714,0.0,0.6037735849056604,0.5121293800539084,0.6118598382749326,0.6037735849056604,0.477088948787062,0.31266846361185985,0.0,0.5822102425876011,0.568733153638814,0.40431266846361186,0.4582210242587601,0.5660377358490566,0.5956873315363881,0.0,0.5929919137466307,0.568733153638814,0.5714285714285714,0.5741239892183289,0.2884097035040431,0.6199460916442049,0.40431266846361186,0.5660377358490566,0.5714285714285714,0.6253369272237197,0.40161725067385445,0.3638814016172507,0.37735849056603776,0.628032345013477,0.3018867924528302,0.6118598382749326,0.4716981132075472,0.19137466307277629,0.31266846361185985,0.33423180592991913,0,0.31536388140161725,0.5768194070080862,0.3423180592991914,0.477088948787062,0.6091644204851752,0.20754716981132076,0.38005390835579517,0.31266846361185985,0.30997304582210244,0.31266846361185985,0.5983827493261455,0.5902964959568733,0.33153638814016173,0.39892183288409705,0.5579514824797843,0.5822102425876011,0.6307277628032345,0.5956873315363881,0.6145552560646901,0.5741239892183289,0.5148247978436657,0.5768194070080862,0.5849056603773585,0.40431266846361186,0.5525606469002695,0.11590296495956873,0.5902964959568733,0.4501347708894879,0.31266846361185985,0.5983827493261455,0.601078167115903,0.013477088948787063,0.6145552560646901,0.5417789757412399,0.31266846361185985,0.5822102425876011,0.6145552560646901,0.31266846361185985,0.40431266846361186,0,0.5013477088948787,0.3611859838274933,0.39892183288409705,0.5795148247978437,0.3288409703504043,0.5256064690026954,0.5471698113207547,0.0,0.5822102425876011,0.49865229110512127,0.31266846361185985,0.5633423180592992,0.5121293800539084,0.0,0.6307277628032345,0.31266846361185985,0.0,0.5876010781671159,0.3557951482479784,0.5714285714285714,0.1105121293800539,0.5606469002695418,0.6172506738544474,0.3719676549865229,0.5983827493261455,0.444743935309973,0.6199460916442049,0.3423180592991914,0.5741239892183289,0.6091644204851752,0,0.0,0.32345013477088946,0.4528301886792453,0.6199460916442049,0.5956873315363881,0.5795148247978437,0.5336927223719676,0.6145552560646901,0.6091644204851752,0.31266846361185985,0.40161725067385445,0.3935309973045822,0.31266846361185985,0.5741239892183289,0.5876010781671159,0.3557951482479784,0.5849056603773585,0.31536388140161725,0.5768194070080862,0.5768194070080862,0.6091644204851752,0.5849056603773585,0.3611859838274933,0,0.31536388140161725,0.6037735849056604,0.5795148247978437,0.6145552560646901,0.6064690026954178,0.41778975741239893,0.522911051212938,0.38544474393531,0.6199460916442049,0.555256064690027,0.5822102425876011,0.0,0.628032345013477,0.5929919137466307,0.628032345013477
44473,0.982,0.982,0.982,0.982,0.688,0.982,0.618,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.982,0.978,0.846,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.0,0.982,0.982,0.0,0.982,0.982,0.982,0.31,0.982,0.982,0,0.98,0.982,0.982,0.982,0.982,0.856,0.982,0.982,0.982,0.0,0.0,0.982,0.98,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.626,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0,0.982,0.982,0.982,0.982,0.688,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.976,0.982,0.982,0.982,0.982,0.98,0.768,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0,0.98,0.686,0.978,0.0,0.982,0.974,0.982,0.982,0.982,0.982,0.962,0.982,0.982,0.98,0.978,0.982,0.982,0.0,0.98,0.982,0.982,0.982,0.982,0,0.964,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.136,0.982,0.982,0.0
44474,0.982,0.982,0.982,0.982,0.0,0.982,0.46,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.982,0.98,0.9,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.982,0.982,0.0,0.982,0.982,0.982,0.882,0.982,0.982,0,0.978,0.982,0.982,0.98,0.982,0.52,0.982,0.982,0.982,0.982,0.0,0.982,0.98,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.67,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0,0.982,0.0,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.972,0.982,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0,0.982,0.0,0.982,0.0,0.982,0.97,0.982,0.982,0.982,0.982,0.966,0.982,0.0,0.968,0.97,0.0,0.982,0.0,0.982,0.982,0.982,0.982,0.982,0,0.956,0.98,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.112,0.982,0.982,0.0
44475,0.982,0.982,0.982,0.982,0.448,0.982,0.828,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.98,0.976,0.82,0.978,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.978,0.982,0.0,0.982,0.982,0.0,0.982,0.982,0.974,0.466,0.982,0.982,0,0.974,0.982,0.982,0.978,0.982,0.216,0.982,0.982,0.982,0.982,0.0,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.704,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.98,0.982,0.98,0,0.982,0.982,0.982,0.982,0.448,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.256,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0,0.982,0.446,0.982,0.0,0.982,0.976,0.982,0.982,0.982,0.982,0.964,0.982,0.982,0.974,0.982,0.982,0.982,0.0,0.982,0.982,0.98,0.982,0.982,0,0.956,0.982,0.982,0.982,0.982,0.98,0.98,0.982,0.982,0.982,0.982,0.096,0.982,0.98,0.0
44476,0.982,0.982,0.982,0.982,0.528,0.982,0.452,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.978,0.982,0.868,0.982,0.982,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.0,0.982,0.982,0.0,0.982,0.982,0.982,0.446,0.982,0.982,0,0.982,0.0,0.982,0.982,0.982,0.644,0.982,0.982,0.982,0.0,0.0,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.646,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0,0.982,0.982,0.982,0.982,0.528,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0.98,0.52,0.982,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0,0.982,0.528,0.982,0.0,0.982,0.982,0.982,0.982,0.98,0.982,0.958,0.982,0.982,0.966,0.972,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0.982,0,0.972,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.1,0.982,0.0,0.0
44477,0.982,0.982,0.982,0.982,0.72,0.982,0.574,0.982,0.982,0.982,0.982,0.982,0.982,0.0,0.982,0.978,0.834,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.0,0.982,0.982,0.0,0.982,0.982,0.972,0.916,0.982,0.982,0,0.98,0.982,0.982,0.982,0.982,0.894,0.982,0.982,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.648,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0,0.982,0.982,0.982,0.976,0.722,0.982,0.976,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.974,0.982,0.982,0.982,0.982,0.98,0.962,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0.982,0,0.982,0.716,0.98,0.0,0.982,0.972,0.982,0.982,0.982,0.982,0.95,0.982,0.982,0.972,0.976,0.982,0.982,0.0,0.982,0.982,0.982,0.982,0.982,0,0.964,0.982,0.982,0.982,0.982,0.98,0.982,0.982,0.982,0.982,0.982,0.084,0.982,0.982,0.0
44478,0.17333333333333334,0.09866666666666667,0.11466666666666667,0.24,0.17866666666666667,0.21333333333333335,0.24,0.21866666666666668,0.25066666666666665,0.176,0.152,0.16,0.24533333333333332,0.0,0.04,0.16,0.224,0.15466666666666667,0.168,0.20533333333333334,0.11466666666666667,0.256,0.184,0.10933333333333334,0.048,0.02666666666666667,0.016,0.21333333333333335,0.21066666666666667,0.0,0.0,0.14666666666666667,0.0,0.096,0.224,0.064,0.0,0.0,0.21866666666666668,0,0.14933333333333335,0.0,0.029333333333333333,0.0,0.168,0.0,0.029333333333333333,0.0,0.16266666666666665,0.13333333333333333,0.0,0.0,0.058666666666666666,0.128,0.021333333333333333,0.10933333333333334,0.256,0.13333333333333333,0.10933333333333334,0.088,0.07466666666666667,0.192,0.22666666666666666,0.04,0.032,0.184,0.0,0.21333333333333335,0.037333333333333336,0.17866666666666667,0.0,0.0,0.050666666666666665,0.04533333333333334,0.15733333333333333,0.0,0.15466666666666667,0.018666666666666668,0.04,0,0.0,0.029333333333333333,0.22666666666666666,0.0,0.2,0.034666666666666665,0.22133333333333333,0.16266666666666665,0.24,0.0,0.018666666666666668,0.104,0.096,0.0,0.16266666666666665,0.042666666666666665,0.23466666666666666,0.22666666666666666,0.048,0.08266666666666667,0.0,0.09866666666666667,0.21866666666666668,0.208,0.06133333333333333,0.17866666666666667,0.2,0.029333333333333333,0.0,0.22666666666666666,0,0.0,0.20533333333333334,0.037333333333333336,0.0,0.21333333333333335,0.013333333333333334,0.20533333333333334,0.17333333333333334,0.15733333333333333,0.24,0.16,0.042666666666666665,0.018666666666666668,0.072,0.088,0.04,0.27466666666666667,0.02666666666666667,0.0,0.18133333333333335,0.21066666666666667,0.14933333333333335,0.06133333333333333,0,0.184,0.232,0.12266666666666666,0.216,0.216,0.22133333333333333,0.07466666666666667,0.0,0.20266666666666666,0.23733333333333334,0.184,0.112,0.22666666666666666,0.0,0.0

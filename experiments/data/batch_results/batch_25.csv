0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
44359,0.774,0.754,0.552,0.766,0.496,0.774,0.724,0.768,0.76,0.738,0.764,0.744,0.776,0.74,0.732,0.752,0.778,0.54,0.558,0.76,0.554,0.684,0.764,0.74,0.492,0.732,0.692,0.776,0.762,0.778,0.502,0.69,0.77,0.746,0.758,0.734,0.726,0.77,0.646,0,0.76,0.724,0.662,0.762,0.776,0.714,0.662,0.77,0.688,0.754,0.72,0.764,0.528,0.582,0.492,0.556,0.782,0.676,0.658,0.642,0.708,0.748,0.758,0.732,0.722,0.76,0.75,0.728,0.5,0.758,0.76,0.77,0.48,0.738,0.764,0.74,0.564,0.496,0.732,0,0.766,0.57,0.726,0.0,0.496,0.476,0.634,0.556,0.76,0.76,0.5,0.724,0.776,0.772,0.732,0.648,0.76,0.754,0.536,0.632,0.746,0.626,0.764,0.672,0.564,0.642,0.758,0.662,0.486,0.758,0,0.748,0.496,0.546,0.77,0.764,0.762,0.76,0.564,0.746,0.7,0.75,0.564,0.5,0.72,0.692,0.5,0.782,0.504,0.74,0.754,0.716,0.658,0.57,0,0.76,0.772,0.55,0.778,0.776,0.764,0.724,0.684,0.758,0.766,0.748,0.632,0.772,0.74,0.774
44360,0.794,0.758,0.542,0.792,0.506,0.79,0.68,0.794,0.808,0.722,0.762,0.766,0.792,0.732,0.712,0.752,0.736,0.534,0.53,0.762,0.548,0.72,0.768,0.74,0.472,0.712,0.734,0.752,0.768,0.792,0.504,0.68,0.796,0.716,0.802,0.728,0.77,0.766,0.628,0,0.758,0.716,0.694,0.748,0.79,0.738,0.694,0.742,0.672,0.754,0.73,0.786,0.512,0.542,0.508,0.5,0.786,0.736,0.632,0.608,0.734,0.77,0.77,0.712,0.718,0.758,0.786,0.662,0.5,0.776,0.776,0.758,0.49,0.706,0.76,0.792,0.518,0.498,0.712,0,0.762,0.538,0.744,0.0,0.506,0.488,0.62,0.528,0.77,0.738,0.5,0.738,0.746,0.802,0.722,0.624,0.81,0.782,0.5,0.638,0.758,0.714,0.804,0.57,0.552,0.538,0.78,0.694,0.0,0.796,0,0.778,0.506,0.532,0.798,0.792,0.788,0.782,0.526,0.782,0.702,0.762,0.54,0.5,0.744,0.748,0.506,0.8,0.504,0.768,0.766,0.71,0.632,0.524,0,0.758,0.776,0.542,0.798,0.802,0.75,0.722,0.688,0.726,0.768,0.76,0.522,0.804,0.744,0.782
44361,0.758,0.71,0.526,0.782,0.496,0.762,0.676,0.754,0.748,0.674,0.75,0.746,0.76,0.704,0.698,0.746,0.692,0.51,0.54,0.77,0.538,0.736,0.768,0.718,0.502,0.698,0.674,0.698,0.776,0.77,0.51,0.7,0.766,0.74,0.748,0.698,0.702,0.738,0.644,0,0.76,0.706,0.642,0.742,0.76,0.698,0.642,0.752,0.666,0.752,0.724,0.746,0.49,0.578,0.488,0.542,0.752,0.682,0.61,0.584,0.704,0.756,0.768,0.698,0.71,0.762,0.742,0.678,0.5,0.766,0.744,0.766,0.534,0.722,0.746,0.748,0.538,0.496,0.698,0,0.74,0.556,0.756,0.0,0.496,0.498,0.59,0.534,0.762,0.744,0.5,0.71,0.702,0.752,0.714,0.662,0.76,0.748,0.558,0.602,0.736,0.682,0.768,0.644,0.482,0.604,0.754,0.642,0.544,0.762,0,0.752,0.496,0.52,0.756,0.746,0.748,0.742,0.618,0.738,0.624,0.736,0.55,0.5,0.728,0.694,0.524,0.756,0.5,0.74,0.73,0.7,0.62,0.554,0,0.762,0.752,0.52,0.76,0.758,0.708,0.722,0.614,0.738,0.76,0.734,0.51,0.764,0.728,0.78
44362,0.85,0.802,0.472,0.834,0.0,0.848,0.832,0.842,0.852,0.806,0.5,0.76,0.812,0.828,0.722,0.5,0.828,0.57,0.542,0.822,0.538,0.756,0.826,0.5,0.474,0.718,0.79,0.776,0.832,0.826,0.5,0.764,0.834,0.5,0.836,0.786,0.862,0.5,0.756,0,0.5,0.788,0.738,0.5,0.846,0.856,0.738,0.5,0.764,0.0,0.828,0.844,0.49,0.694,0.514,0.488,0.848,0.826,0.758,0.798,0.77,0.818,0.83,0.722,0.778,0.5,0.814,0.78,0.5,0.822,0.79,0.736,0.48,0.714,0.5,0.838,0.49,0.488,0.722,0,0.798,0.0,0.744,0.0,0.0,0.5,0.748,0.494,0.83,0.758,0.5,0.772,0.766,0.846,0.822,0.726,0.846,0.834,0.5,0.754,0.842,0.672,0.856,0.736,0.502,0.754,0.858,0.738,0.486,0.84,0,0.844,0.0,0.584,0.836,0.822,0.838,0.83,0.76,0.856,0.748,0.712,0.524,0.0,0.822,0.79,0.0,0.832,0.0,0.874,0.818,0.764,0.806,0.52,0,0.5,0.782,0.476,0.856,0.842,0.776,0.758,0.824,0.836,0.83,0.846,0.546,0.85,0.788,0.822
44363,0.828,0.748,0.518,0.818,0.0,0.826,0.832,0.816,0.832,0.82,0.5,0.732,0.802,0.772,0.716,0.5,0.828,0.562,0.566,0.814,0.558,0.772,0.798,0.5,0.498,0.716,0.82,0.77,0.824,0.81,0.508,0.702,0.802,0.5,0.834,0.752,0.844,0.5,0.74,0,0.5,0.8,0.68,0.5,0.818,0.826,0.68,0.5,0.742,0.0,0.766,0.824,0.508,0.67,0.468,0.516,0.852,0.828,0.77,0.816,0.77,0.824,0.8,0.716,0.818,0.5,0.81,0.788,0.5,0.81,0.768,0.724,0.488,0.708,0.5,0.836,0.538,0.512,0.716,0,0.77,0.0,0.754,0.0,0.0,0.52,0.776,0.546,0.828,0.752,0.5,0.726,0.7,0.848,0.832,0.75,0.836,0.838,0.516,0.772,0.836,0.77,0.83,0.712,0.534,0.77,0.82,0.68,0.49,0.83,0,0.824,0.0,0.536,0.806,0.818,0.838,0.8,0.766,0.814,0.768,0.726,0.542,0.0,0.764,0.752,0.0,0.81,0.0,0.838,0.794,0.788,0.806,0.54,0,0.5,0.746,0.508,0.842,0.814,0.766,0.748,0.828,0.824,0.808,0.828,0.736,0.838,0.8,0.798
44364,0.808,0.792,0.476,0.79,0.0,0.808,0.832,0.812,0.828,0.79,0.5,0.746,0.794,0.778,0.716,0.5,0.828,0.576,0.526,0.796,0.524,0.756,0.792,0.5,0.488,0.698,0.77,0.784,0.81,0.79,0.474,0.804,0.8,0.5,0.79,0.784,0.85,0.5,0.758,0,0.5,0.764,0.72,0.5,0.816,0.808,0.72,0.5,0.706,0.0,0.77,0.808,0.5,0.636,0.506,0.492,0.83,0.782,0.744,0.786,0.762,0.81,0.784,0.716,0.752,0.5,0.782,0.766,0.5,0.786,0.772,0.754,0.454,0.75,0.5,0.824,0.514,0.51,0.716,0,0.776,0.0,0.75,0.0,0.0,0.508,0.744,0.506,0.792,0.782,0.5,0.778,0.746,0.828,0.786,0.736,0.826,0.79,0.494,0.732,0.824,0.766,0.832,0.708,0.476,0.76,0.81,0.72,0.502,0.834,0,0.836,0.0,0.566,0.802,0.78,0.808,0.8,0.752,0.82,0.766,0.74,0.54,0.0,0.732,0.794,0.0,0.788,0.0,0.85,0.784,0.76,0.776,0.526,0,0.5,0.764,0.482,0.84,0.804,0.782,0.77,0.796,0.804,0.816,0.79,0.528,0.814,0.772,0.784
44365,0.844,0.804,0.542,0.838,0.0,0.856,0.822,0.862,0.862,0.814,0.5,0.776,0.848,0.81,0.746,0.5,0.848,0.6,0.582,0.83,0.556,0.778,0.816,0.5,0.49,0.746,0.794,0.812,0.834,0.832,0.5,0.766,0.834,0.5,0.832,0.756,0.862,0.5,0.758,0,0.5,0.8,0.73,0.5,0.862,0.852,0.73,0.5,0.766,0.0,0.81,0.858,0.486,0.674,0.522,0.544,0.858,0.808,0.776,0.8,0.734,0.822,0.834,0.746,0.782,0.5,0.808,0.814,0.5,0.818,0.808,0.784,0.488,0.698,0.5,0.862,0.532,0.526,0.746,0,0.806,0.0,0.774,0.0,0.0,0.486,0.78,0.544,0.83,0.792,0.5,0.786,0.762,0.86,0.812,0.742,0.852,0.804,0.538,0.794,0.844,0.704,0.854,0.708,0.5,0.75,0.862,0.73,0.0,0.848,0,0.846,0.0,0.556,0.84,0.824,0.868,0.832,0.772,0.856,0.786,0.75,0.542,0.0,0.794,0.806,0.0,0.846,0.0,0.86,0.818,0.836,0.828,0.556,0,0.5,0.8,0.544,0.864,0.852,0.812,0.79,0.8,0.804,0.838,0.826,0.548,0.854,0.798,0.832
44366,0.848,0.772,0.51,0.84,0.0,0.84,0.816,0.86,0.866,0.824,0.5,0.778,0.85,0.818,0.728,0.5,0.844,0.578,0.582,0.822,0.562,0.816,0.81,0.5,0.486,0.728,0.814,0.804,0.834,0.828,0.522,0.806,0.842,0.5,0.858,0.796,0.868,0.5,0.754,0,0.5,0.774,0.786,0.5,0.856,0.86,0.786,0.5,0.766,0.0,0.82,0.852,0.538,0.638,0.456,0.55,0.876,0.812,0.778,0.804,0.798,0.814,0.822,0.728,0.808,0.5,0.848,0.786,0.5,0.826,0.812,0.78,0.486,0.732,0.5,0.848,0.552,0.51,0.728,0,0.798,0.0,0.76,0.0,0.0,0.462,0.774,0.54,0.824,0.782,0.5,0.768,0.756,0.864,0.832,0.0,0.862,0.83,0.534,0.78,0.862,0.682,0.862,0.718,0.502,0.746,0.86,0.786,0.526,0.866,0,0.86,0.0,0.506,0.834,0.834,0.866,0.836,0.794,0.838,0.826,0.746,0.522,0.0,0.764,0.764,0.0,0.846,0.0,0.852,0.84,0.848,0.834,0.506,0,0.5,0.784,0.534,0.868,0.854,0.804,0.77,0.808,0.838,0.832,0.824,0.54,0.858,0.858,0.838
44367,0.742,0.704,0.612,0.766,0.596,0.794,0.734,0.806,0.796,0.766,0.536,0.646,0.79,0.74,0.706,0.516,0.744,0.75,0.712,0.762,0.65,0.718,0.762,0.496,0.604,0.706,0.772,0.696,0.774,0.79,0.596,0.694,0.79,0.52,0.78,0.658,0.772,0.5,0.746,0,0.496,0.764,0.618,0.55,0.778,0.77,0.658,0.536,0.68,0.496,0.744,0.786,0.64,0.67,0.548,0.67,0.8,0.806,0.798,0.736,0.694,0.756,0.758,0.706,0.7,0.496,0.78,0.764,0.5,0.762,0.772,0.726,0.628,0.67,0.538,0.77,0.718,0.54,0.706,0,0.736,0.628,0.75,0.606,0.594,0.504,0.734,0.69,0.758,0.732,0.5,0.706,0.68,0.728,0.788,0.576,0.756,0.786,0.596,0.756,0.786,0.664,0.798,0.734,0.566,0.772,0.784,0.618,0.602,0.786,0,0.738,0.594,0.604,0.794,0.78,0.78,0.776,0.75,0.774,0.702,0.686,0.668,0.5,0.732,0.7,0.562,0.806,0.472,0.786,0.778,0.792,0.79,0.648,0,0.496,0.792,0.61,0.794,0.806,0.702,0.722,0.758,0.77,0.756,0.772,0.674,0.78,0.784,0.778
44368,0.726,0.748,0.598,0.758,0.566,0.764,0.754,0.788,0.76,0.772,0.564,0.696,0.768,0.744,0.698,0.578,0.76,0.71,0.684,0.74,0.616,0.696,0.736,0.5,0.634,0.698,0.754,0.738,0.74,0.774,0.622,0.708,0.78,0.57,0.788,0.678,0.79,0.5,0.732,0,0.504,0.738,0.654,0.57,0.756,0.794,0.654,0.564,0.708,0.504,0.748,0.772,0.656,0.706,0.516,0.628,0.788,0.79,0.788,0.744,0.686,0.744,0.74,0.698,0.754,0.504,0.764,0.752,0.5,0.746,0.74,0.698,0.584,0.682,0.562,0.788,0.666,0.526,0.698,0,0.72,0.57,0.724,0.0,0.556,0.508,0.744,0.672,0.734,0.708,0.5,0.766,0.712,0.73,0.786,0.566,0.754,0.774,0.562,0.758,0.788,0.704,0.77,0.726,0.57,0.74,0.764,0.654,0.578,0.768,0,0.74,0.556,0.542,0.764,0.754,0.76,0.742,0.762,0.792,0.694,0.668,0.63,0.5,0.738,0.756,0.512,0.768,0.508,0.774,0.768,0.754,0.774,0.632,0,0.504,0.784,0.592,0.792,0.77,0.732,0.728,0.76,0.742,0.742,0.758,0.696,0.76,0.738,0.766
44369,0.754,0.74,0.622,0.788,0.57,0.796,0.754,0.806,0.786,0.754,0.54,0.73,0.798,0.776,0.734,0.58,0.73,0.686,0.688,0.766,0.642,0.722,0.778,0.5,0.622,0.734,0.736,0.722,0.776,0.794,0.624,0.732,0.804,0.54,0.78,0.67,0.794,0.5,0.768,0,0.514,0.764,0.628,0.548,0.79,0.782,0.628,0.54,0.68,0.0,0.78,0.782,0.668,0.702,0.534,0.636,0.806,0.77,0.77,0.752,0.722,0.766,0.774,0.734,0.744,0.514,0.766,0.762,0.5,0.776,0.778,0.712,0.6,0.64,0.54,0.788,0.676,0.536,0.734,0,0.75,0.64,0.772,0.0,0.576,0.512,0.76,0.682,0.774,0.744,0.5,0.746,0.718,0.766,0.774,0.552,0.768,0.768,0.562,0.742,0.776,0.668,0.8,0.744,0.57,0.772,0.8,0.628,0.574,0.794,0,0.764,0.576,0.766,0.796,0.762,0.792,0.776,0.71,0.804,0.732,0.69,0.64,0.5,0.736,0.728,0.584,0.794,0.554,0.794,0.764,0.774,0.772,0.652,0,0.514,0.802,0.624,0.814,0.79,0.722,0.744,0.75,0.77,0.774,0.766,0.728,0.788,0.772,0.784
44370,0.754,0.682,0.618,0.772,0.586,0.778,0.748,0.792,0.778,0.766,0.554,0.736,0.764,0.74,0.728,0.598,0.726,0.702,0.728,0.78,0.662,0.758,0.776,0.5,0.614,0.728,0.752,0.732,0.774,0.76,0.664,0.736,0.778,0.536,0.796,0.692,0.772,0.5,0.766,0,0.514,0.752,0.664,0.542,0.764,0.748,0.664,0.554,0.65,0.0,0.738,0.768,0.624,0.712,0.562,0.654,0.766,0.778,0.768,0.752,0.712,0.782,0.78,0.728,0.726,0.514,0.776,0.748,0.5,0.774,0.766,0.702,0.582,0.678,0.554,0.774,0.718,0.532,0.728,0,0.76,0.612,0.76,0.576,0.588,0.502,0.742,0.69,0.778,0.75,0.5,0.744,0.706,0.766,0.81,0.566,0.768,0.786,0.6,0.73,0.746,0.676,0.762,0.75,0.584,0.758,0.76,0.664,0.606,0.762,0,0.764,0.588,0.748,0.77,0.762,0.756,0.768,0.792,0.744,0.742,0.732,0.638,0.5,0.726,0.74,0.564,0.778,0.534,0.778,0.778,0.75,0.756,0.64,0,0.514,0.776,0.622,0.776,0.776,0.736,0.696,0.764,0.78,0.776,0.774,0.716,0.77,0.764,0.762
44371,0.748,0.77,0.652,0.772,0.622,0.794,0.746,0.812,0.8,0.766,0.508,0.728,0.786,0.772,0.716,0.526,0.744,0.722,0.742,0.762,0.692,0.744,0.758,0.5,0.572,0.716,0.736,0.71,0.758,0.786,0.652,0.69,0.788,0.544,0.786,0.672,0.816,0.5,0.76,0,0.494,0.774,0.602,0.556,0.776,0.786,0.602,0.508,0.654,0.5,0.776,0.786,0.64,0.678,0.512,0.66,0.798,0.792,0.786,0.756,0.694,0.76,0.764,0.716,0.75,0.494,0.776,0.762,0.5,0.76,0.76,0.746,0.584,0.654,0.506,0.79,0.718,0.57,0.716,0,0.746,0.586,0.764,0.61,0.61,0.504,0.762,0.71,0.77,0.746,0.5,0.748,0.714,0.76,0.776,0.552,0.764,0.778,0.618,0.748,0.788,0.718,0.792,0.724,0.578,0.786,0.798,0.602,0.612,0.778,0,0.742,0.61,0.756,0.772,0.786,0.794,0.778,0.762,0.8,0.746,0.71,0.664,0.5,0.74,0.782,0.62,0.806,0.524,0.798,0.78,0.792,0.776,0.63,0,0.494,0.8,0.652,0.802,0.8,0.74,0.72,0.756,0.76,0.766,0.788,0.714,0.776,0.77,0.76
44372,0.0,0.78,0.684,0.796,0.0,0.818,0.654,0.814,0.816,0.738,0.568,0.0,0.8,0.798,0.758,0.586,0.76,0.71,0.0,0.778,0.722,0.75,0.768,0.502,0.728,0.758,0.758,0.746,0.798,0.808,0.73,0.712,0.812,0.624,0.79,0.732,0.824,0.502,0.736,0,0.502,0.792,0.72,0.644,0.824,0.768,0.72,0.568,0.562,0.0,0.79,0.804,0.75,0.712,0.67,0.68,0.796,0.748,0.722,0.662,0.752,0.78,0.772,0.758,0.734,0.502,0.788,0.772,0.608,0.79,0.796,0.758,0.726,0.692,0.586,0.796,0.696,0.5,0.758,0,0.764,0.65,0.734,0.0,0.608,0.748,0.74,0.0,0.776,0.76,0.5,0.782,0.706,0.0,0.774,0.624,0.518,0.784,0.662,0.708,0.792,0.644,0.806,0.61,0.7,0.754,0.82,0.72,0.736,0.786,0,0.0,0.61,0.756,0.806,0.792,0.832,0.79,0.68,0.812,0.692,0.7,0.734,0.5,0.74,0.774,0.584,0.81,0.5,0.82,0.782,0.774,0.764,0.746,0,0.502,0.774,0.676,0.808,0.794,0.624,0.746,0.79,0.774,0.782,0.752,0.0,0.788,0.796,0.796
44373,0.0,0.79,0.64,0.76,0.0,0.796,0.606,0.806,0.814,0.73,0.558,0.0,0.772,0.784,0.734,0.604,0.73,0.688,0.0,0.746,0.676,0.676,0.74,0.5,0.716,0.734,0.72,0.688,0.754,0.814,0.654,0.656,0.776,0.62,0.77,0.686,0.79,0.482,0.67,0,0.506,0.78,0.666,0.594,0.812,0.786,0.686,0.558,0.584,0.0,0.802,0.794,0.716,0.666,0.64,0.676,0.78,0.732,0.686,0.658,0.746,0.74,0.742,0.734,0.726,0.506,0.782,0.756,0.494,0.756,0.75,0.73,0.72,0.642,0.592,0.81,0.688,0.5,0.734,0,0.744,0.63,0.672,0.708,0.578,0.748,0.694,0.0,0.758,0.736,0.5,0.8,0.762,0.0,0.776,0.594,0.578,0.752,0.614,0.686,0.804,0.64,0.776,0.714,0.666,0.704,0.83,0.666,0.72,0.75,0,0.0,0.578,0.718,0.812,0.784,0.806,0.782,0.672,0.812,0.63,0.658,0.724,0.5,0.758,0.776,0.566,0.79,0.502,0.802,0.774,0.77,0.746,0.71,0,0.506,0.766,0.65,0.79,0.794,0.584,0.746,0.766,0.744,0.744,0.758,0.0,0.782,0.764,0.776
44374,0.0,0.742,0.652,0.752,0.0,0.768,0.628,0.772,0.768,0.722,0.564,0.0,0.76,0.764,0.718,0.606,0.732,0.696,0.0,0.756,0.674,0.702,0.746,0.5,0.704,0.712,0.714,0.708,0.756,0.772,0.662,0.602,0.752,0.524,0.734,0.664,0.76,0.506,0.708,0,0.498,0.716,0.652,0.628,0.778,0.772,0.652,0.564,0.58,0.0,0.766,0.76,0.728,0.662,0.664,0.66,0.746,0.732,0.734,0.676,0.698,0.75,0.754,0.718,0.668,0.498,0.726,0.714,0.572,0.738,0.732,0.718,0.704,0.648,0.572,0.78,0.69,0.5,0.718,0,0.734,0.616,0.74,0.718,0.594,0.736,0.716,0.0,0.748,0.732,0.5,0.736,0.706,0.0,0.736,0.618,0.55,0.74,0.636,0.688,0.752,0.64,0.754,0.694,0.682,0.696,0.778,0.652,0.71,0.756,0,0.0,0.592,0.73,0.774,0.726,0.742,0.748,0.684,0.772,0.71,0.718,0.726,0.5,0.754,0.746,0.612,0.754,0.55,0.78,0.714,0.708,0.74,0.716,0,0.498,0.748,0.654,0.76,0.756,0.612,0.7,0.724,0.742,0.742,0.726,0.0,0.742,0.73,0.736
44375,0.0,0.75,0.668,0.752,0.0,0.768,0.632,0.794,0.77,0.714,0.536,0.0,0.768,0.722,0.714,0.59,0.736,0.702,0.0,0.746,0.714,0.726,0.736,0.5,0.706,0.71,0.69,0.73,0.762,0.764,0.686,0.614,0.756,0.612,0.728,0.692,0.782,0.512,0.724,0,0.5,0.752,0.67,0.6,0.772,0.726,0.67,0.54,0.548,0.0,0.73,0.772,0.706,0.686,0.668,0.662,0.754,0.724,0.714,0.668,0.668,0.754,0.746,0.714,0.716,0.5,0.734,0.712,0.588,0.744,0.722,0.736,0.678,0.67,0.586,0.758,0.672,0.5,0.714,0,0.718,0.62,0.74,0.704,0.61,0.718,0.706,0.0,0.746,0.718,0.5,0.742,0.706,0.0,0.75,0.616,0.512,0.744,0.616,0.716,0.764,0.686,0.75,0.716,0.69,0.722,0.77,0.67,0.714,0.778,0,0.0,0.61,0.712,0.76,0.742,0.78,0.77,0.694,0.774,0.662,0.706,0.74,0.5,0.698,0.748,0.622,0.77,0.54,0.762,0.738,0.746,0.73,0.726,0,0.5,0.714,0.674,0.758,0.778,0.614,0.706,0.708,0.754,0.74,0.74,0.0,0.752,0.764,0.756
44376,0.0,0.728,0.648,0.762,0.0,0.794,0.602,0.8,0.806,0.706,0.57,0.0,0.778,0.77,0.722,0.59,0.72,0.692,0.0,0.75,0.7,0.664,0.754,0.5,0.742,0.72,0.75,0.726,0.762,0.792,0.706,0.656,0.782,0.578,0.772,0.702,0.764,0.522,0.686,0,0.502,0.768,0.664,0.584,0.798,0.772,0.664,0.54,0.586,0.0,0.762,0.792,0.686,0.662,0.652,0.674,0.778,0.76,0.71,0.662,0.73,0.758,0.744,0.722,0.706,0.502,0.76,0.75,0.498,0.762,0.75,0.732,0.736,0.696,0.598,0.784,0.69,0.5,0.722,0,0.752,0.59,0.726,0.708,0.618,0.754,0.728,0.0,0.752,0.756,0.5,0.764,0.744,0.0,0.762,0.596,0.51,0.778,0.608,0.704,0.794,0.658,0.766,0.602,0.674,0.712,0.804,0.664,0.742,0.76,0,0.0,0.618,0.732,0.784,0.744,0.794,0.776,0.714,0.778,0.664,0.65,0.722,0.5,0.756,0.77,0.558,0.792,0.544,0.806,0.742,0.766,0.746,0.704,0,0.502,0.774,0.646,0.786,0.784,0.578,0.738,0.756,0.752,0.75,0.762,0.0,0.776,0.772,0.772
44377,0.742,0.726,0.68,0.746,0.0,0.738,0.612,0.75,0.718,0.722,0.534,0.672,0.744,0.714,0.654,0.538,0.612,0.716,0.688,0.732,0.694,0.706,0.732,0.522,0.606,0.642,0.67,0.612,0.73,0.742,0.666,0.668,0.754,0.532,0.754,0.642,0.728,0.576,0.712,0,0.522,0.676,0.562,0.566,0.732,0.718,0.562,0.534,0.614,0.0,0.71,0.72,0.574,0.562,0.604,0.694,0.762,0.704,0.628,0.66,0.654,0.728,0.724,0.654,0.642,0.522,0.716,0.712,0.504,0.732,0.734,0.704,0.65,0.584,0.532,0.714,0.688,0.5,0.654,0,0.714,0.0,0.75,0.682,0.0,0.69,0.632,0.672,0.736,0.692,0.5,0.718,0.638,0.74,0.718,0.574,0.75,0.736,0.632,0.644,0.702,0.666,0.754,0.688,0.586,0.666,0.742,0.562,0.58,0.772,0,0.708,0.0,0.648,0.72,0.708,0.746,0.734,0.698,0.742,0.708,0.614,0.614,0.0,0.734,0.72,0.0,0.716,0.0,0.728,0.704,0.696,0.702,0.598,0,0.522,0.738,0.68,0.754,0.736,0.612,0.724,0.706,0.746,0.736,0.704,0.698,0.738,0.686,0.736
44378,0.738,0.678,0.672,0.722,0.0,0.732,0.616,0.724,0.714,0.698,0.49,0.666,0.734,0.684,0.644,0.522,0.614,0.688,0.702,0.732,0.658,0.702,0.72,0.5,0.596,0.644,0.67,0.604,0.746,0.736,0.604,0.594,0.766,0.536,0.716,0.668,0.728,0.558,0.726,0,0.5,0.722,0.566,0.546,0.726,0.72,0.566,0.508,0.652,0.0,0.698,0.718,0.552,0.644,0.616,0.668,0.746,0.668,0.65,0.676,0.666,0.726,0.714,0.644,0.678,0.5,0.71,0.734,0.5,0.732,0.71,0.694,0.654,0.618,0.506,0.704,0.674,0.5,0.644,0,0.678,0.0,0.718,0.632,0.0,0.656,0.604,0.678,0.728,0.656,0.5,0.692,0.642,0.742,0.684,0.566,0.756,0.706,0.616,0.634,0.728,0.6,0.742,0.71,0.618,0.722,0.734,0.566,0.626,0.75,0,0.722,0.0,0.646,0.736,0.678,0.698,0.69,0.7,0.748,0.67,0.616,0.548,0.0,0.684,0.672,0.0,0.7,0.0,0.746,0.702,0.71,0.676,0.532,0,0.5,0.74,0.666,0.766,0.714,0.614,0.71,0.692,0.744,0.718,0.706,0.652,0.74,0.712,0.736

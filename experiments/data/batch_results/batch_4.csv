0,"Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.2)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=11,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=43))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.15000000000000002)),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.3, min_samples_leaf=11,
                                        min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', LogisticRegression(C=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.1, min_samples_leaf=2,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=12,
                                            min_samples_split=4,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.4, whiten='unit-variance')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=18,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer(norm='max')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.15000000000000002,
                                            min_samples_leaf=2,
                                            min_samples_split=18,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=9,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PolynomialFeatures(include_bias=False)),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(bootstrap=False,
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.4)),
                ('0',
                 KNeighborsClassifier(n_neighbors=15, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()), ('0', LogisticRegression(C=25.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.7000000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=41, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=27, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.014)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.25,
                                      min_samples_leaf=4,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=20,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=37))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.7000000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=14,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.75, whiten='unit-variance')),
                ('1', RBFSampler(gamma=0.1)),
                ('0', KNeighborsClassifier(n_neighbors=25))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=10.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=17,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=7,
                                            max_features=0.2,
                                            min_samples_leaf=5,
                                            min_samples_split=15,
                                            subsample=0.8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='laplacian',
                          n_components=5)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.8,
                                            min_samples_leaf=13,
                                            min_samples_split=14,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', FastICA(tol=0.7000000000000001, whiten='unit-variance')),
                ('1', SelectPercentile(percentile=16)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=3,
                                      min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.2)),
                ('0', KNeighborsClassifier(n_neighbors=29, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.9500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=5, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=2,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=10,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.8500000000000001)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=1,
                                            max_features=0.55,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.2))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=32)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.8,
                                      min_samples_leaf=10,
                                      min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0', LogisticRegression())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.007)),
                ('0',
                 GradientBoostingClassifier(max_depth=5,
                                            max_features=0.9500000000000001,
                                            min_samples_leaf=11,
                                            min_samples_split=12,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_leaf=3,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Binarizer(threshold=0.35000000000000003)),
                ('0',
                 GradientBoostingClassifier(max_depth=10,
                                            max_features=0.35000000000000003,
                                            min_samples_leaf=11,
                                            min_samples_split=9,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=1.0, max_depth=5,
                                            max_features=0.9000000000000001,
                                            min_samples_leaf=18,
                                            min_samples_split=7,
                                            subsample=0.7000000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=10, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=5,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.1)), ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=1.0,
                                            min_samples_leaf=16,
                                            min_samples_split=15,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=1, svd_solver='randomized')),
                ('1', Binarizer(threshold=0.45)),
                ('0',
                 RandomForestClassifier(max_features=0.55, min_samples_leaf=3,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer()), ('1', SelectFwe(alpha=0.019)),
                ('0',
                 RandomForestClassifier(max_features=0.5, min_samples_leaf=19,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.8,
                                        min_samples_leaf=9,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=7, max_features=0.1,
                                            min_samples_leaf=8,
                                            min_samples_split=3,
                                            subsample=0.35000000000000003))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l1', linkage='average')),
                ('0',
                 KNeighborsClassifier(n_neighbors=21, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', Binarizer(threshold=0.55)),
                ('0', KNeighborsClassifier(n_neighbors=6, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.7000000000000001)),
                ('1', StandardScaler()),
                ('0', KNeighborsClassifier(n_neighbors=42))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', KNeighborsClassifier(n_neighbors=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.9500000000000001, whiten='unit-variance')),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', RBFSampler(gamma=0.9500000000000001)),
                ('0',
                 ExtraTreesClassifier(max_features=0.1, min_samples_leaf=10,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0', KNeighborsClassifier(n_neighbors=22))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=8,
                                        min_samples_leaf=17,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=18,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.7000000000000001,
                                      min_samples_leaf=16,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=8,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.1, whiten='unit-variance')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=5,
                                        min_samples_leaf=12,
                                        min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', PCA(iterated_power=8, svd_solver='randomized')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=9,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=43)),
                ('0',
                 RandomForestClassifier(max_features=0.8500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.15000000000000002, kernel='polynomial',
                          n_components=1)),
                ('0', LogisticRegression(C=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=15,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.7500000000000001,
                                            min_samples_leaf=9,
                                            min_samples_split=3,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=1,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=8,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.5)),
                ('0',
                 ExtraTreesClassifier(max_features=0.8500000000000001,
                                      min_samples_leaf=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=3,
                                        min_samples_leaf=20,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Binarizer(threshold=0.15000000000000002)),
                ('1', SelectPercentile(percentile=34)),
                ('0',
                 RandomForestClassifier(max_features=0.2, min_samples_leaf=13,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=10, max_features=0.1,
                                            min_samples_leaf=10,
                                            min_samples_split=11,
                                            subsample=0.3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', Normalizer(norm='l1')), ('1', Binarizer(threshold=0.65)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=2,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=3,
                                        min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 FeatureAgglomeration(affinity='precomputed',
                                      linkage='complete')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01,
                                            max_features=0.3,
                                            min_samples_leaf=19,
                                            min_samples_split=19,
                                            subsample=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 Nystroem(gamma=0.5, kernel='additive_chi2', n_components=9)),
                ('1', RobustScaler()),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=7,
                                        min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=56)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.45, min_samples_leaf=4,
                                      min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.2)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=10,
                                        min_samples_split=7))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.1)),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', KNeighborsClassifier(n_neighbors=15, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()), ('0', LogisticRegression(C=0.01))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.6500000000000001)),
                ('0',
                 KNeighborsClassifier(n_neighbors=50, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=12,
                                      min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.01, max_depth=9,
                                            max_features=0.55,
                                            min_samples_leaf=16,
                                            min_samples_split=19,
                                            subsample=0.05))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', RBFSampler(gamma=0.0)),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=1, min_samples_leaf=17,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 DecisionTreeClassifier(max_depth=9, min_samples_leaf=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.3)),
                ('0',
                 GradientBoostingClassifier(max_depth=2, max_features=1.0,
                                            min_samples_leaf=14,
                                            min_samples_split=3,
                                            subsample=0.7500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.25, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=4,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.016)),
                ('0', MultinomialNB(alpha=100.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.1)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6000000000000001,
                                      min_samples_leaf=6,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0',
                 ExtraTreesClassifier(max_features=0.6000000000000001,
                                      min_samples_leaf=10,
                                      min_samples_split=18))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.9500000000000001, kernel='polynomial',
                          n_components=5)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.25, min_samples_leaf=18,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0', KNeighborsClassifier(n_neighbors=20, p=1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=4,
                                            max_features=0.2,
                                            min_samples_leaf=19,
                                            min_samples_split=3,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.6000000000000001, whiten='unit-variance')),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.6500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('3', RobustScaler()), ('2', SelectPercentile(percentile=13)),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.75)),
                ('0',
                 KNeighborsClassifier(n_neighbors=37, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectFwe(alpha=0.027)),
                ('1', SelectPercentile(percentile=44)),
                ('0',
                 KNeighborsClassifier(n_neighbors=47, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.8500000000000001,
                                        min_samples_leaf=6,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=1,
                                        min_samples_split=6))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RBFSampler(gamma=0.6000000000000001)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.55, min_samples_leaf=2,
                                        min_samples_split=19))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.4,
                                      min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.25,
                                        min_samples_leaf=17,
                                        min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.8)),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.5, max_depth=2,
                                            max_features=0.1,
                                            min_samples_leaf=20,
                                            min_samples_split=13,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', MultinomialNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', SelectPercentile(percentile=58)),
                ('1', RBFSampler(gamma=0.9)),
                ('0', LogisticRegression(C=15.0))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.6000000000000001,
                                        min_samples_leaf=11,
                                        min_samples_split=4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=8, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(max_features=0.45, min_samples_leaf=9,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 GradientBoostingClassifier(max_features=0.15000000000000002,
                                            min_samples_split=16,
                                            subsample=0.5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MaxAbsScaler()),
                ('0',
                 RandomForestClassifier(criterion='entropy',
                                        max_features=0.15000000000000002,
                                        min_samples_leaf=18,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.042)),
                ('0',
                 KNeighborsClassifier(n_neighbors=18, weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.7500000000000001,
                                        min_samples_leaf=7,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.15000000000000002,
                                      min_samples_leaf=20,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', StandardScaler()), ('1', RobustScaler()),
                ('0', BernoulliNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration()),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.7500000000000001,
                                      min_samples_leaf=5,
                                      min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.05, kernel='additive_chi2', n_components=1)),
                ('0', MultinomialNB(alpha=0.001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2', MaxAbsScaler()),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 DecisionTreeClassifier(max_depth=8, min_samples_split=17))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', MinMaxScaler()),
                ('0',
                 DecisionTreeClassifier(criterion='entropy', max_depth=9,
                                        min_samples_leaf=3,
                                        min_samples_split=16))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1',
                 Nystroem(gamma=0.2, kernel='additive_chi2', n_components=1)),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.35000000000000003,
                                      min_samples_leaf=13,
                                      min_samples_split=15))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(max_features=0.1, min_samples_leaf=6,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('2',
                 FeatureAgglomeration(affinity='cosine', linkage='complete')),
                ('1', MaxAbsScaler()),
                ('0', MultinomialNB(alpha=10.0, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 GradientBoostingClassifier(max_depth=8,
                                            max_features=0.8500000000000001,
                                            min_samples_leaf=8,
                                            subsample=0.45))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=7, svd_solver='randomized')),
                ('0',
                 RandomForestClassifier(bootstrap=False, max_features=0.5,
                                        min_samples_leaf=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.049)),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.35000000000000003,
                                        min_samples_split=20))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', StandardScaler()),
                ('0',
                 KNeighborsClassifier(n_neighbors=17, p=1,
                                      weights='distance'))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(affinity='l2', linkage='average')),
                ('0',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features=0.9000000000000001,
                                        min_samples_leaf=12,
                                        min_samples_split=5))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', RobustScaler()),
                ('0', MultinomialNB(alpha=0.01, fit_prior=False))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', BernoulliNB(alpha=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', Normalizer(norm='l1')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      max_features=0.8500000000000001,
                                      min_samples_split=3))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=3, svd_solver='randomized')),
                ('0', KNeighborsClassifier(n_neighbors=41))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8500000000000001,
                                      min_samples_leaf=2,
                                      min_samples_split=8))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 RandomForestClassifier(criterion='entropy', max_features=0.1,
                                        min_samples_leaf=4,
                                        min_samples_split=13))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0', LogisticRegression(C=0.1))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=80)),
                ('0',
                 DecisionTreeClassifier(max_depth=6, min_samples_leaf=3,
                                        min_samples_split=12))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PCA(iterated_power=2, svd_solver='randomized')),
                ('0',
                 GradientBoostingClassifier(learning_rate=0.001, max_depth=9,
                                            max_features=0.1,
                                            min_samples_leaf=3,
                                            min_samples_split=3,
                                            subsample=0.4))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectPercentile(percentile=86)),
                ('0',
                 ExtraTreesClassifier(criterion='entropy', max_features=0.8,
                                      min_samples_leaf=12,
                                      min_samples_split=14))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, max_features=0.45,
                                      min_samples_leaf=11,
                                      min_samples_split=11))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', FastICA(tol=0.55, whiten='unit-variance')),
                ('0',
                 RandomForestClassifier(max_features=0.3, min_samples_leaf=19,
                                        min_samples_split=9))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold(threshold=0.35000000000000003)),
                ('0', GaussianNB())])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('0',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features=0.55, min_samples_leaf=5,
                                      min_samples_split=10))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', SelectFwe(alpha=0.025)),
                ('0',
                 GradientBoostingClassifier(max_depth=4,
                                            max_features=0.35000000000000003,
                                            min_samples_split=4,
                                            subsample=0.9500000000000001))])","Pipeline(steps=[('imputation', SimpleImputer(strategy='median')),
                ('1', PolynomialFeatures(include_bias=False)),
                ('0',
                 ExtraTreesClassifier(max_features=0.9000000000000001,
                                      min_samples_leaf=19,
                                      min_samples_split=10))])"
474,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
475,0.39,0.41,0.38,0.16,0.38,0.38,0.33,0.15,0.37,0.37,0.25,0.38,0.28,0.43,0.37,0.13,0.34,0.37,0.41,0.29,0.44,0.37,0.3,0.3,0.3,0.37,0.37,0.34,0.32,0.39,0.36,0.38,0.42,0.39,0.3,0.48,0.41,0.34,0.31,0,0.25,0.38,0.37,0.27,0.44,0.44,0.37,0.29,0.21,0.34,0.48,0.36,0.4,0.06,0.26,0.47,0.28,0.2,0.08,0.39,0.44,0.22,0.33,0.37,0.41,0.25,0.34,0.39,0.24,0.31,0.38,0.46,0.28,0.39,0.23,0.36,0.39,0.38,0.37,0,0.25,0.37,0.32,0.33,0.38,0.26,0.25,0.41,0.22,0.25,0.25,0.43,0.4,0.41,0.32,0.25,0.28,0.25,0.25,0.39,0.41,0.3,0.27,0.37,0.23,0.0,0.44,0.37,0.28,0.19,0,0.44,0.38,0.46,0.45,0.32,0.39,0.32,0.42,0.41,0.12,0.32,0.36,0.25,0.36,0.39,0.38,0.26,0.35,0.42,0.39,0.41,0.09,0.32,0,0.25,0.42,0.38,0.39,0.2,0.36,0.43,0.16,0.32,0.23,0.37,0.41,0.29,0.4,0.43
488,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
694,0.9615384615384616,0.9871794871794872,0.6410256410256411,0.8333333333333334,0.6282051282051282,0.8974358974358975,0.6153846153846154,0.9358974358974359,0.9615384615384616,0.7307692307692307,0.1282051282051282,0.8846153846153846,0.8846153846153846,1.0,0.2564102564102564,0.1794871794871795,0.8974358974358975,0.9871794871794872,0.9358974358974359,0.7051282051282052,0.782051282051282,0.8717948717948718,0.7435897435897436,0.1282051282051282,0.20512820512820512,0.2564102564102564,0.717948717948718,0.9743589743589743,0.8076923076923077,0.9615384615384616,0.5512820512820513,0.5384615384615384,0.9615384615384616,0.2564102564102564,0.9871794871794872,0.8717948717948718,0.4358974358974359,0.1282051282051282,0.7948717948717948,0,0.1282051282051282,0.9871794871794872,0.2564102564102564,0.19230769230769232,0.9871794871794872,0.4358974358974359,0.2564102564102564,0.1282051282051282,0.5897435897435898,0.0,1.0,0.9487179487179487,0.9230769230769231,0.44871794871794873,0.19230769230769232,0.9230769230769231,0.9358974358974359,0.8461538461538461,1.0,0.7435897435897436,0.8717948717948718,0.6794871794871795,0.717948717948718,0.2564102564102564,0.5641025641025641,0.1282051282051282,0.9230769230769231,0.9871794871794872,0.1282051282051282,0.6923076923076923,0.9871794871794872,0.9102564102564102,0.24358974358974358,0.7564102564102564,0.2564102564102564,0.9358974358974359,0.9615384615384616,0.1282051282051282,0.2564102564102564,0,0.1282051282051282,0.2564102564102564,0.8461538461538461,0.3076923076923077,0.6794871794871795,0.2948717948717949,0.47435897435897434,0.9358974358974359,0.7564102564102564,0.1282051282051282,0.1282051282051282,1.0,0.8717948717948718,1.0,0.8333333333333334,0.5641025641025641,0.9230769230769231,0.8846153846153846,0.6410256410256411,0.8846153846153846,0.9487179487179487,0.8076923076923077,0.9358974358974359,1.0,0.11538461538461539,0.8974358974358975,0.9871794871794872,0.2564102564102564,0.1282051282051282,0.9487179487179487,0,1.0,0.6794871794871795,0.21794871794871795,1.0,0.9230769230769231,0.9230769230769231,0.717948717948718,0.9615384615384616,0.9871794871794872,0.6282051282051282,0.44871794871794873,0.8974358974358975,0.1282051282051282,0.9871794871794872,0.9871794871794872,0.6410256410256411,0.9102564102564102,0.14102564102564102,0.9871794871794872,0.9487179487179487,0.9358974358974359,0.9615384615384616,0.8974358974358975,0,0.1282051282051282,1.0,0.6666666666666666,0.9743589743589743,0.9230769230769231,0.9615384615384616,1.0,0.782051282051282,0.8461538461538461,0.782051282051282,0.7051282051282052,0.8333333333333334,0.8717948717948718,0.9487179487179487,0.9615384615384616
715,0.9,0.848,0.644,0.88,0.0,0.888,0.596,0.84,0.86,0.628,0.668,0.66,0.876,0.0,0.676,0.592,0.576,0.708,0.728,0.832,0.744,0.896,0.836,0.66,0.528,0.676,0.508,0.576,0.884,0.556,0.556,0.584,0.932,0.656,0.76,0.716,0.92,0.608,0.872,0,0.664,0.92,0.6,0.632,0.896,0.872,0.6,0.556,0.624,0.72,0.88,0.828,0.56,0.608,0.516,0.636,0.908,0.62,0.568,0.644,0.7,0.824,0.844,0.676,0.708,0.664,0.78,0.88,0.556,0.848,0.908,0.804,0.572,0.788,0.684,0.832,0.652,0.556,0.676,0,0.672,0.0,0.884,0.464,0.0,0.568,0.58,0.64,0.836,0.676,0.556,0.844,0.848,0.908,0.66,0.0,0.916,0.76,0.556,0.716,0.904,0.604,0.92,0.936,0.5,0.58,0.916,0.6,0.496,0.908,0,0.82,0.0,0.572,0.928,0.78,0.856,0.784,0.94,0.876,0.708,0.66,0.644,0.0,0.864,0.848,0.0,0.784,0.0,0.908,0.788,0.908,0.712,0.524,0,0.672,0.852,0.624,0.924,0.776,0.588,0.852,0.556,0.9,0.836,0.616,0.592,0.884,0.924,0.92
717,0.8582677165354331,0.8346456692913385,0.8031496062992126,0.8503937007874016,0.84251968503937,0.8582677165354331,0.8976377952755905,0.8740157480314961,0.8976377952755905,0.84251968503937,0.5590551181102362,0.8267716535433071,0.8503937007874016,0.8582677165354331,0.8267716535433071,0.4409448818897638,0.905511811023622,0.8110236220472441,0.8346456692913385,0.8582677165354331,0.8110236220472441,0.8582677165354331,0.8582677165354331,0.5590551181102362,0.5039370078740157,0.8267716535433071,0.8110236220472441,0.889763779527559,0.8582677165354331,0.5590551181102362,0.5590551181102362,0.8031496062992126,0.8740157480314961,0.5590551181102362,0.8346456692913385,0.7401574803149606,0.9212598425196851,0.5590551181102362,0.8661417322834646,0,0.5590551181102362,0.8976377952755905,0.7086614173228346,0.5590551181102362,0.84251968503937,0.905511811023622,0.7086614173228346,0.5590551181102362,0.7637795275590551,0.0,0.8582677165354331,0.889763779527559,0.6850393700787402,0.7795275590551181,0.5039370078740157,0.8110236220472441,0.8582677165354331,0.8188976377952756,0.8740157480314961,0.8346456692913385,0.7795275590551181,0.8503937007874016,0.8503937007874016,0.8267716535433071,0.7874015748031497,0.5590551181102362,0.7952755905511811,0.8661417322834646,0.5590551181102362,0.8582677165354331,0.8582677165354331,0.9133858267716536,0.5039370078740157,0.8582677165354331,0.5590551181102362,0.8818897637795275,0.8110236220472441,0.5590551181102362,0.8267716535433071,0,0.8346456692913385,0.7716535433070866,0.8503937007874016,0.48031496062992124,0.84251968503937,0.5039370078740157,0.8346456692913385,0.8031496062992126,0.8582677165354331,0.5590551181102362,0.5590551181102362,0.8661417322834646,0.8582677165354331,0.8976377952755905,0.8818897637795275,0.8188976377952756,0.8582677165354331,0.8346456692913385,0.6692913385826772,0.8267716535433071,0.9212598425196851,0.8503937007874016,0.8661417322834646,0.8503937007874016,0.5511811023622047,0.8267716535433071,0.889763779527559,0.7086614173228346,0.4645669291338583,0.8503937007874016,0,0.8661417322834646,0.84251968503937,0.5669291338582677,0.8818897637795275,0.8188976377952756,0.8661417322834646,0.84251968503937,0.8188976377952756,0.8818897637795275,0.7401574803149606,0.8188976377952756,0.7244094488188977,0.5590551181102362,0.8582677165354331,0.8582677165354331,0.5590551181102362,0.8346456692913385,0.5511811023622047,0.905511811023622,0.7795275590551181,0.84251968503937,0.8346456692913385,0.7401574803149606,0,0.5590551181102362,0.8818897637795275,0.8031496062992126,0.8661417322834646,0.84251968503937,0.889763779527559,0.8503937007874016,0.5590551181102362,0.8582677165354331,0.8503937007874016,0.889763779527559,0.8110236220472441,0.8582677165354331,0.889763779527559,0.8346456692913385
718,0.876,0.88,0.604,0.856,0.0,0.884,0.656,0.86,0.876,0.592,0.716,0.66,0.86,0.0,0.708,0.632,0.652,0.632,0.688,0.876,0.664,0.848,0.876,0.712,0.54,0.708,0.536,0.656,0.896,0.0,0.564,0.628,0.0,0.704,0.648,0.616,0.896,0.572,0.896,0,0.7,0.828,0.564,0.692,0.86,0.9,0.564,0.564,0.616,0.728,0.0,0.856,0.564,0.584,0.58,0.608,0.888,0.64,0.576,0.592,0.672,0.848,0.864,0.708,0.584,0.7,0.684,0.896,0.564,0.876,0.872,0.828,0.556,0.836,0.716,0.864,0.616,0.564,0.708,0,0.716,0.0,0.88,0.488,0.0,0.524,0.628,0.6,0.844,0.7,0.564,0.872,0.848,0.872,0.66,0.0,0.896,0.668,0.564,0.636,0.892,0.584,0.892,0.912,0.552,0.608,0.876,0.564,0.532,0.864,0,0.82,0.0,0.556,0.0,0.668,0.864,0.828,0.832,0.904,0.72,0.704,0.604,0.0,0.82,0.86,0.0,0.84,0.0,0.884,0.664,0.836,0.656,0.496,0,0.72,0.872,0.608,0.912,0.86,0.64,0.84,0.564,0.9,0.852,0.596,0.64,0.884,0.844,0.0
720,0.7311004784688995,0.7703349282296651,0.785645933014354,0.7866028708133971,0.7052631578947368,0.7952153110047847,0.7712918660287081,0.7703349282296651,0.783732057416268,0.7961722488038278,0.7301435406698564,0.0,0.7942583732057417,0.7626794258373206,0.7464114832535885,0.7368421052631579,0.7923444976076555,0.783732057416268,0.0,0.7875598086124402,0.783732057416268,0.7789473684210526,0.7933014354066986,0.7052631578947368,0.7990430622009569,0.7464114832535885,0.7712918660287081,0.7904306220095694,0.785645933014354,0.7952153110047847,0.755023923444976,0.7320574162679426,0.7952153110047847,0.7502392344497608,0.7961722488038278,0.7645933014354067,0.7626794258373206,0.7205741626794259,0.783732057416268,0,0.7052631578947368,0.7875598086124402,0.7043062200956938,0.738755980861244,0.7952153110047847,0.7416267942583732,0.7043062200956938,0.7311004784688995,0.7100478468899522,0.7052631578947368,0.7789473684210526,0.7703349282296651,0.7148325358851675,0.7100478468899522,0.7885167464114833,0.7913875598086124,0.7933014354066986,0.7808612440191387,0.7933014354066986,0.7866028708133971,0.7607655502392344,0.785645933014354,0.7904306220095694,0.7464114832535885,0.7712918660287081,0.7052631578947368,0.7971291866028708,0.7942583732057417,0.5004784688995215,0.7894736842105263,0.8019138755980861,0.7913875598086124,0.8,0.7779904306220096,0.7569377990430622,0.7779904306220096,0.7894736842105263,0.5157894736842106,0.7464114832535885,0,0.784688995215311,0.7215311004784689,0.7923444976076555,0.0,0.7052631578947368,0.7722488038277512,0.7722488038277512,0.0,0.7913875598086124,0.7904306220095694,0.5014354066985646,0.7655502392344498,0.7799043062200957,0.0,0.7827751196172249,0.7052631578947368,0.7435406698564593,0.7971291866028708,0.7473684210526316,0.7827751196172249,0.769377990430622,0.723444976076555,0.7885167464114833,0.7358851674641148,0.7904306220095694,0.7818181818181819,0.783732057416268,0.7043062200956938,0.0,0.7808612440191387,0,0.0,0.7052631578947368,0.7923444976076555,0.7913875598086124,0.8028708133971292,0.7799043062200957,0.7885167464114833,0.7894736842105263,0.7799043062200957,0.755023923444976,0.7416267942583732,0.7425837320574162,0.5014354066985646,0.7607655502392344,0.7502392344497608,0.6086124401913876,0.7789473684210526,0.6095693779904306,0.783732057416268,0.8009569377990431,0.7827751196172249,0.769377990430622,0.7167464114832536,0,0.7052631578947368,0.7827751196172249,0.7913875598086124,0.784688995215311,0.7789473684210526,0.7464114832535885,0.7808612440191387,0.7980861244019138,0.7942583732057417,0.7808612440191387,0.7980861244019138,0.0,0.784688995215311,0.7980861244019138,0.7990430622009569
723,0.876,0.804,0.66,0.864,0.0,0.876,0.608,0.86,0.856,0.656,0.644,0.616,0.896,0.0,0.664,0.604,0.62,0.676,0.74,0.876,0.736,0.608,0.844,0.66,0.516,0.664,0.56,0.62,0.888,0.592,0.548,0.624,0.916,0.628,0.736,0.6,0.912,0.552,0.884,0,0.68,0.56,0.52,0.632,0.876,0.884,0.536,0.548,0.608,0.632,0.0,0.832,0.572,0.612,0.512,0.644,0.888,0.656,0.528,0.604,0.696,0.86,0.852,0.664,0.676,0.68,0.756,0.876,0.548,0.868,0.876,0.844,0.508,0.824,0.676,0.808,0.664,0.548,0.664,0,0.652,0.0,0.896,0.484,0.0,0.516,0.644,0.652,0.868,0.68,0.548,0.848,0.828,0.884,0.652,0.0,0.888,0.776,0.548,0.696,0.884,0.676,0.884,0.9,0.552,0.492,0.884,0.52,0.532,0.872,0,0.84,0.0,0.508,0.9,0.76,0.88,0.808,0.752,0.86,0.724,0.652,0.596,0.0,0.86,0.856,0.0,0.816,0.0,0.896,0.732,0.768,0.72,0.488,0,0.68,0.884,0.652,0.9,0.808,0.616,0.872,0.548,0.892,0.852,0.664,0.644,0.896,0.776,0.888
725,0.92138671875,0.9248046875,0.92578125,0.931640625,0.8935546875,0.9375,0.93359375,0.93017578125,0.9375,0.92333984375,0.59619140625,0.80419921875,0.92431640625,0.0,0.787109375,0.56591796875,0.93310546875,0.92822265625,0.92041015625,0.9365234375,0.9287109375,0.876953125,0.93408203125,0.572265625,0.90869140625,0.787109375,0.87890625,0.93310546875,0.93505859375,0.59619140625,0.59619140625,0.88037109375,0.9365234375,0.583984375,0.9345703125,0.88037109375,0.9375,0.59619140625,0.9287109375,0,0.5322265625,0.94140625,0.779296875,0.60693359375,0.93896484375,0.9287109375,0.779296875,0.59619140625,0.845703125,0.59619140625,0.0,0.93701171875,0.8876953125,0.861328125,0.8916015625,0.927734375,0.93505859375,0.8740234375,0.80908203125,0.74365234375,0.9169921875,0.93310546875,0.9365234375,0.787109375,0.9208984375,0.5322265625,0.93701171875,0.9365234375,0.60107421875,0.9345703125,0.916015625,0.923828125,0.9287109375,0.9033203125,0.59619140625,0.93359375,0.92578125,0.60302734375,0.787109375,0,0.90869140625,0.0,0.8994140625,0.0,0.0,0.89208984375,0.92822265625,0.919921875,0.9345703125,0.92236328125,0.59619140625,0.92626953125,0.9091796875,0.9267578125,0.92919921875,0.0,0.9140625,0.93115234375,0.60400390625,0.7392578125,0.93115234375,0.88037109375,0.9365234375,0.78125,0.896484375,0.92919921875,0.93701171875,0.779296875,0.0,0.935546875,0,0.923828125,0.0,0.9345703125,0.0,0.93310546875,0.93017578125,0.91455078125,0.93603515625,0.9326171875,0.6826171875,0.74951171875,0.87548828125,0.0,0.919921875,0.92822265625,0.0,0.92333984375,0.0,0.943359375,0.93408203125,0.939453125,0.884765625,0.88818359375,0,0.59619140625,0.92626953125,0.9267578125,0.93701171875,0.92822265625,0.93603515625,0.931640625,0.59619140625,0.93603515625,0.9326171875,0.92236328125,0.89453125,0.9365234375,0.94140625,0.93310546875
728,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.7058242843040474,0.9911154985192497,0.9901283316880553,0.9940769990128332,0.9911154985192497,0.9624876604146101,0.7601184600197434,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.736426456071076,0.9901283316880553,0.9940769990128332,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9871668311944719,0.9911154985192497,0.7601184600197434,0.9842053307008884,0.9911154985192497,0.9792694965449161,0.7571569595261599,0.9911154985192497,0.7601184600197434,0.7601184600197434,0.9861796643632774,0.9911154985192497,0.7591312931885489,0.9911154985192497,0.9911154985192497,0.9940769990128332,0.7601184600197434,0.9911154985192497,0,0.6278381046396841,0.9901283316880553,0.9911154985192497,0.7601184600197434,0.9911154985192497,0.914116485686081,0.9911154985192497,0.7601184600197434,0.7492596248766041,0.7601184600197434,0.9911154985192497,0.9930898321816387,0.9911154985192497,0.8716683119447186,0.9842053307008884,0.9911154985192497,0.9911154985192497,0.9891411648568608,0.9792694965449161,0.9891411648568608,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9861796643632774,0.5162882527147088,0.9911154985192497,0.9911154985192497,0.7601184600197434,0.9911154985192497,0.9911154985192497,0.9239881539980257,0.9901283316880553,0.8499506416584403,0.7601184600197434,0.9921026653504442,0.9940769990128332,0.7601184600197434,0.9911154985192497,0,0.9782823297137216,0.8114511352418559,0.9881539980256664,0.9891411648568608,0.7541954590325765,0.9871668311944719,0.9733464955577492,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.7601184600197434,0.9911154985192497,0.9210266535044422,0.9921026653504442,0.9891411648568608,0.7532082922013821,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9940769990128332,0.9565646594274433,0.9911154985192497,0.9911154985192497,0.9881539980256664,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9901283316880553,0.9881539980256664,0,0.9911154985192497,0.7541954590325765,0.9822309970384995,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9930898321816387,0.9911154985192497,0.773938795656466,0.7551826258637709,0.9911154985192497,0.7601184600197434,0.9960513326752222,0.9940769990128332,0.84106614017769,0.9911154985192497,0.7423494570582428,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.9861796643632774,0.9911154985192497,0,0.7591312931885489,0.9230009871668312,0.9911154985192497,0.9911154985192497,0.9911154985192497,0.7571569595261599,0.9921026653504442,0.7601184600197434,0.9911154985192497,0.9911154985192497,0.9871668311944719,0.983218163869694,0.9911154985192497,0.9940769990128332,0.9911154985192497
735,0.9296875,0.91064453125,0.8056640625,0.921875,0.7919921875,0.92822265625,0.85595703125,0.921875,0.9345703125,0.8701171875,0.69775390625,0.7158203125,0.921875,0.0,0.845703125,0.69775390625,0.9189453125,0.8046875,0.822265625,0.91845703125,0.81396484375,0.921875,0.91748046875,0.69775390625,0.69775390625,0.845703125,0.89453125,0.83984375,0.9189453125,0.69775390625,0.69775390625,0.798828125,0.92919921875,0.69775390625,0.92529296875,0.8154296875,0.9248046875,0.69775390625,0.88134765625,0,0.4951171875,0.935546875,0.76220703125,0.69775390625,0.92919921875,0.919921875,0.76220703125,0.69775390625,0.85400390625,0.69775390625,0.0,0.93017578125,0.81005859375,0.90283203125,0.69482421875,0.80859375,0.92529296875,0.888671875,0.92041015625,0.9208984375,0.89208984375,0.91455078125,0.91845703125,0.845703125,0.865234375,0.49609375,0.92041015625,0.88671875,0.69775390625,0.91748046875,0.89892578125,0.88427734375,0.69775390625,0.853515625,0.69775390625,0.931640625,0.8115234375,0.77685546875,0.845703125,0,0.904296875,0.78271484375,0.921875,0.0,0.7919921875,0.67529296875,0.91259765625,0.8095703125,0.919921875,0.8984375,0.69775390625,0.9091796875,0.890625,0.923828125,0.91748046875,0.7919921875,0.9267578125,0.91552734375,0.69775390625,0.91796875,0.931640625,0.84130859375,0.92578125,0.87646484375,0.69677734375,0.8212890625,0.927734375,0.76220703125,0.0,0.92333984375,0,0.92431640625,0.7919921875,0.69775390625,0.0,0.91455078125,0.93017578125,0.91943359375,0.8115234375,0.923828125,0.69775390625,0.8154296875,0.79541015625,0.69775390625,0.91357421875,0.91162109375,0.73974609375,0.9208984375,0.73291015625,0.935546875,0.916015625,0.9296875,0.923828125,0.806640625,0,0.69775390625,0.9189453125,0.80810546875,0.92431640625,0.92041015625,0.84033203125,0.90869140625,0.69775390625,0.9228515625,0.921875,0.8984375,0.8193359375,0.921875,0.93310546875,0.92529296875
737,0.7850707850707851,0.788931788931789,0.5508365508365508,0.8236808236808236,0.0,0.8223938223938224,0.5315315315315315,0.8378378378378378,0.8378378378378378,0.8416988416988417,0.5045045045045045,0.6023166023166023,0.8262548262548263,0.797940797940798,0.7297297297297297,0.4954954954954955,0.8378378378378378,0.5804375804375804,0.5868725868725869,0.8211068211068211,0.5611325611325612,0.803088803088803,0.8211068211068211,0.4954954954954955,0.5122265122265123,0.7297297297297297,0.8558558558558559,0.5045045045045045,0.8314028314028314,0.8133848133848134,0.5045045045045045,0.6808236808236808,0.8262548262548263,0.4954954954954955,0.87001287001287,0.8198198198198198,0.8365508365508365,0.5045045045045045,0.7747747747747747,0,0.5045045045045045,0.8095238095238095,0.806949806949807,0.5045045045045045,0.8172458172458172,0.8018018018018018,0.806949806949807,0.5045045045045045,0.4491634491634492,0.0,0.7966537966537967,0.8416988416988417,0.5804375804375804,0.6795366795366795,0.4929214929214929,0.5971685971685972,0.8352638352638353,0.8674388674388674,0.8468468468468469,0.8185328185328186,0.8378378378378378,0.806949806949807,0.8146718146718147,0.7297297297297297,0.7837837837837838,0.5045045045045045,0.861003861003861,0.7915057915057915,0.5045045045045045,0.8236808236808236,0.8018018018018018,0.5045045045045045,0.49935649935649934,0.5045045045045045,0.5045045045045045,0.842985842985843,0.592020592020592,0.5045045045045045,0.7297297297297297,0,0.7902187902187903,0.0,0.8082368082368082,0.0,0.0,0.4929214929214929,0.7812097812097812,0.5907335907335908,0.8326898326898327,0.7812097812097812,0.5045045045045045,0.7953667953667953,0.5045045045045045,0.7477477477477478,0.8597168597168597,0.0,0.7812097812097812,0.8674388674388674,0.5662805662805663,0.8262548262548263,0.8326898326898327,0.7992277992277992,0.8352638352638353,0.731016731016731,0.5070785070785071,0.7516087516087516,0.8223938223938224,0.806949806949807,0.0,0.8326898326898327,0,0.7567567567567568,0.0,0.49034749034749037,0.8288288288288288,0.8674388674388674,0.8275418275418276,0.8159588159588159,0.592020592020592,0.8095238095238095,0.7747747747747747,0.6666666666666666,0.6306306306306306,0.0,0.7824967824967825,0.7657657657657657,0.0,0.8314028314028314,0.0,0.8391248391248392,0.8661518661518661,0.7966537966537967,0.8236808236808236,0.6435006435006435,0,0.5045045045045045,0.6293436293436293,0.5534105534105535,0.8391248391248392,0.8262548262548263,0.5045045045045045,0.7683397683397684,0.5045045045045045,0.8262548262548263,0.8223938223938224,0.8404118404118404,0.5855855855855856,0.833976833976834,0.803088803088803,0.8185328185328186
740,0.94,0.896,0.788,0.944,0.0,0.94,0.66,0.924,0.9,0.728,0.72,0.576,0.912,0.908,0.736,0.68,0.66,0.86,0.828,0.924,0.836,0.856,0.92,0.708,0.644,0.736,0.712,0.66,0.944,0.56,0.56,0.664,0.952,0.712,0.876,0.752,0.948,0.556,0.924,0,0.72,0.86,0.688,0.708,0.932,0.912,0.688,0.56,0.692,0.74,0.924,0.908,0.568,0.656,0.604,0.804,0.932,0.72,0.712,0.744,0.764,0.92,0.928,0.736,0.82,0.72,0.848,0.944,0.56,0.936,0.916,0.88,0.724,0.836,0.752,0.876,0.792,0.56,0.736,0,0.752,0.0,0.936,0.724,0.0,0.7,0.664,0.784,0.928,0.752,0.56,0.88,0.836,0.952,0.84,0.0,0.948,0.876,0.56,0.848,0.908,0.696,0.952,0.872,0.628,0.656,0.94,0.688,0.668,0.932,0,0.912,0.0,0.82,0.94,0.836,0.888,0.844,0.932,0.924,0.568,0.728,0.644,0.0,0.892,0.912,0.0,0.888,0.0,0.944,0.832,0.948,0.824,0.624,0,0.736,0.936,0.792,0.956,0.896,0.688,0.904,0.56,0.94,0.92,0.76,0.708,0.932,0.848,0.94
742,0.872,0.824,0.592,0.824,0.0,0.864,0.64,0.808,0.872,0.6,0.752,0.696,0.88,0.0,0.776,0.624,0.608,0.52,0.64,0.824,0.672,0.856,0.808,0.68,0.512,0.776,0.624,0.608,0.904,0.0,0.568,0.64,0.0,0.64,0.608,0.496,0.896,0.568,0.888,0,0.736,0.904,0.472,0.752,0.872,0.848,0.472,0.568,0.632,0.784,0.0,0.792,0.52,0.552,0.584,0.584,0.832,0.592,0.552,0.552,0.584,0.784,0.824,0.776,0.56,0.744,0.624,0.872,0.568,0.816,0.872,0.848,0.584,0.84,0.744,0.784,0.592,0.568,0.776,0,0.568,0.0,0.84,0.464,0.0,0.528,0.64,0.552,0.856,0.568,0.568,0.848,0.824,0.888,0.632,0.0,0.912,0.616,0.568,0.584,0.856,0.56,0.896,0.912,0.552,0.552,0.888,0.472,0.544,0.88,0,0.816,0.0,0.592,0.0,0.64,0.84,0.8,0.904,0.872,0.672,0.736,0.592,0.0,0.776,0.832,0.0,0.832,0.0,0.88,0.64,0.896,0.576,0.544,0,0.728,0.84,0.584,0.904,0.824,0.648,0.816,0.568,0.888,0.8,0.496,0.664,0.872,0.896,0.872
743,0.868,0.86,0.832,0.888,0.0,0.892,0.62,0.884,0.92,0.716,0.724,0.716,0.876,0.808,0.676,0.692,0.62,0.892,0.852,0.872,0.856,0.856,0.868,0.736,0.876,0.676,0.732,0.62,0.876,0.708,0.572,0.568,0.916,0.692,0.832,0.792,0.896,0.568,0.78,0,0.676,0.916,0.708,0.712,0.864,0.932,0.708,0.592,0.692,0.744,0.84,0.9,0.664,0.672,0.776,0.848,0.928,0.728,0.86,0.84,0.784,0.88,0.872,0.676,0.824,0.676,0.836,0.788,0.544,0.876,0.864,0.82,0.904,0.776,0.668,0.908,0.868,0.544,0.676,0,0.728,0.0,0.776,0.88,0.0,0.812,0.62,0.84,0.892,0.736,0.544,0.816,0.752,0.872,0.828,0.0,0.916,0.804,0.544,0.864,0.912,0.636,0.924,0.584,0.84,0.78,0.896,0.708,0.86,0.916,0,0.908,0.0,0.76,0.904,0.832,0.912,0.876,0.868,0.876,0.764,0.672,0.684,0.0,0.836,0.852,0.0,0.9,0.0,0.912,0.832,0.872,0.88,0.708,0,0.696,0.876,0.828,0.936,0.892,0.612,0.844,0.548,0.904,0.844,0.78,0.628,0.908,0.872,0.904
749,0.872,0.824,0.808,0.88,0.0,0.864,0.672,0.824,0.856,0.76,0.68,0.704,0.872,0.792,0.672,0.616,0.656,0.848,0.832,0.856,0.808,0.624,0.832,0.792,0.936,0.672,0.752,0.656,0.912,0.832,0.76,0.536,0.872,0.656,0.856,0.712,0.848,0.528,0.816,0,0.656,0.6,0.656,0.664,0.888,0.872,0.656,0.6,0.752,0.688,0.792,0.88,0.776,0.624,0.832,0.848,0.872,0.816,0.88,0.848,0.728,0.848,0.864,0.672,0.76,0.656,0.832,0.816,0.528,0.864,0.88,0.76,0.912,0.824,0.656,0.904,0.856,0.528,0.672,0,0.528,0.0,0.792,0.88,0.0,0.816,0.664,0.832,0.88,0.528,0.528,0.824,0.832,0.856,0.808,0.0,0.904,0.824,0.528,0.848,0.848,0.728,0.872,0.576,0.824,0.0,0.856,0.656,0.872,0.888,0,0.864,0.0,0.792,0.864,0.824,0.88,0.808,0.816,0.832,0.632,0.648,0.864,0.0,0.8,0.848,0.0,0.888,0.0,0.88,0.784,0.832,0.848,0.76,0,0.688,0.784,0.808,0.856,0.888,0.688,0.8,0.592,0.808,0.856,0.76,0.648,0.888,0.64,0.88
750,0.64,0.576,0.656,0.608,0.0,0.72,0.472,0.632,0.64,0.6,0.576,0.584,0.68,0.632,0.544,0.536,0.48,0.632,0.688,0.6,0.64,0.0,0.608,0.568,0.528,0.536,0.568,0.48,0.64,0.632,0.544,0.496,0.592,0.552,0.616,0.488,0.6,0.464,0.568,0,0.568,0.0,0.496,0.528,0.632,0.624,0.496,0.504,0.568,0.0,0.624,0.576,0.592,0.624,0.464,0.568,0.6,0.576,0.568,0.576,0.624,0.64,0.56,0.544,0.504,0.536,0.664,0.632,0.496,0.608,0.624,0.584,0.496,0.56,0.576,0.648,0.608,0.504,0.544,0,0.504,0.0,0.584,0.544,0.0,0.488,0.544,0.664,0.616,0.504,0.504,0.536,0.536,0.6,0.592,0.0,0.616,0.608,0.504,0.64,0.616,0.48,0.616,0.536,0.536,0.0,0.624,0.496,0.456,0.648,0,0.64,0.0,0.488,0.632,0.616,0.656,0.648,0.0,0.552,0.528,0.496,0.64,0.0,0.608,0.536,0.0,0.672,0.0,0.664,0.656,0.0,0.592,0.632,0,0.568,0.704,0.648,0.608,0.672,0.488,0.536,0.584,0.624,0.576,0.552,0.496,0.648,0.0,0.616
751,0.876,0.824,0.772,0.864,0.0,0.86,0.652,0.848,0.868,0.788,0.72,0.572,0.872,0.82,0.724,0.668,0.664,0.84,0.82,0.868,0.812,0.892,0.876,0.692,0.62,0.724,0.724,0.664,0.884,0.56,0.56,0.7,0.884,0.692,0.856,0.676,0.896,0.552,0.892,0,0.704,0.864,0.616,0.7,0.888,0.884,0.616,0.56,0.644,0.732,0.856,0.864,0.62,0.66,0.628,0.792,0.892,0.712,0.736,0.788,0.792,0.876,0.868,0.724,0.8,0.704,0.856,0.884,0.56,0.872,0.872,0.804,0.7,0.768,0.728,0.84,0.82,0.56,0.724,0,0.756,0.0,0.892,0.728,0.0,0.78,0.616,0.784,0.884,0.724,0.56,0.796,0.772,0.884,0.736,0.0,0.908,0.812,0.56,0.828,0.884,0.664,0.892,0.836,0.568,0.576,0.888,0.616,0.588,0.896,0,0.836,0.0,0.796,0.892,0.832,0.832,0.78,0.88,0.876,0.58,0.704,0.604,0.0,0.792,0.872,0.0,0.828,0.0,0.896,0.828,0.86,0.82,0.6,0,0.704,0.848,0.784,0.912,0.836,0.652,0.856,0.56,0.9,0.832,0.768,0.632,0.876,0.86,0.892
752,0.0,0.8583984375,0.64453125,0.85791015625,0.0,0.0,0.63623046875,0.8515625,0.7890625,0.732421875,0.6474609375,0.64404296875,0.8779296875,0.0,0.64501953125,0.5986328125,0.6357421875,0.60107421875,0.6455078125,0.8828125,0.630859375,0.6494140625,0.87841796875,0.6298828125,0.478515625,0.64501953125,0.51025390625,0.6357421875,0.88525390625,0.0,0.50439453125,0.62646484375,0.0,0.61767578125,0.63427734375,0.6083984375,0.0,0.6474609375,0.638671875,0,0.6474609375,0.6474609375,0.59912109375,0.63427734375,0.0,0.8466796875,0.59912109375,0.6484375,0.59228515625,0.6474609375,0.0,0.751953125,0.5126953125,0.51318359375,0.5166015625,0.61328125,0.87890625,0.61572265625,0.49560546875,0.61962890625,0.609375,0.87353515625,0.87841796875,0.64501953125,0.857421875,0.6474609375,0.0,0.6376953125,0.53857421875,0.87646484375,0.88134765625,0.62841796875,0.4814453125,0.81005859375,0.6484375,0.78466796875,0.61962890625,0.50390625,0.64501953125,0,0.65185546875,0.0,0.63671875,0.0,0.0,0.0,0.6357421875,0.64501953125,0.87353515625,0.87744140625,0.50390625,0.861328125,0.826171875,0.87890625,0.83984375,0.0,0.88134765625,0.62939453125,0.5771484375,0.6923828125,0.84814453125,0.630859375,0.88525390625,0.63818359375,0.50634765625,0.0,0.0,0.59912109375,0.0,0.86962890625,0,0.65087890625,0.0,0.49560546875,0.0,0.0,0.65283203125,0.7666015625,0.5849609375,0.0,0.642578125,0.64794921875,0.54638671875,0.0,0.8505859375,0.86181640625,0.0,0.75537109375,0.0,0.0,0.0,0.56787109375,0.62939453125,0.53369140625,0,0.6474609375,0.86376953125,0.642578125,0.880859375,0.79443359375,0.63671875,0.873046875,0.61328125,0.87890625,0.8603515625,0.75244140625,0.62939453125,0.87744140625,0.640625,0.0
